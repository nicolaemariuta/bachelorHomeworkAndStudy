

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Tue Dec 18 00:05:58 2012

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	text194,local,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,delta=2
    10                           	psect	text195,local,class=CODE,delta=2
    11                           	psect	text200,local,class=CODE,delta=2
    12                           	psect	text201,local,class=CODE,delta=2
    13                           	psect	text202,local,class=CODE,delta=2
    14                           	psect	text203,local,class=CODE,delta=2
    15                           	psect	text204,local,class=CODE,delta=2
    16                           	psect	pa_nodes,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  000A                     	;#
    19                           
    20                           	psect	config
    21  2007  FF72               	dw	65394	;#
    22                           
    23                           	psect	text194
    24  0000                     __ptext194:	
    25  001F                     _ADCON0	set	31
    26  001E                     _ADRESH	set	30
    27  0006                     _PORTB	set	6
    28  00FA                     _GO_nDONE	set	250
    29  0030                     _RB0	set	48
    30  0031                     _RB1	set	49
    31  0034                     _RB4	set	52
    32  0035                     _RB5	set	53
    33  0036                     _RB6	set	54
    34  0037                     _RB7	set	55
    35  009F                     _ADCON1	set	159
    36  009E                     _ADRESL	set	158
    37  0085                     _TRISA	set	133
    38  0089                     _TRISE	set	137
    39  0430                     _TRISB0	set	1072
    40  0431                     _TRISB1	set	1073
    41  0434                     _TRISB4	set	1076
    42  0435                     _TRISB5	set	1077
    43  0436                     _TRISB6	set	1078
    44  0437                     _TRISB7	set	1079
    45                           
    46                           	psect	cinit
    47  05DE                     start_initialization:	
    48  05DE                     end_of_initialization:	
    49                           ;End of C runtime variable initialization code
    50                           
    51  05DE  0183               	clrf	3
    52  05DF  120A  118A  2F0B   	ljmp	_main	;jump to C main() function
    53                           
    54                           	psect	cstackCOMMON
    55  0070                     __pcstackCOMMON:	
    56  0070                     ?_InitADC:	
    57  0070                     ??_InitADC:	
    58                           ; 0 bytes @ 0x0
    59                           
    60  0070                     ?_ToggleEpinOfLCD:	
    61                           ; 0 bytes @ 0x0
    62                           
    63  0070                     ??_ToggleEpinOfLCD:	
    64                           ; 0 bytes @ 0x0
    65                           
    66  0070                     ?_WriteCommandToLCD:	
    67                           ; 0 bytes @ 0x0
    68                           
    69  0070                     ?_WriteDataToLCD:	
    70                           ; 0 bytes @ 0x0
    71                           
    72  0070                     ?_InitLCD:	
    73                           ; 0 bytes @ 0x0
    74                           
    75  0070                     ?_ClearLCDScreen:	
    76                           ; 0 bytes @ 0x0
    77                           
    78  0070                     ?_main:	
    79                           ; 0 bytes @ 0x0
    80                           
    81  0070                     ?_GetADCValue:	
    82                           ; 0 bytes @ 0x0
    83                           
    84  0070                     ?___wmul:	
    85                           ; 2 bytes @ 0x0
    86                           
    87  0070                     ___wmul@multiplier:	
    88                           ; 2 bytes @ 0x0
    89                           
    90                           
    91                           ; 2 bytes @ 0x0
    92  0070                     	ds	2
    93  0072                     ??_GetADCValue:	
    94  0072                     ??_WriteCommandToLCD:	
    95                           ; 0 bytes @ 0x2
    96                           
    97  0072                     ??_WriteDataToLCD:	
    98                           ; 0 bytes @ 0x2
    99                           
   100  0072                     WriteCommandToLCD@Command:	
   101                           ; 0 bytes @ 0x2
   102                           
   103  0072                     WriteDataToLCD@LCDChar:	
   104                           ; 1 bytes @ 0x2
   105                           
   106  0072                     ___wmul@multiplicand:	
   107                           ; 1 bytes @ 0x2
   108                           
   109                           
   110                           ; 2 bytes @ 0x2
   111  0072                     	ds	1
   112  0073                     ??_InitLCD:	
   113  0073                     ??_ClearLCDScreen:	
   114                           ; 0 bytes @ 0x3
   115                           
   116                           
   117                           ; 0 bytes @ 0x3
   118  0073                     	ds	1
   119  0074                     ??___wmul:	
   120  0074                     GetADCValue@Channel:	
   121                           ; 0 bytes @ 0x4
   122                           
   123  0074                     ___wmul@product:	
   124                           ; 1 bytes @ 0x4
   125                           
   126                           
   127                           ; 2 bytes @ 0x4
   128  0074                     	ds	2
   129  0076                     ?___lwdiv:	
   130  0076                     ___lwdiv@divisor:	
   131                           ; 2 bytes @ 0x6
   132                           
   133                           
   134                           ; 2 bytes @ 0x6
   135  0076                     	ds	2
   136  0078                     ___lwdiv@dividend:	
   137                           
   138                           ; 2 bytes @ 0x8
   139  0078                     	ds	2
   140  007A                     ??___lwdiv:	
   141  007A                     ___lwdiv@quotient:	
   142                           ; 0 bytes @ 0xA
   143                           
   144                           
   145                           ; 2 bytes @ 0xA
   146  007A                     	ds	2
   147  007C                     ___lwdiv@counter:	
   148                           
   149                           ; 1 bytes @ 0xC
   150  007C                     	ds	1
   151                           
   152                           	psect	cstackBANK0
   153  0020                     __pcstackBANK0:	
   154  0020                     ??_main:	
   155                           
   156                           ; 0 bytes @ 0x0
   157  0020                     	ds	4
   158  0024                     main@digit4:	
   159                           
   160                           ; 2 bytes @ 0x4
   161  0024                     	ds	2
   162  0026                     main@digit3:	
   163                           
   164                           ; 2 bytes @ 0x6
   165  0026                     	ds	2
   166  0028                     main@digit2:	
   167                           
   168                           ; 2 bytes @ 0x8
   169  0028                     	ds	2
   170  002A                     main@digit1:	
   171                           
   172                           ; 2 bytes @ 0xA
   173  002A                     	ds	2
   174  002C                     main@ADC_value:	
   175                           
   176                           ; 2 bytes @ 0xC
   177  002C                     	ds	2
   178                           
   179                           	psect	maintext
   180  070B                     __pmaintext:	
   181 ;;Data sizes: Strings 0, constant 0, data 0, bss 0, persistent 0 stack 0
   182 ;;Auto spaces:   Size  Autos    Used
   183 ;; COMMON          14     13      13
   184 ;; BANK0           80     14      14
   185 ;; BANK1           80      0       0
   186 ;; BANK3           96      0       0
   187 ;; BANK2           96      0       0
   188 ;;
   189 ;; Pointer list with targets:
   190 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   191 ;;
   192 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   193 ;;
   194 ;; ?_GetADCValue	unsigned int  size(1) Largest target is 0
   195 ;;
   196 ;;
   197 ;; Critical Paths under _main in COMMON
   198 ;;
   199 ;;   _main->___lwdiv
   200 ;;   _ClearLCDScreen->_WriteCommandToLCD
   201 ;;   _InitLCD->_WriteCommandToLCD
   202 ;;   _WriteDataToLCD->_ToggleEpinOfLCD
   203 ;;   _WriteCommandToLCD->_ToggleEpinOfLCD
   204 ;;   ___lwdiv->___wmul
   205 ;;
   206 ;; Critical Paths under _main in BANK0
   207 ;;
   208 ;;   None.
   209 ;;
   210 ;; Critical Paths under _main in BANK1
   211 ;;
   212 ;;   None.
   213 ;;
   214 ;; Critical Paths under _main in BANK3
   215 ;;
   216 ;;   None.
   217 ;;
   218 ;; Critical Paths under _main in BANK2
   219 ;;
   220 ;;   None.
   221 ;;
   222 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   223 ;;
   224 ;;
   225 ;;Call Graph Tables:
   226 ;;
   227 ;; ---------------------------------------------------------------------------------
   228 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   229 ;; ---------------------------------------------------------------------------------
   230 ;; (0) _main                                                14    14      0     725
   231 ;;                                              0 BANK0     14    14      0
   232 ;;                            _InitADC
   233 ;;                            _InitLCD
   234 ;;                     _ClearLCDScreen
   235 ;;                        _GetADCValue
   236 ;;                            ___lwdiv
   237 ;;                             ___wmul
   238 ;;                     _WriteDataToLCD
   239 ;; ---------------------------------------------------------------------------------
   240 ;; (1) _ClearLCDScreen                                       2     2      0      44
   241 ;;                                              3 COMMON     2     2      0
   242 ;;                  _WriteCommandToLCD
   243 ;; ---------------------------------------------------------------------------------
   244 ;; (1) _InitLCD                                              3     3      0      44
   245 ;;                                              3 COMMON     3     3      0
   246 ;;                    _ToggleEpinOfLCD
   247 ;;                  _WriteCommandToLCD
   248 ;; ---------------------------------------------------------------------------------
   249 ;; (1) _WriteDataToLCD                                       1     1      0      44
   250 ;;                                              2 COMMON     1     1      0
   251 ;;                    _ToggleEpinOfLCD
   252 ;; ---------------------------------------------------------------------------------
   253 ;; (2) _WriteCommandToLCD                                    1     1      0      44
   254 ;;                                              2 COMMON     1     1      0
   255 ;;                    _ToggleEpinOfLCD
   256 ;; ---------------------------------------------------------------------------------
   257 ;; (2) _ToggleEpinOfLCD                                      2     2      0       0
   258 ;;                                              0 COMMON     2     2      0
   259 ;; ---------------------------------------------------------------------------------
   260 ;; (1) _GetADCValue                                          5     3      2      22
   261 ;;                                              0 COMMON     5     3      2
   262 ;; ---------------------------------------------------------------------------------
   263 ;; (1) ___lwdiv                                              7     3      4     162
   264 ;;                                              6 COMMON     7     3      4
   265 ;;                             ___wmul (ARG)
   266 ;; ---------------------------------------------------------------------------------
   267 ;; (1) ___wmul                                               6     2      4      92
   268 ;;                                              0 COMMON     6     2      4
   269 ;; ---------------------------------------------------------------------------------
   270 ;; (1) _InitADC                                              0     0      0       0
   271 ;; ---------------------------------------------------------------------------------
   272 ;; Estimated maximum stack depth 2
   273 ;; ---------------------------------------------------------------------------------
   274 ;; Call Graph Graphs:
   275 ;; _main (ROOT)
   276 ;;   _InitADC
   277 ;;   _InitLCD
   278 ;;     _ToggleEpinOfLCD
   279 ;;     _WriteCommandToLCD
   280 ;;       _ToggleEpinOfLCD
   281 ;;   _ClearLCDScreen
   282 ;;     _WriteCommandToLCD
   283 ;;       _ToggleEpinOfLCD
   284 ;;   _GetADCValue
   285 ;;   ___lwdiv
   286 ;;     ___wmul (ARG)
   287 ;;   ___wmul
   288 ;;   _WriteDataToLCD
   289 ;;     _ToggleEpinOfLCD
   290 ;;
   291 ;; Address spaces:
   292 ;;Name               Size   Autos  Total    Cost      Usage
   293 ;;BITCOMMON            E      0       0       0        0.0%
   294 ;;EEDATA             100      0       0       0        0.0%
   295 ;;NULL                 0      0       0       0        0.0%
   296 ;;CODE                 0      0       0       0        0.0%
   297 ;;COMMON               E      D       D       1       92.9%
   298 ;;BITSFR0              0      0       0       1        0.0%
   299 ;;SFR0                 0      0       0       1        0.0%
   300 ;;BITSFR1              0      0       0       2        0.0%
   301 ;;SFR1                 0      0       0       2        0.0%
   302 ;;STACK                0      0       3       2        0.0%
   303 ;;ABS                  0      0       0       3        0.0%
   304 ;;BITBANK0            50      0       0       4        0.0%
   305 ;;BITSFR3              0      0       0       4        0.0%
   306 ;;SFR3                 0      0       0       4        0.0%
   307 ;;BANK0               50      E       E       5       17.5%
   308 ;;BITSFR2              0      0       0       5        0.0%
   309 ;;SFR2                 0      0       0       5        0.0%
   310 ;;BITBANK1            50      0       0       6        0.0%
   311 ;;BANK1               50      0       0       7        0.0%
   312 ;;BITBANK3            60      0       0       8        0.0%
   313 ;;BANK3               60      0       0       9        0.0%
   314 ;;BITBANK2            60      0       0      10        0.0%
   315 ;;BANK2               60      0       0      11        0.0%
   316 ;;DATA                 0      0       0      12        0.0%
   317                           
   318                           
   319 ;; *************** function _main *****************
   320 ;; Defined at:
   321 ;;		line 16 in file "C:\Users\Saeed\Desktop\PIC16F877 ADC Code\Code\Main.c"
   322 ;; Parameters:    Size  Location     Type
   323 ;;		None
   324 ;; Auto vars:     Size  Location     Type
   325 ;;  ADC_value       2   12[BANK0 ] unsigned int 
   326 ;;  digit1          2   10[BANK0 ] unsigned int 
   327 ;;  digit2          2    8[BANK0 ] unsigned int 
   328 ;;  digit3          2    6[BANK0 ] unsigned int 
   329 ;;  digit4          2    4[BANK0 ] unsigned int 
   330 ;; Return value:  Size  Location     Type
   331 ;;		None               void
   332 ;; Registers used:
   333 ;;		wreg, status,2, status,0, pclath, cstack
   334 ;; Tracked objects:
   335 ;;		On entry : 17F/0
   336 ;;		On exit  : 0/0
   337 ;;		Unchanged: 0/0
   338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   339 ;;      Params:         0       0       0       0       0
   340 ;;      Locals:         0      10       0       0       0
   341 ;;      Temps:          0       4       0       0       0
   342 ;;      Totals:         0      14       0       0       0
   343 ;;Total ram usage:       14 bytes
   344 ;; Hardware stack levels required when called:    3
   345 ;; This function calls:
   346 ;;		_InitADC
   347 ;;		_InitLCD
   348 ;;		_ClearLCDScreen
   349 ;;		_GetADCValue
   350 ;;		___lwdiv
   351 ;;		___wmul
   352 ;;		_WriteDataToLCD
   353 ;; This function is called by:
   354 ;;		Startup code after reset
   355 ;; This function uses a non-reentrant model
   356 ;;
   357  070B                     _main:	
   358                           
   359                           ;Main.c: 18: unsigned int digit1, digit2, digit3, digit4;
   360                           ;Main.c: 20: InitADC();
   361                           
   362                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   363  070B  120A  118A  25E2   	fcall	_InitADC
      +       120A  118A         
   364                           
   365                           ;Main.c: 21: InitLCD();
   366  0710  120A  118A  2674   	fcall	_InitLCD
      +       120A  118A         
   367  0715                     l3413:	
   368                           
   369                           ;Main.c: 24: {
   370                           ;Main.c: 25: ClearLCDScreen();
   371  0715  120A  118A  2655   	fcall	_ClearLCDScreen
      +       120A  118A         
   372                           
   373                           ;Main.c: 26: ADC_value = GetADCValue(7);
   374  071A  3007               	movlw	7
   375  071B  120A  118A  2606   	fcall	_GetADCValue
      +       120A  118A         
   376  0720  0871               	movf	?_GetADCValue+1,w
   377  0721  1283               	bcf	3,5	;RP0=0, select bank0
   378  0722  00AD               	movwf	main@ADC_value+1
   379  0723  0870               	movf	?_GetADCValue,w
   380  0724  00AC               	movwf	main@ADC_value
   381                           
   382                           ;Main.c: 30: digit1 = (unsigned int)(ADC_value/1000);
   383  0725  30E8               	movlw	232
   384  0726  00F6               	movwf	?___lwdiv
   385  0727  3003               	movlw	3
   386  0728  00F7               	movwf	?___lwdiv+1
   387  0729  082D               	movf	main@ADC_value+1,w
   388  072A  00F9               	movwf	?___lwdiv+3
   389  072B  082C               	movf	main@ADC_value,w
   390  072C  00F8               	movwf	?___lwdiv+2
   391  072D  120A  118A  262B   	fcall	___lwdiv
      +       120A  118A         
   392  0732  0877               	movf	?___lwdiv+1,w
   393  0733  00AB               	movwf	main@digit1+1
   394  0734  0876               	movf	?___lwdiv,w
   395  0735  00AA               	movwf	main@digit1
   396                           
   397                           ;Main.c: 31: digit2 = (unsigned int)((ADC_value - digit1*1000)/100);
   398  0736  3064               	movlw	100
   399  0737  00F6               	movwf	?___lwdiv
   400  0738  01F7               	clrf	?___lwdiv+1
   401  0739  082B               	movf	main@digit1+1,w
   402  073A  00F1               	movwf	?___wmul+1
   403  073B  082A               	movf	main@digit1,w
   404  073C  00F0               	movwf	?___wmul
   405  073D  3018               	movlw	24
   406  073E  00F2               	movwf	?___wmul+2
   407  073F  30FC               	movlw	252
   408  0740  00F3               	movwf	?___wmul+3
   409  0741  120A  118A  25ED   	fcall	___wmul
      +       120A  118A         
   410  0746  082C               	movf	main@ADC_value,w
   411  0747  0770               	addwf	?___wmul,w
   412  0748  00F8               	movwf	?___lwdiv+2
   413  0749  082D               	movf	main@ADC_value+1,w
   414  074A  1803               	skipnc
   415  074B  0A2D               	incf	main@ADC_value+1,w
   416  074C  0771               	addwf	?___wmul+1,w
   417  074D  00F9               	movwf	?___lwdiv+3
   418  074E  120A  118A  262B   	fcall	___lwdiv
      +       120A  118A         
   419  0753  0877               	movf	?___lwdiv+1,w
   420  0754  00A9               	movwf	main@digit2+1
   421  0755  0876               	movf	?___lwdiv,w
   422  0756  00A8               	movwf	main@digit2
   423                           
   424                           ;Main.c: 32: digit3 = (unsigned int)((ADC_value - (digit1*1000+digit2*100))/10);
   425  0757  300A               	movlw	10
   426  0758  00F6               	movwf	?___lwdiv
   427  0759  01F7               	clrf	?___lwdiv+1
   428  075A  082B               	movf	main@digit1+1,w
   429  075B  00F1               	movwf	?___wmul+1
   430  075C  082A               	movf	main@digit1,w
   431  075D  00F0               	movwf	?___wmul
   432  075E  3018               	movlw	24
   433  075F  00F2               	movwf	?___wmul+2
   434  0760  30FC               	movlw	252
   435  0761  00F3               	movwf	?___wmul+3
   436  0762  120A  118A  25ED   	fcall	___wmul
      +       120A  118A         
   437  0767  0870               	movf	?___wmul,w
   438  0768  00A0               	movwf	??_main
   439  0769  0871               	movf	?___wmul+1,w
   440  076A  00A1               	movwf	??_main+1
   441  076B  0829               	movf	main@digit2+1,w
   442  076C  00F1               	movwf	?___wmul+1
   443  076D  0828               	movf	main@digit2,w
   444  076E  00F0               	movwf	?___wmul
   445  076F  309C               	movlw	156
   446  0770  00F2               	movwf	?___wmul+2
   447  0771  30FF               	movlw	255
   448  0772  00F3               	movwf	?___wmul+3
   449  0773  120A  118A  25ED   	fcall	___wmul
      +       120A  118A         
   450  0778  0870               	movf	?___wmul,w
   451  0779  0720               	addwf	??_main,w
   452  077A  00A2               	movwf	??_main+2
   453  077B  0871               	movf	?___wmul+1,w
   454  077C  1803               	skipnc
   455  077D  0A71               	incf	?___wmul+1,w
   456  077E  0721               	addwf	??_main+1,w
   457  077F  00A3               	movwf	??_main+3
   458  0780  082C               	movf	main@ADC_value,w
   459  0781  0722               	addwf	??_main+2,w
   460  0782  00F8               	movwf	?___lwdiv+2
   461  0783  082D               	movf	main@ADC_value+1,w
   462  0784  1803               	skipnc
   463  0785  0A2D               	incf	main@ADC_value+1,w
   464  0786  0723               	addwf	??_main+3,w
   465  0787  00F9               	movwf	?___lwdiv+3
   466  0788  120A  118A  262B   	fcall	___lwdiv
      +       120A  118A         
   467  078D  0877               	movf	?___lwdiv+1,w
   468  078E  00A7               	movwf	main@digit3+1
   469  078F  0876               	movf	?___lwdiv,w
   470  0790  00A6               	movwf	main@digit3
   471                           
   472                           ;Main.c: 33: digit4 = (unsigned int)(ADC_value - (digit1*1000+digit2*100+digit3*10));
   473  0791  0827               	movf	main@digit3+1,w
   474  0792  00F1               	movwf	?___wmul+1
   475  0793  0826               	movf	main@digit3,w
   476  0794  00F0               	movwf	?___wmul
   477  0795  30F6               	movlw	246
   478  0796  00F2               	movwf	?___wmul+2
   479  0797  30FF               	movlw	255
   480  0798  00F3               	movwf	?___wmul+3
   481  0799  120A  118A  25ED   	fcall	___wmul
      +       120A  118A         
   482  079E  0871               	movf	?___wmul+1,w
   483  079F  00A5               	movwf	main@digit4+1
   484  07A0  0870               	movf	?___wmul,w
   485  07A1  00A4               	movwf	main@digit4
   486  07A2  0829               	movf	main@digit2+1,w
   487  07A3  00F1               	movwf	?___wmul+1
   488  07A4  0828               	movf	main@digit2,w
   489  07A5  00F0               	movwf	?___wmul
   490  07A6  309C               	movlw	156
   491  07A7  00F2               	movwf	?___wmul+2
   492  07A8  30FF               	movlw	255
   493  07A9  00F3               	movwf	?___wmul+3
   494  07AA  120A  118A  25ED   	fcall	___wmul
      +       120A  118A         
   495  07AF  0870               	movf	?___wmul,w
   496  07B0  07A4               	addwf	main@digit4,f
   497  07B1  1803               	skipnc
   498  07B2  0AA5               	incf	main@digit4+1,f
   499  07B3  0871               	movf	?___wmul+1,w
   500  07B4  07A5               	addwf	main@digit4+1,f
   501  07B5  082B               	movf	main@digit1+1,w
   502  07B6  00F1               	movwf	?___wmul+1
   503  07B7  082A               	movf	main@digit1,w
   504  07B8  00F0               	movwf	?___wmul
   505  07B9  3018               	movlw	24
   506  07BA  00F2               	movwf	?___wmul+2
   507  07BB  30FC               	movlw	252
   508  07BC  00F3               	movwf	?___wmul+3
   509  07BD  120A  118A  25ED   	fcall	___wmul
      +       120A  118A         
   510  07C2  0870               	movf	?___wmul,w
   511  07C3  07A4               	addwf	main@digit4,f
   512  07C4  1803               	skipnc
   513  07C5  0AA5               	incf	main@digit4+1,f
   514  07C6  0871               	movf	?___wmul+1,w
   515  07C7  07A5               	addwf	main@digit4+1,f
   516  07C8  082C               	movf	main@ADC_value,w
   517  07C9  07A4               	addwf	main@digit4,f
   518  07CA  1803               	skipnc
   519  07CB  0AA5               	incf	main@digit4+1,f
   520  07CC  082D               	movf	main@ADC_value+1,w
   521  07CD  07A5               	addwf	main@digit4+1,f
   522                           
   523                           ;Main.c: 35: WriteDataToLCD(digit1+0x30);
   524  07CE  082A               	movf	main@digit1,w
   525  07CF  3E30               	addlw	48
   526  07D0  120A  118A  2663   	fcall	_WriteDataToLCD
      +       120A  118A         
   527                           
   528                           ;Main.c: 36: WriteDataToLCD(digit2+0x30);
   529  07D5  1283               	bcf	3,5	;RP0=0, select bank0
   530  07D6  1303               	bcf	3,6	;RP1=0, select bank0
   531  07D7  0828               	movf	main@digit2,w
   532  07D8  3E30               	addlw	48
   533  07D9  120A  118A  2663   	fcall	_WriteDataToLCD
      +       120A  118A         
   534                           
   535                           ;Main.c: 37: WriteDataToLCD(digit3+0x30);
   536  07DE  1283               	bcf	3,5	;RP0=0, select bank0
   537  07DF  1303               	bcf	3,6	;RP1=0, select bank0
   538  07E0  0826               	movf	main@digit3,w
   539  07E1  3E30               	addlw	48
   540  07E2  120A  118A  2663   	fcall	_WriteDataToLCD
      +       120A  118A         
   541                           
   542                           ;Main.c: 38: WriteDataToLCD(digit4+0x30);
   543  07E7  1283               	bcf	3,5	;RP0=0, select bank0
   544  07E8  1303               	bcf	3,6	;RP1=0, select bank0
   545  07E9  0824               	movf	main@digit4,w
   546  07EA  3E30               	addlw	48
   547  07EB  120A  118A  2663   	fcall	_WriteDataToLCD
      +       120A  118A         
   548                           
   549                           ;Main.c: 40: _delay((unsigned long)((500)*(20000000/4000.0)));
   550  07F0  300D               	movlw	13
   551  07F1  1283               	bcf	3,5	;RP0=0, select bank0
   552  07F2  1303               	bcf	3,6	;RP1=0, select bank0
   553  07F3  00A2               	movwf	??_main+2
   554  07F4  30AF               	movlw	175
   555  07F5  00A1               	movwf	??_main+1
   556  07F6  30C1               	movlw	193
   557  07F7  00A0               	movwf	??_main
   558  07F8                     u157:	
   559  07F8  0BA0               	decfsz	??_main,f
   560  07F9  2FF8               	goto	u157
   561  07FA  0BA1               	decfsz	??_main+1,f
   562  07FB  2FF8               	goto	u157
   563  07FC  0BA2               	decfsz	??_main+2,f
   564  07FD  2FF8               	goto	u157
   565  07FE  0064               	clrwdt
   566  07FF  2F15               	goto	l3413
   567  0800                     __end_of_main:	
   568                           
   569                           	psect	text195
   570  0655                     __ptext195:	
   571 ;; =============== function _main ends ============
   572                           
   573                           
   574 ;; *************** function _ClearLCDScreen *****************
   575 ;; Defined at:
   576 ;;		line 99 in file "C:\Users\Saeed\Desktop\PIC16F877 ADC Code\Code\LCD.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;		None
   579 ;; Auto vars:     Size  Location     Type
   580 ;;		None
   581 ;; Return value:  Size  Location     Type
   582 ;;		None               void
   583 ;; Registers used:
   584 ;;		wreg, status,2, status,0, pclath, cstack
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   590 ;;      Params:         0       0       0       0       0
   591 ;;      Locals:         0       0       0       0       0
   592 ;;      Temps:          2       0       0       0       0
   593 ;;      Totals:         2       0       0       0       0
   594 ;;Total ram usage:        2 bytes
   595 ;; Hardware stack levels used:    1
   596 ;; Hardware stack levels required when called:    2
   597 ;; This function calls:
   598 ;;		_WriteCommandToLCD
   599 ;; This function is called by:
   600 ;;		_main
   601 ;; This function uses a non-reentrant model
   602 ;;
   603  0655                     _ClearLCDScreen:	
   604                           
   605                           ;LCD.c: 100: WriteCommandToLCD(0x01);
   606                           
   607                           ; Regs used in _ClearLCDScreen: [wreg+status,2+status,0+pclath+cstack]
   608  0655  3001               	movlw	1
   609  0656  26E8  120A  118A   	fcall	_WriteCommandToLCD
   610                           
   611                           ;LCD.c: 101: _delay((unsigned long)((2)*(20000000/4000.0)));
   612  0659  300D               	movlw	13
   613  065A  00F4               	movwf	??_ClearLCDScreen+1
   614  065B  30FB               	movlw	251
   615  065C  00F3               	movwf	??_ClearLCDScreen
   616  065D                     u167:	
   617  065D  0BF3               	decfsz	??_ClearLCDScreen,f
   618  065E  2E5D               	goto	u167
   619  065F  0BF4               	decfsz	??_ClearLCDScreen+1,f
   620  0660  2E5D               	goto	u167
   621  0661  2E62               	nop2
   622  0662  0008               	return
   623  0663                     __end_of_ClearLCDScreen:	
   624  0663                     __ptext197:	
   625 ;; =============== function _InitLCD ends ============
   626                           
   627                           
   628 ;; *************** function _WriteDataToLCD *****************
   629 ;; Defined at:
   630 ;;		line 28 in file "C:\Users\Saeed\Desktop\PIC16F877 ADC Code\Code\LCD.c"
   631 ;; Parameters:    Size  Location     Type
   632 ;;  LCDChar         1    wreg     unsigned char 
   633 ;; Auto vars:     Size  Location     Type
   634 ;;  LCDChar         1    2[COMMON] unsigned char 
   635 ;; Return value:  Size  Location     Type
   636 ;;		None               void
   637 ;; Registers used:
   638 ;;		wreg, status,2, status,0, pclath, cstack
   639 ;; Tracked objects:
   640 ;;		On entry : 60/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   644 ;;      Params:         0       0       0       0       0
   645 ;;      Locals:         1       0       0       0       0
   646 ;;      Temps:          0       0       0       0       0
   647 ;;      Totals:         1       0       0       0       0
   648 ;;Total ram usage:        1 bytes
   649 ;; Hardware stack levels used:    1
   650 ;; Hardware stack levels required when called:    1
   651 ;; This function calls:
   652 ;;		_ToggleEpinOfLCD
   653 ;; This function is called by:
   654 ;;		_main
   655 ;; This function uses a non-reentrant model
   656 ;;
   657  0663                     _WriteDataToLCD:	
   658                           
   659                           ; Regs used in _WriteDataToLCD: [wreg+status,2+status,0+pclath+cstack]
   660                           ;WriteDataToLCD@LCDChar stored from wreg
   661  0663  00F2               	movwf	WriteDataToLCD@LCDChar
   662  0664  300F               	movlw	15
   663                           
   664                           ;LCD.c: 29: RB1 = 1;
   665  0665  1486               	bsf	6,1
   666                           
   667                           ;LCD.c: 31: PORTB &= 0x0F;
   668  0666  0586               	andwf	6,f	;volatile
   669                           
   670                           ;LCD.c: 32: PORTB |= (LCDChar&0xF0);
   671  0667  0872               	movf	WriteDataToLCD@LCDChar,w
   672  0668  39F0               	andlw	240
   673  0669  0486               	iorwf	6,f	;volatile
   674                           
   675                           ;LCD.c: 33: ToggleEpinOfLCD();
   676  066A  26D2  120A  118A   	fcall	_ToggleEpinOfLCD
   677                           
   678                           ;LCD.c: 35: PORTB &= 0x0F;
   679  066D  300F               	movlw	15
   680  066E  2708               	call	PL4	;select bank 0
   681  066F  0586               	andwf	6,f	;volatile
   682                           
   683                           ;LCD.c: 36: PORTB |= ((LCDChar<<4)&0xF0);
   684  0670  0E72               	swapf	WriteDataToLCD@LCDChar,w
   685  0671  39F0               	andlw	240
   686  0672  0486               	iorwf	6,f	;volatile
   687                           
   688                           ;LCD.c: 37: ToggleEpinOfLCD();
   689  0673  2ED2               	ljmp	l3333
   690  0674                     __end_of_WriteDataToLCD:	
   691  0674                     __ptext196:	
   692 ;; =============== function _ClearLCDScreen ends ============
   693                           
   694                           
   695 ;; *************** function _InitLCD *****************
   696 ;; Defined at:
   697 ;;		line 42 in file "C:\Users\Saeed\Desktop\PIC16F877 ADC Code\Code\LCD.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;		None
   700 ;; Auto vars:     Size  Location     Type
   701 ;;		None
   702 ;; Return value:  Size  Location     Type
   703 ;;		None               void
   704 ;; Registers used:
   705 ;;		wreg, status,2, status,0, pclath, cstack
   706 ;; Tracked objects:
   707 ;;		On entry : 17F/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   711 ;;      Params:         0       0       0       0       0
   712 ;;      Locals:         0       0       0       0       0
   713 ;;      Temps:          3       0       0       0       0
   714 ;;      Totals:         3       0       0       0       0
   715 ;;Total ram usage:        3 bytes
   716 ;; Hardware stack levels used:    1
   717 ;; Hardware stack levels required when called:    2
   718 ;; This function calls:
   719 ;;		_ToggleEpinOfLCD
   720 ;;		_WriteCommandToLCD
   721 ;; This function is called by:
   722 ;;		_main
   723 ;; This function uses a non-reentrant model
   724 ;;
   725  0674                     _InitLCD:	
   726                           
   727                           ;LCD.c: 44: RB0 = 0;
   728                           
   729                           ; Regs used in _InitLCD: [wreg+status,2+status,0+pclath+cstack]
   730                           
   731                           ;LCD.c: 45: RB1 = 0;
   732                           
   733                           ;LCD.c: 46: RB4 = 0;
   734                           
   735                           ;LCD.c: 47: RB5 = 0;
   736                           
   737                           ;LCD.c: 48: RB6 = 0;
   738                           
   739                           ;LCD.c: 49: RB7 = 0;
   740  0674  2701  120A  118A   	fcall	PL3	;call to abstracted procedure
   741                           
   742                           ;LCD.c: 50: TRISB0 = 0;
   743  0677  1683               	bsf	3,5	;RP0=1, select bank1
   744  0678  3002               	movlw	2
   745                           
   746                           ;LCD.c: 51: TRISB1 = 0;
   747                           
   748                           ;LCD.c: 52: TRISB4 = 0;
   749                           
   750                           ;LCD.c: 53: TRISB5 = 0;
   751                           
   752                           ;LCD.c: 54: TRISB6 = 0;
   753                           
   754                           ;LCD.c: 55: TRISB7 = 0;
   755  0679  2701  120A  118A   	fcall	PL3	;call to abstracted procedure
   756                           
   757                           ;LCD.c: 58: _delay((unsigned long)((40)*(20000000/4000.0)));
   758  067C  00F5               	movwf	??_InitLCD+2
   759  067D  3004               	movlw	4
   760  067E  00F4               	movwf	??_InitLCD+1
   761  067F  30BA               	movlw	186
   762  0680  00F3               	movwf	??_InitLCD
   763  0681                     u177:	
   764  0681  0BF3               	decfsz	??_InitLCD,f
   765  0682  2E81               	goto	u177
   766  0683  0BF4               	decfsz	??_InitLCD+1,f
   767  0684  2E81               	goto	u177
   768  0685  0BF5               	decfsz	??_InitLCD+2,f
   769  0686  2E81               	goto	u177
   770  0687  0064               	clrwdt
   771                           
   772                           ;LCD.c: 60: PORTB &= 0x0F;
   773                           
   774                           ;LCD.c: 61: PORTB |= 0x30;
   775  0688  26FA  120A  118A   	fcall	PL2	;call to abstracted procedure
   776                           
   777                           ;LCD.c: 62: ToggleEpinOfLCD();
   778  068B  26D2  120A  118A   	fcall	_ToggleEpinOfLCD
   779                           
   780                           ;LCD.c: 64: _delay((unsigned long)((6)*(20000000/4000.0)));
   781  068E  3027               	movlw	39
   782  068F  00F4               	movwf	??_InitLCD+1
   783  0690  30F5               	movlw	245
   784  0691  00F3               	movwf	??_InitLCD
   785  0692                     u187:	
   786  0692  0BF3               	decfsz	??_InitLCD,f
   787  0693  2E92               	goto	u187
   788  0694  0BF4               	decfsz	??_InitLCD+1,f
   789  0695  2E92               	goto	u187
   790                           
   791                           ;LCD.c: 66: PORTB &= 0x0F;
   792  0696  300F               	movlw	15
   793  0697  2708               	call	PL4	;select bank 0
   794  0698  0586               	andwf	6,f	;volatile
   795                           
   796                           ;LCD.c: 67: PORTB |= 0x30;
   797  0699  3030               	movlw	48
   798  069A  0486               	iorwf	6,f	;volatile
   799                           
   800                           ;LCD.c: 68: ToggleEpinOfLCD();
   801  069B  26D2  120A  118A   	fcall	_ToggleEpinOfLCD
   802                           
   803                           ;LCD.c: 70: _delay((unsigned long)((300)*(20000000/4000000.0)));
   804  069E  30D6               	movlw	214
   805  069F  00F3               	movwf	??_InitLCD
   806  06A0                     u197:	
   807  06A0  2EA1               	nop2
   808  06A1  2EA2               	nop2
   809  06A2  0BF3               	decfsz	??_InitLCD,f
   810  06A3  2EA0               	goto	u197
   811  06A4  0064               	clrwdt
   812                           
   813                           ;LCD.c: 72: PORTB &= 0x0F;
   814                           
   815                           ;LCD.c: 73: PORTB |= 0x30;
   816  06A5  26FA  120A  118A   	fcall	PL2	;call to abstracted procedure
   817                           
   818                           ;LCD.c: 74: ToggleEpinOfLCD();
   819  06A8  26D2  120A  118A   	fcall	_ToggleEpinOfLCD
   820                           
   821                           ;LCD.c: 76: _delay((unsigned long)((2)*(20000000/4000.0)));
   822  06AB  300D               	movlw	13
   823  06AC  00F4               	movwf	??_InitLCD+1
   824  06AD  30FB               	movlw	251
   825  06AE  00F3               	movwf	??_InitLCD
   826  06AF                     u207:	
   827  06AF  0BF3               	decfsz	??_InitLCD,f
   828  06B0  2EAF               	goto	u207
   829  06B1  0BF4               	decfsz	??_InitLCD+1,f
   830  06B2  2EAF               	goto	u207
   831  06B3  2EB4               	nop2
   832                           
   833                           ;LCD.c: 78: PORTB &= 0x0F;
   834  06B4  300F               	movlw	15
   835  06B5  2708               	call	PL4	;select bank 0
   836  06B6  0586               	andwf	6,f	;volatile
   837                           
   838                           ;LCD.c: 79: PORTB |= 0x20;
   839  06B7  1686               	bsf	6,5	;volatile
   840                           
   841                           ;LCD.c: 80: ToggleEpinOfLCD();
   842  06B8  26D2  120A  118A   	fcall	_ToggleEpinOfLCD
   843                           
   844                           ;LCD.c: 82: _delay((unsigned long)((2)*(20000000/4000.0)));
   845  06BB  300D               	movlw	13
   846  06BC  00F4               	movwf	??_InitLCD+1
   847  06BD  30FB               	movlw	251
   848  06BE  00F3               	movwf	??_InitLCD
   849  06BF                     u217:	
   850  06BF  0BF3               	decfsz	??_InitLCD,f
   851  06C0  2EBF               	goto	u217
   852  06C1  0BF4               	decfsz	??_InitLCD+1,f
   853  06C2  2EBF               	goto	u217
   854  06C3  2EC4               	nop2
   855                           
   856                           ;LCD.c: 84: WriteCommandToLCD(0x28);
   857  06C4  3028               	movlw	40
   858  06C5  26E8  120A  118A   	fcall	_WriteCommandToLCD
   859                           
   860                           ;LCD.c: 85: WriteCommandToLCD(0x0c);
   861  06C8  300C               	movlw	12
   862  06C9  26E8  120A  118A   	fcall	_WriteCommandToLCD
   863                           
   864                           ;LCD.c: 86: WriteCommandToLCD(0x01);
   865  06CC  3001               	movlw	1
   866  06CD  26E8  120A  118A   	fcall	_WriteCommandToLCD
   867                           
   868                           ;LCD.c: 87: WriteCommandToLCD(0x06);
   869  06D0  3006               	movlw	6
   870  06D1  2EE8               	ljmp	_WriteCommandToLCD
   871  06D2                     __end_of_InitLCD:	
   872  06D2                     __ptext199:	
   873 ;; =============== function _WriteCommandToLCD ends ============
   874                           
   875                           
   876 ;; *************** function _ToggleEpinOfLCD *****************
   877 ;; Defined at:
   878 ;;		line 5 in file "C:\Users\Saeed\Desktop\PIC16F877 ADC Code\Code\LCD.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;		None
   881 ;; Auto vars:     Size  Location     Type
   882 ;;		None
   883 ;; Return value:  Size  Location     Type
   884 ;;		None               void
   885 ;; Registers used:
   886 ;;		wreg
   887 ;; Tracked objects:
   888 ;;		On entry : 60/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   892 ;;      Params:         0       0       0       0       0
   893 ;;      Locals:         0       0       0       0       0
   894 ;;      Temps:          2       0       0       0       0
   895 ;;      Totals:         2       0       0       0       0
   896 ;;Total ram usage:        2 bytes
   897 ;; Hardware stack levels used:    1
   898 ;; This function calls:
   899 ;;		Nothing
   900 ;; This function is called by:
   901 ;;		_WriteCommandToLCD
   902 ;;		_WriteDataToLCD
   903 ;;		_InitLCD
   904 ;; This function uses a non-reentrant model
   905 ;;
   906  06D2                     _ToggleEpinOfLCD:	
   907  06D2                     l3333:	
   908                           ; Regs used in _ToggleEpinOfLCD: [wreg]
   909                           
   910  06D2  3004               	movlw	4
   911                           
   912                           ;LCD.c: 6: RB0 = 1;
   913  06D3  1406               	bsf	6,0
   914                           
   915                           ;LCD.c: 7: _delay((unsigned long)((500)*(20000000/4000000.0)));
   916  06D4  00F1               	movwf	??_ToggleEpinOfLCD+1
   917  06D5  303D               	movlw	61
   918  06D6  00F0               	movwf	??_ToggleEpinOfLCD
   919  06D7                     u227:	
   920  06D7  0BF0               	decfsz	??_ToggleEpinOfLCD,f
   921  06D8  2ED7               	goto	u227
   922  06D9  0BF1               	decfsz	??_ToggleEpinOfLCD+1,f
   923  06DA  2ED7               	goto	u227
   924  06DB  2EDC               	nop2
   925  06DC  2708               	call	PL4	;select bank 0
   926                           
   927                           ;LCD.c: 8: RB0 = 0;
   928  06DD  3004               	movlw	4
   929  06DE  1006               	bcf	6,0
   930                           
   931                           ;LCD.c: 9: _delay((unsigned long)((500)*(20000000/4000000.0)));
   932  06DF  00F1               	movwf	??_ToggleEpinOfLCD+1
   933  06E0  303D               	movlw	61
   934  06E1  00F0               	movwf	??_ToggleEpinOfLCD
   935  06E2                     u237:	
   936  06E2  0BF0               	decfsz	??_ToggleEpinOfLCD,f
   937  06E3  2EE2               	goto	u237
   938  06E4  0BF1               	decfsz	??_ToggleEpinOfLCD+1,f
   939  06E5  2EE2               	goto	u237
   940  06E6  2EE7               	nop2
   941  06E7  0008               	return
   942  06E8                     __end_of_ToggleEpinOfLCD:	
   943  06E8                     __ptext198:	
   944 ;; =============== function _WriteDataToLCD ends ============
   945                           
   946                           
   947 ;; *************** function _WriteCommandToLCD *****************
   948 ;; Defined at:
   949 ;;		line 14 in file "C:\Users\Saeed\Desktop\PIC16F877 ADC Code\Code\LCD.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  Command         1    wreg     unsigned char 
   952 ;; Auto vars:     Size  Location     Type
   953 ;;  Command         1    2[COMMON] unsigned char 
   954 ;; Return value:  Size  Location     Type
   955 ;;		None               void
   956 ;; Registers used:
   957 ;;		wreg, status,2, status,0, pclath, cstack
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   963 ;;      Params:         0       0       0       0       0
   964 ;;      Locals:         1       0       0       0       0
   965 ;;      Temps:          0       0       0       0       0
   966 ;;      Totals:         1       0       0       0       0
   967 ;;Total ram usage:        1 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; Hardware stack levels required when called:    1
   970 ;; This function calls:
   971 ;;		_ToggleEpinOfLCD
   972 ;; This function is called by:
   973 ;;		_InitLCD
   974 ;;		_ClearLCDScreen
   975 ;; This function uses a non-reentrant model
   976 ;;
   977  06E8                     _WriteCommandToLCD:	
   978                           
   979                           ; Regs used in _WriteCommandToLCD: [wreg+status,2+status,0+pclath+cstack]
   980                           ;WriteCommandToLCD@Command stored from wreg
   981  06E8  00F2               	movwf	WriteCommandToLCD@Command
   982  06E9  2708               	call	PL4	;select bank 0
   983                           
   984                           ;LCD.c: 15: RB1 = 0;
   985  06EA  300F               	movlw	15
   986  06EB  1086               	bcf	6,1
   987                           
   988                           ;LCD.c: 17: PORTB &= 0x0F;
   989  06EC  0586               	andwf	6,f	;volatile
   990                           
   991                           ;LCD.c: 18: PORTB |= (Command&0xF0);
   992  06ED  0872               	movf	WriteCommandToLCD@Command,w
   993  06EE  39F0               	andlw	240
   994  06EF  0486               	iorwf	6,f	;volatile
   995                           
   996                           ;LCD.c: 19: ToggleEpinOfLCD();
   997  06F0  26D2  120A  118A   	fcall	_ToggleEpinOfLCD
   998                           
   999                           ;LCD.c: 21: PORTB &= 0x0F;
  1000  06F3  300F               	movlw	15
  1001  06F4  2708               	call	PL4	;select bank 0
  1002  06F5  0586               	andwf	6,f	;volatile
  1003                           
  1004                           ;LCD.c: 22: PORTB |= ((Command<<4)&0xF0);
  1005  06F6  0E72               	swapf	WriteCommandToLCD@Command,w
  1006  06F7  39F0               	andlw	240
  1007  06F8  0486               	iorwf	6,f	;volatile
  1008                           
  1009                           ;LCD.c: 23: ToggleEpinOfLCD();
  1010  06F9  2ED2               	ljmp	l3333
  1011  06FA                     __end_of_WriteCommandToLCD:	
  1012  06FA                     PL2:	
  1013  06FA  300F               	movlw	15
  1014  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  1015  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  1016  06FD  0586               	andwf	6,f	;volatile
  1017  06FE  3030               	movlw	48
  1018  06FF  0486               	iorwf	6,f	;volatile
  1019  0700  0008               	return
  1020  0701                     PL3:	
  1021  0701  1006               	bcf	6,0
  1022  0702  1086               	bcf	6,1
  1023  0703  1206               	bcf	6,4
  1024  0704  1286               	bcf	6,5
  1025  0705  1306               	bcf	6,6
  1026  0706  1386               	bcf	6,7
  1027  0707  0008               	return
  1028  0708                     PL4:	
  1029  0708  1283               	bcf	3,5	;RP0=0, select bank0
  1030  0709  1303               	bcf	3,6	;RP1=0, select bank0
  1031  070A  0008               	return
  1032                           
  1033                           	psect	text200
  1034  0606                     __ptext200:	
  1035 ;; =============== function _ToggleEpinOfLCD ends ============
  1036                           
  1037                           
  1038 ;; *************** function _GetADCValue *****************
  1039 ;; Defined at:
  1040 ;;		line 31 in file "C:\Users\Saeed\Desktop\PIC16F877 ADC Code\Code\ADC.c"
  1041 ;; Parameters:    Size  Location     Type
  1042 ;;  Channel         1    wreg     unsigned char 
  1043 ;; Auto vars:     Size  Location     Type
  1044 ;;  Channel         1    4[COMMON] unsigned char 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  2    0[COMMON] unsigned int 
  1047 ;; Registers used:
  1048 ;;		wreg, status,2, status,0
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 60/20
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1054 ;;      Params:         2       0       0       0       0
  1055 ;;      Locals:         1       0       0       0       0
  1056 ;;      Temps:          2       0       0       0       0
  1057 ;;      Totals:         5       0       0       0       0
  1058 ;;Total ram usage:        5 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; This function calls:
  1061 ;;		Nothing
  1062 ;; This function is called by:
  1063 ;;		_main
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066  0606                     _GetADCValue:	
  1067                           
  1068                           ; Regs used in _GetADCValue: [wreg+status,2+status,0]
  1069                           ;GetADCValue@Channel stored from wreg
  1070  0606  00F4               	movwf	GetADCValue@Channel
  1071                           
  1072                           ;ADC.c: 32: ADCON0 &= 0xc7;
  1073  0607  30C7               	movlw	199
  1074  0608  1283               	bcf	3,5	;RP0=0, select bank0
  1075  0609  1303               	bcf	3,6	;RP1=0, select bank0
  1076  060A  059F               	andwf	31,f	;volatile
  1077                           
  1078                           ;ADC.c: 33: ADCON0 |= (Channel<<3);
  1079  060B  0874               	movf	GetADCValue@Channel,w
  1080  060C  00F2               	movwf	??_GetADCValue
  1081  060D  1003               	clrc
  1082  060E  0DF2               	rlf	??_GetADCValue,f
  1083  060F  1003               	clrc
  1084  0610  0DF2               	rlf	??_GetADCValue,f
  1085  0611  1003               	clrc
  1086  0612  0D72               	rlf	??_GetADCValue,w
  1087  0613  049F               	iorwf	31,f	;volatile
  1088                           
  1089                           ;ADC.c: 35: _delay((unsigned long)((10)*(20000000/4000.0)));
  1090  0614  3041               	movlw	65
  1091  0615  00F3               	movwf	??_GetADCValue+1
  1092  0616  30EE               	movlw	238
  1093  0617  00F2               	movwf	??_GetADCValue
  1094  0618                     u247:	
  1095  0618  0BF2               	decfsz	??_GetADCValue,f
  1096  0619  2E18               	goto	u247
  1097  061A  0BF3               	decfsz	??_GetADCValue+1,f
  1098  061B  2E18               	goto	u247
  1099  061C  0064               	clrwdt
  1100                           
  1101                           ;ADC.c: 37: GO_nDONE = 1;
  1102  061D  1283               	bcf	3,5	;RP0=0, select bank0
  1103  061E  1303               	bcf	3,6	;RP1=0, select bank0
  1104  061F  151F               	bsf	31,2
  1105  0620                     l646:	
  1106                           ;ADC.c: 39: while(GO_nDONE);
  1107                           
  1108  0620  191F               	btfsc	31,2
  1109  0621  2E20               	goto	l646
  1110                           
  1111                           ;ADC.c: 41: return ((ADRESH<<8)+ADRESL);
  1112  0622  081E               	movf	30,w	;volatile
  1113  0623  00F1               	movwf	?_GetADCValue+1
  1114  0624  01F0               	clrf	?_GetADCValue
  1115  0625  1683               	bsf	3,5	;RP0=1, select bank1
  1116  0626  081E               	movf	30,w	;volatile
  1117  0627  07F0               	addwf	?_GetADCValue,f
  1118  0628  1803               	skipnc
  1119  0629  0AF1               	incf	?_GetADCValue+1,f
  1120  062A  0008               	return
  1121  062B                     __end_of_GetADCValue:	
  1122                           
  1123                           	psect	text201
  1124  062B                     __ptext201:	
  1125 ;; =============== function _GetADCValue ends ============
  1126                           
  1127                           
  1128 ;; *************** function ___lwdiv *****************
  1129 ;; Defined at:
  1130 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwdiv.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;  divisor         2    6[COMMON] unsigned int 
  1133 ;;  dividend        2    8[COMMON] unsigned int 
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;  quotient        2   10[COMMON] unsigned int 
  1136 ;;  counter         1   12[COMMON] unsigned char 
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  2    6[COMMON] unsigned int 
  1139 ;; Registers used:
  1140 ;;		wreg, status,2, status,0
  1141 ;; Tracked objects:
  1142 ;;		On entry : 60/0
  1143 ;;		On exit  : 60/0
  1144 ;;		Unchanged: FFF9F/0
  1145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1146 ;;      Params:         4       0       0       0       0
  1147 ;;      Locals:         3       0       0       0       0
  1148 ;;      Temps:          0       0       0       0       0
  1149 ;;      Totals:         7       0       0       0       0
  1150 ;;Total ram usage:        7 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_main
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158  062B                     ___lwdiv:	
  1159                           
  1160                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1161  062B  01FA               	clrf	___lwdiv@quotient
  1162  062C  01FB               	clrf	___lwdiv@quotient+1
  1163  062D  0877               	movf	___lwdiv@divisor+1,w
  1164  062E  0476               	iorwf	___lwdiv@divisor,w
  1165  062F  1903               	skipnz
  1166  0630  2E50               	goto	l3319
  1167  0631  01FC               	clrf	___lwdiv@counter
  1168  0632                     L1:	
  1169  0632  0AFC               	incf	___lwdiv@counter,f
  1170  0633  1BF7               	btfsc	___lwdiv@divisor+1,7
  1171  0634  2E39               	goto	l3307
  1172  0635  1003               	clrc
  1173  0636  0DF6               	rlf	___lwdiv@divisor,f
  1174  0637  0DF7               	rlf	___lwdiv@divisor+1,f
  1175  0638  2E32               	goto	L1
  1176  0639                     l3307:	
  1177  0639  1003               	clrc
  1178  063A  0DFA               	rlf	___lwdiv@quotient,f
  1179  063B  0DFB               	rlf	___lwdiv@quotient+1,f
  1180  063C  0877               	movf	___lwdiv@divisor+1,w
  1181  063D  0279               	subwf	___lwdiv@dividend+1,w
  1182  063E  1D03               	skipz
  1183  063F  2E42               	goto	u125
  1184  0640  0876               	movf	___lwdiv@divisor,w
  1185  0641  0278               	subwf	___lwdiv@dividend,w
  1186  0642                     u125:	
  1187  0642  1C03               	skipc
  1188  0643  2E4C               	goto	L2
  1189  0644  0876               	movf	___lwdiv@divisor,w
  1190  0645  02F8               	subwf	___lwdiv@dividend,f
  1191  0646  0877               	movf	___lwdiv@divisor+1,w
  1192  0647  1C03               	skipc
  1193  0648  03F9               	decf	___lwdiv@dividend+1,f
  1194  0649  02F9               	subwf	___lwdiv@dividend+1,f
  1195  064A  147A               	bsf	___lwdiv@quotient,0
  1196  064B  1003               	clrc
  1197  064C                     L2:	
  1198  064C  0CF7               	rrf	___lwdiv@divisor+1,f
  1199  064D  0CF6               	rrf	___lwdiv@divisor,f
  1200  064E  0BFC               	decfsz	___lwdiv@counter,f
  1201  064F  2E39               	goto	l3307
  1202  0650                     l3319:	
  1203  0650  087B               	movf	___lwdiv@quotient+1,w
  1204  0651  00F7               	movwf	?___lwdiv+1
  1205  0652  087A               	movf	___lwdiv@quotient,w
  1206  0653  00F6               	movwf	?___lwdiv
  1207  0654  0008               	return
  1208  0655                     __end_of___lwdiv:	
  1209                           
  1210                           	psect	text202
  1211  05ED                     __ptext202:	
  1212 ;; =============== function ___lwdiv ends ============
  1213                           
  1214                           
  1215 ;; *************** function ___wmul *****************
  1216 ;; Defined at:
  1217 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\wmul.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;  multiplier      2    0[COMMON] unsigned int 
  1220 ;;  multiplicand    2    2[COMMON] unsigned int 
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;  product         2    4[COMMON] unsigned int 
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  2    0[COMMON] unsigned int 
  1225 ;; Registers used:
  1226 ;;		wreg, status,2, status,0
  1227 ;; Tracked objects:
  1228 ;;		On entry : 60/0
  1229 ;;		On exit  : 60/0
  1230 ;;		Unchanged: FFF9F/0
  1231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1232 ;;      Params:         4       0       0       0       0
  1233 ;;      Locals:         2       0       0       0       0
  1234 ;;      Temps:          0       0       0       0       0
  1235 ;;      Totals:         6       0       0       0       0
  1236 ;;Total ram usage:        6 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; This function calls:
  1239 ;;		Nothing
  1240 ;; This function is called by:
  1241 ;;		_main
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244  05ED                     ___wmul:	
  1245                           
  1246                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1247  05ED  01F4               	clrf	___wmul@product
  1248  05EE  01F5               	clrf	___wmul@product+1
  1249  05EF                     l3283:	
  1250  05EF  1C70               	btfss	___wmul@multiplier,0
  1251  05F0  2DF7               	goto	l3287
  1252  05F1  0872               	movf	___wmul@multiplicand,w
  1253  05F2  07F4               	addwf	___wmul@product,f
  1254  05F3  1803               	skipnc
  1255  05F4  0AF5               	incf	___wmul@product+1,f
  1256  05F5  0873               	movf	___wmul@multiplicand+1,w
  1257  05F6  07F5               	addwf	___wmul@product+1,f
  1258  05F7                     l3287:	
  1259  05F7  1003               	clrc
  1260  05F8  0DF2               	rlf	___wmul@multiplicand,f
  1261  05F9  0DF3               	rlf	___wmul@multiplicand+1,f
  1262  05FA  1003               	clrc
  1263  05FB  0CF1               	rrf	___wmul@multiplier+1,f
  1264  05FC  0CF0               	rrf	___wmul@multiplier,f
  1265  05FD  0871               	movf	___wmul@multiplier+1,w
  1266  05FE  0470               	iorwf	___wmul@multiplier,w
  1267  05FF  1D03               	skipz
  1268  0600  2DEF               	goto	l3283
  1269  0601  0875               	movf	___wmul@product+1,w
  1270  0602  00F1               	movwf	?___wmul+1
  1271  0603  0874               	movf	___wmul@product,w
  1272  0604  00F0               	movwf	?___wmul
  1273  0605  0008               	return
  1274  0606                     __end_of___wmul:	
  1275                           
  1276                           	psect	text203
  1277  05E2                     __ptext203:	
  1278 ;; =============== function ___wmul ends ============
  1279                           
  1280                           
  1281 ;; *************** function _InitADC *****************
  1282 ;; Defined at:
  1283 ;;		line 11 in file "C:\Users\Saeed\Desktop\PIC16F877 ADC Code\Code\ADC.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;		None
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;		None
  1288 ;; Return value:  Size  Location     Type
  1289 ;;		None               void
  1290 ;; Registers used:
  1291 ;;		wreg
  1292 ;; Tracked objects:
  1293 ;;		On entry : 17F/0
  1294 ;;		On exit  : 17F/0
  1295 ;;		Unchanged: FFE80/0
  1296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1297 ;;      Params:         0       0       0       0       0
  1298 ;;      Locals:         0       0       0       0       0
  1299 ;;      Temps:          0       0       0       0       0
  1300 ;;      Totals:         0       0       0       0       0
  1301 ;;Total ram usage:        0 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; This function calls:
  1304 ;;		Nothing
  1305 ;; This function is called by:
  1306 ;;		_main
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309  05E2                     _InitADC:	
  1310                           
  1311                           ;ADC.c: 12: ADCON1 = 0x80;
  1312                           
  1313                           ; Regs used in _InitADC: [wreg]
  1314  05E2  3080               	movlw	128
  1315  05E3  1683               	bsf	3,5	;RP0=1, select bank1
  1316  05E4  009F               	movwf	31	;volatile
  1317                           
  1318                           ;ADC.c: 14: TRISA = 0x2f;
  1319  05E5  302F               	movlw	47
  1320  05E6  0085               	movwf	5	;volatile
  1321                           
  1322                           ;ADC.c: 15: TRISE = 0x07;
  1323  05E7  3007               	movlw	7
  1324  05E8  0089               	movwf	9	;volatile
  1325                           
  1326                           ;ADC.c: 16: ADCON0 = 0x81;
  1327  05E9  3081               	movlw	129
  1328  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  1329  05EB  009F               	movwf	31	;volatile
  1330  05EC  0008               	return
  1331  05ED                     __end_of_InitADC:	
  1332                           
  1333                           	psect	text204
  1334  0000                     __ptext204:	
  1335 ;; =============== function _InitADC ends ============
  1336                           
  1337  007E                     btemp	set	126	;btemp
  1338  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Tue Dec 18 00:05:58 2012

       ___wmul@multiplicand 0072                         l643 0000                         l646 0620  
                       l649 0000                         _RB0 0030                         _RB1 0031  
                       _RB4 0034                         _RB5 0035                         _RB6 0036  
                       _RB7 0037                         u125 0642                         u207 06AF  
                       u217 06BF                         u227 06D7                         u237 06E2  
                       u157 07F8                         u247 0618                         u167 065D  
                       u177 0681                         u187 0692                         u197 06A0  
                      l1301 0000                        l1310 0000                        l1292 0000  
                      l1295 0000                        l3313 0000                        l3401 0000  
                      l1298 0000                        l3307 0639                        l3323 0000  
                      l3403 0000                        l3411 0000                        l2612 0000  
                      l3317 0000                        l3309 0000                        l3325 0000  
                      l3333 06D2                        l3341 0000                        l3405 0000  
                      l3421 0000                        l3413 0715                        l2622 0000  
                      l3319 0650                        l3327 0000                        l3335 0000  
                      l3343 0000                        l3351 0000                        l3431 0000  
                      l3423 0000                        l3415 0000                        l3407 0000  
                      l3281 0000                        l3337 0000                        l3345 0000  
                      l3361 0000                        l3353 0000                        l3433 0000  
                      l3425 0000                        l3417 0000                        l3409 0000  
                      l3291 0000                        l3283 05EF                        l3347 0000  
                      l3339 0000                        l3355 0000                        l3371 0000  
                      l3363 0000                        l3435 0000                        l3427 0000  
                      l3419 0000                        l3349 0000                        l3357 0000  
                      l3381 0000                        l3373 0000                        l3365 0000  
                      l3437 0000                        l3429 0000                        l3279 0000  
                      l3287 05F7                        l3359 0000                        l3391 0000  
                      l3383 0000                        l3375 0000                        l3367 0000  
                      l3439 0000                        l3289 0000                        l3297 0000  
                      l3393 0000                        l3385 0000                        l3377 0000  
                      l3369 0000                        l3299 0000                        l3395 0000  
                      l3387 0000                        l3379 0000                        l3397 0000  
                      l3389 0000                        l3399 0000                        _main 070B  
                      btemp 007E                 _GetADCValue 0606                        start 0000  
           __end_of_InitADC 05ED             __end_of_InitLCD 06D2                       ?_main 0070  
           __end_of___lwdiv 0655                       _PORTB 0006                       _TRISA 0085  
                     _TRISE 0089                       status 0003     __size_of_WriteDataToLCD 0011  
                     wtemp0 007E             _ToggleEpinOfLCD 06D2                __end_of_main 0800  
                    ??_main 0020            ??_ClearLCDScreen 0073                      _ADCON0 001F  
                    _ADCON1 009F                      _ADRESH 001E                      _ADRESL 009E  
                    _TRISB0 0430                      _TRISB1 0431                      _TRISB4 0434  
                    _TRISB5 0435                      _TRISB6 0436                      _TRISB7 0437  
                 ??_InitADC 0070                   ??_InitLCD 0073                      ___wmul 05ED  
                 ??___lwdiv 007A     __end_of_ToggleEpinOfLCD 06E8              __pcstackCOMMON 0070  
  WriteCommandToLCD@Command 0072              _WriteDataToLCD 0663                ?_GetADCValue 0070  
                __pmaintext 070B       WriteDataToLCD@LCDChar 0072                     ?___wmul 0070  
    __end_of_WriteDataToLCD 0674            ?_ToggleEpinOfLCD 0070                     _InitADC 05E2  
                   _InitLCD 0674             __size_of___wmul 0019                     ___lwdiv 062B  
      end_of_initialization 05DE             ?_WriteDataToLCD 0070                  main@digit1 002A  
                main@digit2 0028                  main@digit3 0026                  main@digit4 0024  
      __size_of_GetADCValue 0025              __end_of___wmul 0606          GetADCValue@Channel 0074  
       start_initialization 05DE     __size_of_ClearLCDScreen 000E                    ??___wmul 0074  
             __pcstackBANK0 0020                    ?_InitADC 0070                    ?_InitLCD 0070  
          ___lwdiv@dividend 0078                   __ptext200 0606                   __ptext201 062B  
                 __ptext202 05ED                   __ptext203 05E2                   __ptext204 0000  
                 __ptext194 0000                   __ptext195 0655                   __ptext196 0674  
                 __ptext197 0663                   __ptext198 06E8                   __ptext199 06D2  
                  ?___lwdiv 0076            ??_WriteDataToLCD 0072            ___lwdiv@quotient 007A  
            ___wmul@product 0074    __size_of_ToggleEpinOfLCD 0016                    _GO_nDONE 00FA  
         ___wmul@multiplier 0070              _ClearLCDScreen 0655           _WriteCommandToLCD 06E8  
        ?_WriteCommandToLCD 0070            __size_of_InitADC 000B            __size_of_InitLCD 005E  
       ??_WriteCommandToLCD 0072            __size_of___lwdiv 002A             ___lwdiv@divisor 0076  
    __end_of_ClearLCDScreen 0663             ___lwdiv@counter 007C   __end_of_WriteCommandToLCD 06FA  
             __size_of_main 00F5               ??_GetADCValue 0072           ??_ToggleEpinOfLCD 0070  
             main@ADC_value 002C             ?_ClearLCDScreen 0070         __end_of_GetADCValue 062B  
__size_of_WriteCommandToLCD 0012  
