

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Fri May 09 09:15:54 2014

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,delta=2
    15                           	psect	text857,local,class=CODE,delta=2
    16                           	psect	text860,local,class=CODE,delta=2
    17                           	psect	text862,local,class=CODE,delta=2
    18                           	psect	text867,local,class=CODE,delta=2
    19                           	psect	text875,local,class=CODE,delta=2
    20                           	psect	text894,local,class=CODE,delta=2
    21                           	psect	text895,local,class=CODE,delta=2
    22                           	psect	text896,local,class=CODE,delta=2
    23                           	psect	text897,local,class=CODE,delta=2
    24                           	psect	pa_nodes,global,class=CODE,delta=2
    25                           	dabs	1,0x7E,2
    26  000A                     	;#
    27                           
    28                           	psect	config
    29  2007  FF72               	dw	65394	;#
    30                           
    31                           	psect	idataBANK0
    32  0000                     __pidataBANK0:	
    33  001F                     _ADCON0	set	31
    34  001E                     _ADRESH	set	30
    35  0006                     _PORTB	set	6
    36  0008                     _PORTD	set	8
    37  0013                     _SSPBUF	set	19
    38  0014                     _SSPCON	set	20
    39  00FA                     _GO_nDONE	set	250
    40  0030                     _RB0	set	48
    41  0031                     _RB1	set	49
    42  0032                     _RB2	set	50
    43  0033                     _RB3	set	51
    44  0034                     _RB4	set	52
    45  0035                     _RB5	set	53
    46  0036                     _RB6	set	54
    47  0037                     _RB7	set	55
    48  0040                     _RD0	set	64
    49  0041                     _RD1	set	65
    50  0044                     _RD4	set	68
    51  0045                     _RD5	set	69
    52  0046                     _RD6	set	70
    53  0047                     _RD7	set	71
    54  0063                     _SSPIF	set	99
    55  009F                     _ADCON1	set	159
    56  009E                     _ADRESL	set	158
    57  0081                     _OPTION_REG	set	129
    58  0093                     _SSPADD	set	147
    59  0094                     _SSPSTAT	set	148
    60  0085                     _TRISA	set	133
    61  0086                     _TRISB	set	134
    62  0089                     _TRISE	set	137
    63  048D                     _ACKDT	set	1165
    64  048C                     _ACKEN	set	1164
    65  048E                     _ACKSTAT	set	1166
    66  048A                     _PEN	set	1162
    67  048B                     _RCEN	set	1163
    68  0489                     _RSEN	set	1161
    69  0488                     _SEN	set	1160
    70  043B                     _TRISC3	set	1083
    71  043C                     _TRISC4	set	1084
    72  0440                     _TRISD0	set	1088
    73  0441                     _TRISD1	set	1089
    74  0444                     _TRISD4	set	1092
    75  0445                     _TRISD5	set	1093
    76  0446                     _TRISD6	set	1094
    77  0447                     _TRISD7	set	1095
    78                           
    79                           	psect	strings
    80  0800                     __pstrings:	
    81  0800                     stringtab:	
    82                           ;	global	stringdir,stringtab,__stringbase
    83                           
    84  0800                     stringcode:	
    85                           ;	String table - string pointers are 1 byte each
    86                           
    87  0800                     stringdir:	
    88  0800  3008               	movlw	high stringdir
    89  0801  008A               	movwf	10
    90  0802  0804               	movf	4,w
    91  0803  0A84               	incf	4,f
    92  0804  0782               	addwf	2,f
    93  0805                     __stringbase:	
    94  0805  3400               	retlw	0
    95  0806                     STR_19:	
    96  0806  3461               	retlw	97	;'a'
    97  0807  3472               	retlw	114	;'r'
    98  0808  3464               	retlw	100	;'d'
    99  0809  3465               	retlw	101	;'e'
   100  080A  3420               	retlw	32	;' '
   101  080B  3475               	retlw	117	;'u'
   102  080C  3469               	retlw	105	;'i'
   103  080D  3474               	retlw	116	;'t'
   104  080E  3465               	retlw	101	;'e'
   105  080F  3420               	retlw	32	;' '
   106  0810  3463               	retlw	99	;'c'
   107  0811  3475               	retlw	117	;'u'
   108  0812  346D               	retlw	109	;'m'
   109  0813  3420               	retlw	32	;' '
   110  0814  3461               	retlw	97	;'a'
   111  0815  3472               	retlw	114	;'r'
   112  0816  3464               	retlw	100	;'d'
   113  0817  3465               	retlw	101	;'e'
   114  0818  3400               	retlw	0
   115  0819                     STR_24:	
   116  0819  3457               	retlw	87	;'W'
   117  081A  3472               	retlw	114	;'r'
   118  081B  346F               	retlw	111	;'o'
   119  081C  346E               	retlw	110	;'n'
   120  081D  3467               	retlw	103	;'g'
   121  081E  3420               	retlw	32	;' '
   122  081F  3446               	retlw	70	;'F'
   123  0820  3475               	retlw	117	;'u'
   124  0821  346E               	retlw	110	;'n'
   125  0822  3463               	retlw	99	;'c'
   126  0823  3474               	retlw	116	;'t'
   127  0824  3469               	retlw	105	;'i'
   128  0825  346F               	retlw	111	;'o'
   129  0826  346E               	retlw	110	;'n'
   130  0827  3400               	retlw	0
   131  0828                     STR_13:	
   132  0828  3453               	retlw	83	;'S'
   133  0829  3465               	retlw	101	;'e'
   134  082A  3474               	retlw	116	;'t'
   135  082B  3420               	retlw	32	;' '
   136  082C  3473               	retlw	115	;'s'
   137  082D  3465               	retlw	101	;'e'
   138  082E  3463               	retlw	99	;'c'
   139  082F  346F               	retlw	111	;'o'
   140  0830  346E               	retlw	110	;'n'
   141  0831  3464               	retlw	100	;'d'
   142  0832  3473               	retlw	115	;'s'
   143  0833  3400               	retlw	0
   144  0834                     STR_23:	
   145  0834  3457               	retlw	87	;'W'
   146  0835  3472               	retlw	114	;'r'
   147  0836  346F               	retlw	111	;'o'
   148  0837  346E               	retlw	110	;'n'
   149  0838  3467               	retlw	103	;'g'
   150  0839  3420               	retlw	32	;' '
   151  083A  3449               	retlw	73	;'I'
   152  083B  346E               	retlw	110	;'n'
   153  083C  3470               	retlw	112	;'p'
   154  083D  3475               	retlw	117	;'u'
   155  083E  3474               	retlw	116	;'t'
   156  083F  3400               	retlw	0
   157  0840                     STR_12:	
   158  0840  3453               	retlw	83	;'S'
   159  0841  3465               	retlw	101	;'e'
   160  0842  3474               	retlw	116	;'t'
   161  0843  3420               	retlw	32	;' '
   162  0844  346D               	retlw	109	;'m'
   163  0845  3469               	retlw	105	;'i'
   164  0846  346E               	retlw	110	;'n'
   165  0847  3475               	retlw	117	;'u'
   166  0848  3474               	retlw	116	;'t'
   167  0849  3465               	retlw	101	;'e'
   168  084A  3400               	retlw	0
   169  084B                     STR_20:	
   170  084B  3461               	retlw	97	;'a'
   171  084C  346C               	retlw	108	;'l'
   172  084D  3461               	retlw	97	;'a'
   173  084E  3472               	retlw	114	;'r'
   174  084F  346D               	retlw	109	;'m'
   175  0850  3461               	retlw	97	;'a'
   176  0851  3420               	retlw	32	;' '
   177  0852  3466               	retlw	102	;'f'
   178  0853  3475               	retlw	117	;'u'
   179  0854  346D               	retlw	109	;'m'
   180  0855  3400               	retlw	0
   181  0856                     STR_17:	
   182  0856  3449               	retlw	73	;'I'
   183  0857  346E               	retlw	110	;'n'
   184  0858  3474               	retlw	116	;'t'
   185  0859  3465               	retlw	101	;'e'
   186  085A  3472               	retlw	114	;'r'
   187  085B  3476               	retlw	118	;'v'
   188  085C  3461               	retlw	97	;'a'
   189  085D  346C               	retlw	108	;'l'
   190  085E  3420               	retlw	32	;' '
   191  085F  3400               	retlw	0
   192  0860                     STR_15:	
   193  0860  3453               	retlw	83	;'S'
   194  0861  3465               	retlw	101	;'e'
   195  0862  3474               	retlw	116	;'t'
   196  0863  3420               	retlw	32	;' '
   197  0864  346D               	retlw	109	;'m'
   198  0865  346F               	retlw	111	;'o'
   199  0866  346E               	retlw	110	;'n'
   200  0867  3474               	retlw	116	;'t'
   201  0868  3468               	retlw	104	;'h'
   202  0869  3400               	retlw	0
   203  086A                     STR_16:	
   204  086A  3453               	retlw	83	;'S'
   205  086B  3465               	retlw	101	;'e'
   206  086C  3474               	retlw	116	;'t'
   207  086D  3420               	retlw	32	;' '
   208  086E  3479               	retlw	121	;'y'
   209  086F  3465               	retlw	101	;'e'
   210  0870  3461               	retlw	97	;'a'
   211  0871  3472               	retlw	114	;'r'
   212  0872  3400               	retlw	0
   213  0873                     STR_11:	
   214  0873  3453               	retlw	83	;'S'
   215  0874  3465               	retlw	101	;'e'
   216  0875  3474               	retlw	116	;'t'
   217  0876  3420               	retlw	32	;' '
   218  0877  3468               	retlw	104	;'h'
   219  0878  346F               	retlw	111	;'o'
   220  0879  3475               	retlw	117	;'u'
   221  087A  3472               	retlw	114	;'r'
   222  087B  3400               	retlw	0
   223  087C                     STR_21:	
   224  087C  3473               	retlw	115	;'s'
   225  087D  346F               	retlw	111	;'o'
   226  087E  346E               	retlw	110	;'n'
   227  087F  3465               	retlw	101	;'e'
   228  0880  3472               	retlw	114	;'r'
   229  0881  3469               	retlw	105	;'i'
   230  0882  3465               	retlw	101	;'e'
   231  0883  3400               	retlw	0
   232  0884                     STR_14:	
   233  0884  3453               	retlw	83	;'S'
   234  0885  3465               	retlw	101	;'e'
   235  0886  3474               	retlw	116	;'t'
   236  0887  3420               	retlw	32	;' '
   237  0888  3464               	retlw	100	;'d'
   238  0889  3461               	retlw	97	;'a'
   239  088A  3479               	retlw	121	;'y'
   240  088B  3400               	retlw	0
   241  088C                     STR_22:	
   242  088C  3461               	retlw	97	;'a'
   243  088D  346C               	retlw	108	;'l'
   244  088E  3461               	retlw	97	;'a'
   245  088F  3472               	retlw	114	;'r'
   246  0890  346D               	retlw	109	;'m'
   247  0891  3461               	retlw	97	;'a'
   248  0892  3400               	retlw	0
   249  0893                     STR_10:	
   250  0893  343F               	retlw	63	;'?'
   251  0894  343F               	retlw	63	;'?'
   252  0895  343F               	retlw	63	;'?'
   253  0896  3400               	retlw	0
   254  0897                     STR_5:	
   255  0897  3457               	retlw	87	;'W'
   256  0898  3445               	retlw	69	;'E'
   257  0899  3444               	retlw	68	;'D'
   258  089A  3400               	retlw	0
   259  089B                     STR_4:	
   260  089B  3454               	retlw	84	;'T'
   261  089C  3455               	retlw	85	;'U'
   262  089D  3445               	retlw	69	;'E'
   263  089E  3400               	retlw	0
   264  089F                     STR_7:	
   265  089F  3446               	retlw	70	;'F'
   266  08A0  3452               	retlw	82	;'R'
   267  08A1  3449               	retlw	73	;'I'
   268  08A2  3400               	retlw	0
   269  08A3                     STR_3:	
   270  08A3  344D               	retlw	77	;'M'
   271  08A4  344F               	retlw	79	;'O'
   272  08A5  344E               	retlw	78	;'N'
   273  08A6  3400               	retlw	0
   274  08A7                     STR_9:	
   275  08A7  3453               	retlw	83	;'S'
   276  08A8  3455               	retlw	85	;'U'
   277  08A9  344E               	retlw	78	;'N'
   278  08AA  3400               	retlw	0
   279  08AB                     STR_8:	
   280  08AB  3453               	retlw	83	;'S'
   281  08AC  3441               	retlw	65	;'A'
   282  08AD  3454               	retlw	84	;'T'
   283  08AE  3400               	retlw	0
   284  08AF                     STR_6:	
   285  08AF  3454               	retlw	84	;'T'
   286  08B0  3448               	retlw	72	;'H'
   287  08B1  3455               	retlw	85	;'U'
   288  08B2  3400               	retlw	0
   289  08B3                     STR_1:	
   290  08B3  3441               	retlw	65	;'A'
   291  08B4  344D               	retlw	77	;'M'
   292  08B5  3400               	retlw	0
   293  08B6                     STR_2:	
   294  08B6  3450               	retlw	80	;'P'
   295  08B7  344D               	retlw	77	;'M'
   296  08B8  3400               	retlw	0
   297  0856                     
   298                           	psect	cinit
   299  0010                     start_initialization:	
   300  0010  3055               	movlw	low __pbssBANK0
   301                           
   302                           ; Clear objects allocated to BANK0
   303  0011  1383               	bcf	3,7	;select IRP bank0
   304  0012  0084               	movwf	4
   305  0013  3066               	movlw	low (__pbssBANK0+17)
   306  0014  120A  158A  22AD   	fcall	clear_ram
      +       120A  118A         
   307                           
   308                           ; Clear objects allocated to BANK1
   309  0019  30A0               	movlw	low __pbssBANK1
   310  001A  0084               	movwf	4
   311  001B  30F0               	movlw	low (__pbssBANK1+80)
   312  001C  120A  158A  22AD   	fcall	clear_ram
   313                           
   314                           ;initializer for _apasat
   315  001F  3014               	movlw	20
   316  0020  00E6               	movwf	__pdataBANK0& (0+127)
   317  0021  3005               	movlw	5
   318  0022  01E7               	clrf	(__pdataBANK0+1)& (0+127)
   319                           
   320                           ;initializer for _intervalSonerie
   321  0023  00E8               	movwf	(__pdataBANK0+2)& (0+127)
   322  0024  3000               	movlw	0
   323  0025  01E9               	clrf	(__pdataBANK0+3)& (0+127)
   324  0026                     end_of_initialization:	
   325                           ;End of C runtime variable initialization code
   326                           
   327  0026  0183               	clrf	3
   328  0027  120A  158A  2AEB   	ljmp	_main	;jump to C main() function
   329                           
   330                           	psect	bssBANK0
   331  0055                     __pbssBANK0:	
   332  0055                     _prevH1:	
   333  0055                     	ds	2
   334  0057                     _prevM1:	
   335  0057                     	ds	2
   336  0059                     _prevM2:	
   337  0059                     	ds	2
   338  005B                     _prevS1:	
   339  005B                     	ds	2
   340  005D                     _prevS2:	
   341  005D                     	ds	2
   342  005F                     _Temp:	
   343  005F                     	ds	1
   344  0060                     _oraNext:	
   345  0060                     	ds	1
   346  0061                     _oraPrev:	
   347  0061                     	ds	1
   348  0062                     _RTCArray:	
   349  0062                     	ds	4
   350                           
   351                           	psect	dataBANK0
   352  0066                     __pdataBANK0:	
   353  0066                     _apasat:	
   354  0066                     	ds	2
   355  0068                     _intervalSonerie:	
   356  0068                     	ds	2
   357                           
   358                           	psect	bssBANK1
   359  00A0                     __pbssBANK1:	
   360  00A0                     _oreSonerie:	
   361  00A0                     	ds	80
   362                           
   363                           	psect	clrtext
   364  0AAD                     clear_ram:	
   365                           ;	Called with FSR containing the base address, and
   366                           ;	W with the last address+1
   367                           
   368  0AAD  0064               	clrwdt	;clear the watchdog before getting into this loop
   369  0AAE                     clrloop:	
   370  0AAE  0180               	clrf	0	;clear RAM location pointed to by FSR
   371  0AAF  0A84               	incf	4,f	;increment pointer
   372  0AB0  0604               	xorwf	4,w	;XOR with final address
   373  0AB1  1903               	btfsc	3,2	;have we reached the end yet?
   374  0AB2  3400               	retlw	0	;all done for this memory range, return
   375  0AB3  0604               	xorwf	4,w	;XOR again to restore value
   376  0AB4  2AAE               	goto	clrloop	;do the next byte
   377                           
   378                           	psect	cstackCOMMON
   379  0070                     __pcstackCOMMON:	
   380  0070                     ?_InitADC:	
   381  0070                     ??_InitADC:	
   382                           ; 0 bytes @ 0x0
   383                           
   384  0070                     ?_Init_I2C:	
   385                           ; 0 bytes @ 0x0
   386                           
   387  0070                     ??_Init_I2C:	
   388                           ; 0 bytes @ 0x0
   389                           
   390  0070                     ?_detectieIncendiu:	
   391                           ; 0 bytes @ 0x0
   392                           
   393  0070                     ?_tastaApasata:	
   394                           ; 0 bytes @ 0x0
   395                           
   396  0070                     ?_verificareOreSonerie:	
   397                           ; 0 bytes @ 0x0
   398                           
   399  0070                     ?_afiareDefault:	
   400                           ; 0 bytes @ 0x0
   401                           
   402  0070                     ?_Start_I2C:	
   403                           ; 0 bytes @ 0x0
   404                           
   405  0070                     ??_Start_I2C:	
   406                           ; 0 bytes @ 0x0
   407                           
   408  0070                     ?_Write_I2C:	
   409                           ; 0 bytes @ 0x0
   410                           
   411  0070                     ??_Write_I2C:	
   412                           ; 1 bit 
   413                           
   414  0070                     ?_Stop_I2C:	
   415                           ; 0 bytes @ 0x0
   416                           
   417  0070                     ??_Stop_I2C:	
   418                           ; 0 bytes @ 0x0
   419                           
   420  0070                     ?_Restart_I2C:	
   421                           ; 0 bytes @ 0x0
   422                           
   423  0070                     ??_Restart_I2C:	
   424                           ; 0 bytes @ 0x0
   425                           
   426  0070                     ??_Read_I2C:	
   427                           ; 0 bytes @ 0x0
   428                           
   429  0070                     ?_SendNACK_I2C:	
   430                           ; 0 bytes @ 0x0
   431                           
   432  0070                     ??_SendNACK_I2C:	
   433                           ; 0 bytes @ 0x0
   434                           
   435  0070                     ?_SendACK_I2C:	
   436                           ; 0 bytes @ 0x0
   437                           
   438  0070                     ??_SendACK_I2C:	
   439                           ; 0 bytes @ 0x0
   440                           
   441  0070                     ?_InitKeypad:	
   442                           ; 0 bytes @ 0x0
   443                           
   444  0070                     ??_InitKeypad:	
   445                           ; 0 bytes @ 0x0
   446                           
   447  0070                     ??_readSwitches:	
   448                           ; 0 bytes @ 0x0
   449                           
   450  0070                     ?_pulseEpin:	
   451                           ; 0 bytes @ 0x0
   452                           
   453  0070                     ??_pulseEpin:	
   454                           ; 0 bytes @ 0x0
   455                           
   456  0070                     ?_writeCommand:	
   457                           ; 0 bytes @ 0x0
   458                           
   459  0070                     ?_writeChar:	
   460                           ; 0 bytes @ 0x0
   461                           
   462  0070                     ?_initLCD:	
   463                           ; 0 bytes @ 0x0
   464                           
   465  0070                     ?_writeString:	
   466                           ; 0 bytes @ 0x0
   467                           
   468  0070                     ?_clearScreen:	
   469                           ; 0 bytes @ 0x0
   470                           
   471  0070                     ?_DisplayTimeToLCD:	
   472                           ; 0 bytes @ 0x0
   473                           
   474  0070                     ?_DisplayDateOnLCD:	
   475                           ; 0 bytes @ 0x0
   476                           
   477  0070                     ?_main:	
   478                           ; 0 bytes @ 0x0
   479                           
   480  0070                     ?_test:	
   481                           ; 0 bytes @ 0x0
   482                           
   483  0070                     ?_GetTime_RTC:	
   484                           ; 0 bytes @ 0x0
   485                           
   486  0070                     ?_GetDate_RTC:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?_Read_I2C:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ?_readSwitches:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?_GetChar:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?___bmul:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?___lbdiv:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0070                     ?___lbmod:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     ?_GetADCValue:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ?___wmul:	
   511                           ; 2 bytes @ 0x0
   512                           
   513  0070                     ?___awdiv:	
   514                           ; 2 bytes @ 0x0
   515                           
   516  0070                     Write_I2C@Byte:	
   517                           ; 2 bytes @ 0x0
   518                           
   519  0070                     ___bmul@multiplicand:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0070                     ___lbdiv@divisor:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0070                     ___lbmod@divisor:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  0070                     ___wmul@multiplier:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  0070                     ___awdiv@divisor:	
   532                           ; 2 bytes @ 0x0
   533                           
   534                           
   535                           ; 2 bytes @ 0x0
   536  0070                     	ds	1
   537  0071                     ?_WriteBTo_RTC:	
   538  0071                     ?_ReadBFrom_RTC:	
   539                           ; 0 bytes @ 0x1
   540                           
   541  0071                     ??___bmul:	
   542                           ; 0 bytes @ 0x1
   543                           
   544  0071                     ??___lbdiv:	
   545                           ; 0 bytes @ 0x1
   546                           
   547  0071                     ??___lbmod:	
   548                           ; 0 bytes @ 0x1
   549                           
   550  0071                     WriteBTo_RTC@pData:	
   551                           ; 0 bytes @ 0x1
   552                           
   553  0071                     ReadBFrom_RTC@pData:	
   554                           ; 1 bytes @ 0x1
   555                           
   556  0071                     ___bmul@product:	
   557                           ; 1 bytes @ 0x1
   558                           
   559  0071                     ___lbdiv@dividend:	
   560                           ; 1 bytes @ 0x1
   561                           
   562                           
   563                           ; 1 bytes @ 0x1
   564  0071                     	ds	1
   565  0072                     ??_GetADCValue:	
   566  0072                     ??_writeCommand:	
   567                           ; 0 bytes @ 0x2
   568                           
   569  0072                     ??_writeChar:	
   570                           ; 0 bytes @ 0x2
   571                           
   572  0072                     writeCommand@Command:	
   573                           ; 0 bytes @ 0x2
   574                           
   575  0072                     writeChar@LCDChar:	
   576                           ; 1 bytes @ 0x2
   577                           
   578  0072                     WriteBTo_RTC@NOBytes:	
   579                           ; 1 bytes @ 0x2
   580                           
   581  0072                     ___bmul@multiplier:	
   582                           ; 1 bytes @ 0x2
   583                           
   584  0072                     ___lbdiv@counter:	
   585                           ; 1 bytes @ 0x2
   586                           
   587  0072                     ___lbmod@dividend:	
   588                           ; 1 bytes @ 0x2
   589                           
   590  0072                     ReadBFrom_RTC@NOBytes:	
   591                           ; 1 bytes @ 0x2
   592                           
   593  0072                     ___wmul@multiplicand:	
   594                           ; 2 bytes @ 0x2
   595                           
   596  0072                     ___awdiv@dividend:	
   597                           ; 2 bytes @ 0x2
   598                           
   599                           
   600                           ; 2 bytes @ 0x2
   601  0072                     	ds	1
   602  0073                     ??_GetChar:	
   603  0073                     ??_initLCD:	
   604                           ; 0 bytes @ 0x3
   605                           
   606  0073                     ??_writeString:	
   607                           ; 0 bytes @ 0x3
   608                           
   609  0073                     ??_clearScreen:	
   610                           ; 0 bytes @ 0x3
   611                           
   612  0073                     ??_WriteBTo_RTC:	
   613                           ; 0 bytes @ 0x3
   614                           
   615  0073                     ?_GetChar2:	
   616                           ; 0 bytes @ 0x3
   617                           
   618  0073                     writeString@s:	
   619                           ; 2 bytes @ 0x3
   620                           
   621  0073                     ___lbdiv@quotient:	
   622                           ; 1 bytes @ 0x3
   623                           
   624  0073                     ___lbmod@counter:	
   625                           ; 1 bytes @ 0x3
   626                           
   627  0073                     GetChar@contor:	
   628                           ; 1 bytes @ 0x3
   629                           
   630                           
   631                           ; 2 bytes @ 0x3
   632  0073                     	ds	1
   633  0074                     ??_ReadBFrom_RTC:	
   634  0074                     ??___wmul:	
   635                           ; 0 bytes @ 0x4
   636                           
   637  0074                     ??___awdiv:	
   638                           ; 0 bytes @ 0x4
   639                           
   640  0074                     GetADCValue@Channel:	
   641                           ; 0 bytes @ 0x4
   642                           
   643  0074                     ___lbmod@rem:	
   644                           ; 1 bytes @ 0x4
   645                           
   646  0074                     ___awdiv@counter:	
   647                           ; 1 bytes @ 0x4
   648                           
   649  0074                     ___wmul@product:	
   650                           ; 1 bytes @ 0x4
   651                           
   652                           
   653                           ; 2 bytes @ 0x4
   654  0074                     	ds	1
   655  0075                     ??_GetChar2:	
   656  0075                     ??_DisplayTimeToLCD:	
   657                           ; 0 bytes @ 0x5
   658                           
   659  0075                     ??_DisplayDateOnLCD:	
   660                           ; 0 bytes @ 0x5
   661                           
   662  0075                     ??_test:	
   663                           ; 0 bytes @ 0x5
   664                           
   665  0075                     GetChar@key:	
   666                           ; 0 bytes @ 0x5
   667                           
   668  0075                     GetChar2@key:	
   669                           ; 1 bytes @ 0x5
   670                           
   671  0075                     DisplayTimeToLCD@pTimeArray:	
   672                           ; 1 bytes @ 0x5
   673                           
   674  0075                     DisplayDateOnLCD@pDateArray:	
   675                           ; 1 bytes @ 0x5
   676                           
   677  0075                     WriteBTo_RTC@Address:	
   678                           ; 1 bytes @ 0x5
   679                           
   680  0075                     ReadBFrom_RTC@Address:	
   681                           ; 1 bytes @ 0x5
   682                           
   683  0075                     ___awdiv@sign:	
   684                           ; 1 bytes @ 0x5
   685                           
   686  0075                     test@count:	
   687                           ; 1 bytes @ 0x5
   688                           
   689                           
   690                           ; 2 bytes @ 0x5
   691  0075                     	ds	1
   692  0076                     ?___lwdiv:	
   693  0076                     WriteBTo_RTC@i:	
   694                           ; 2 bytes @ 0x6
   695                           
   696  0076                     ReadBFrom_RTC@i:	
   697                           ; 2 bytes @ 0x6
   698                           
   699  0076                     ___lwdiv@divisor:	
   700                           ; 2 bytes @ 0x6
   701                           
   702  0076                     ___awdiv@quotient:	
   703                           ; 2 bytes @ 0x6
   704                           
   705                           
   706                           ; 2 bytes @ 0x6
   707  0076                     	ds	1
   708  0077                     test@count2:	
   709                           
   710                           ; 2 bytes @ 0x7
   711  0077                     	ds	1
   712  0078                     ??_GetTime_RTC:	
   713  0078                     ?_SetTime_RTC:	
   714                           ; 0 bytes @ 0x8
   715                           
   716  0078                     ?_SetDate_RTC:	
   717                           ; 0 bytes @ 0x8
   718                           
   719  0078                     ?_disp_num:	
   720                           ; 0 bytes @ 0x8
   721                           
   722  0078                     ??_GetDate_RTC:	
   723                           ; 0 bytes @ 0x8
   724                           
   725  0078                     SetTime_RTC@Hours:	
   726                           ; 0 bytes @ 0x8
   727                           
   728  0078                     SetDate_RTC@Month:	
   729                           ; 1 bytes @ 0x8
   730                           
   731  0078                     disp_num@numb:	
   732                           ; 1 bytes @ 0x8
   733                           
   734  0078                     ___lwdiv@dividend:	
   735                           ; 2 bytes @ 0x8
   736                           
   737                           
   738                           ; 2 bytes @ 0x8
   739  0078                     	ds	1
   740  0079                     ??_afiareDefault:	
   741  0079                     test@message:	
   742                           ; 0 bytes @ 0x9
   743                           
   744  0079                     SetTime_RTC@Minutes:	
   745                           ; 1 bytes @ 0x9
   746                           
   747  0079                     SetDate_RTC@Year:	
   748                           ; 1 bytes @ 0x9
   749                           
   750  0079                     afiareDefault@count:	
   751                           ; 1 bytes @ 0x9
   752                           
   753                           
   754                           ; 2 bytes @ 0x9
   755  0079                     	ds	1
   756  007A                     ??_verificareOreSonerie:	
   757  007A                     ??_disp_num:	
   758                           ; 0 bytes @ 0xA
   759                           
   760  007A                     ??___lwdiv:	
   761                           ; 0 bytes @ 0xA
   762                           
   763  007A                     SetTime_RTC@Seconds:	
   764                           ; 0 bytes @ 0xA
   765                           
   766  007A                     SetDate_RTC@Day:	
   767                           ; 1 bytes @ 0xA
   768                           
   769  007A                     ___lwdiv@quotient:	
   770                           ; 1 bytes @ 0xA
   771                           
   772                           
   773                           ; 2 bytes @ 0xA
   774  007A                     	ds	1
   775  007B                     ??_SetTime_RTC:	
   776  007B                     ??_SetDate_RTC:	
   777                           ; 0 bytes @ 0xB
   778                           
   779  007B                     disp_num@UnitDigit:	
   780                           ; 0 bytes @ 0xB
   781                           
   782  007B                     afiareDefault@count2:	
   783                           ; 1 bytes @ 0xB
   784                           
   785                           
   786                           ; 2 bytes @ 0xB
   787  007B                     	ds	1
   788  007C                     disp_num@TenthDigit:	
   789  007C                     ___lwdiv@counter:	
   790                           ; 1 bytes @ 0xC
   791                           
   792                           
   793                           ; 1 bytes @ 0xC
   794  007C                     	ds	1
   795  007D                     SetTime_RTC@Mode:	
   796  007D                     SetDate_RTC@Date:	
   797                           ; 1 bytes @ 0xD
   798                           
   799                           
   800                           ; 1 bytes @ 0xD
   801  007D                     	ds	1
   802  007E                     ??_main:	
   803                           
   804                           	psect	cstackBANK0
   805  0020                     __pcstackBANK0:	
   806                           ; 0 bytes @ 0xE
   807                           
   808  0020                     ??_detectieIncendiu:	
   809  0020                     ??_tastaApasata:	
   810                           ; 0 bytes @ 0x0
   811                           
   812                           
   813                           ; 0 bytes @ 0x0
   814  0020                     	ds	2
   815  0022                     verificareOreSonerie@newH1:	
   816                           
   817                           ; 2 bytes @ 0x2
   818  0022                     	ds	1
   819  0023                     tastaApasata@count:	
   820                           
   821                           ; 2 bytes @ 0x3
   822  0023                     	ds	1
   823  0024                     detectieIncendiu@count:	
   824  0024                     verificareOreSonerie@newM1:	
   825                           ; 2 bytes @ 0x4
   826                           
   827                           
   828                           ; 2 bytes @ 0x4
   829  0024                     	ds	1
   830  0025                     tastaApasata@count2:	
   831                           
   832                           ; 2 bytes @ 0x5
   833  0025                     	ds	1
   834  0026                     detectieIncendiu@count2:	
   835  0026                     verificareOreSonerie@newM2:	
   836                           ; 2 bytes @ 0x6
   837                           
   838                           
   839                           ; 2 bytes @ 0x6
   840  0026                     	ds	1
   841  0027                     tastaApasata@count_2852:	
   842                           
   843                           ; 2 bytes @ 0x7
   844  0027                     	ds	1
   845  0028                     detectieIncendiu@temperatura:	
   846  0028                     verificareOreSonerie@newS1:	
   847                           ; 2 bytes @ 0x8
   848                           
   849                           
   850                           ; 2 bytes @ 0x8
   851  0028                     	ds	1
   852  0029                     tastaApasata@count2_2853:	
   853                           
   854                           ; 2 bytes @ 0x9
   855  0029                     	ds	1
   856  002A                     detectieIncendiu@fum:	
   857  002A                     verificareOreSonerie@newS2:	
   858                           ; 2 bytes @ 0xA
   859                           
   860                           
   861                           ; 2 bytes @ 0xA
   862  002A                     	ds	1
   863  002B                     tastaApasata@year:	
   864                           
   865                           ; 2 bytes @ 0xB
   866  002B                     	ds	1
   867  002C                     detectieIncendiu@digit4:	
   868  002C                     verificareOreSonerie@prevMinute:	
   869                           ; 2 bytes @ 0xC
   870                           
   871                           
   872                           ; 2 bytes @ 0xC
   873  002C                     	ds	1
   874  002D                     tastaApasata@ch1:	
   875                           
   876                           ; 2 bytes @ 0xD
   877  002D                     	ds	1
   878  002E                     detectieIncendiu@ADC_value:	
   879  002E                     verificareOreSonerie@newMinute:	
   880                           ; 2 bytes @ 0xE
   881                           
   882                           
   883                           ; 2 bytes @ 0xE
   884  002E                     	ds	1
   885  002F                     tastaApasata@ch2:	
   886                           
   887                           ; 2 bytes @ 0xF
   888  002F                     	ds	1
   889  0030                     detectieIncendiu@ADC_value_2:	
   890  0030                     verificareOreSonerie@prevSecond:	
   891                           ; 2 bytes @ 0x10
   892                           
   893                           
   894                           ; 2 bytes @ 0x10
   895  0030                     	ds	1
   896  0031                     tastaApasata@m1:	
   897                           
   898                           ; 2 bytes @ 0x11
   899  0031                     	ds	1
   900  0032                     detectieIncendiu@digit3:	
   901  0032                     verificareOreSonerie@newSecond:	
   902                           ; 2 bytes @ 0x12
   903                           
   904                           
   905                           ; 2 bytes @ 0x12
   906  0032                     	ds	1
   907  0033                     tastaApasata@m2:	
   908                           
   909                           ; 2 bytes @ 0x13
   910  0033                     	ds	1
   911  0034                     detectieIncendiu@digit2:	
   912  0034                     verificareOreSonerie@dif:	
   913                           ; 2 bytes @ 0x14
   914                           
   915                           
   916                           ; 2 bytes @ 0x14
   917  0034                     	ds	1
   918  0035                     tastaApasata@s1:	
   919                           
   920                           ; 2 bytes @ 0x15
   921  0035                     	ds	1
   922  0036                     verificareOreSonerie@oraCurenta:	
   923  0036                     detectieIncendiu@digit1:	
   924                           ; 1 bytes @ 0x16
   925                           
   926                           
   927                           ; 2 bytes @ 0x16
   928  0036                     	ds	1
   929  0037                     tastaApasata@s2:	
   930                           
   931                           ; 2 bytes @ 0x17
   932  0037                     	ds	2
   933  0039                     tastaApasata@ch1_2837:	
   934                           
   935                           ; 2 bytes @ 0x19
   936  0039                     	ds	2
   937  003B                     tastaApasata@ch2_2838:	
   938                           
   939                           ; 2 bytes @ 0x1B
   940  003B                     	ds	2
   941  003D                     tastaApasata@m1_2841:	
   942                           
   943                           ; 2 bytes @ 0x1D
   944  003D                     	ds	2
   945  003F                     tastaApasata@m2_2842:	
   946                           
   947                           ; 2 bytes @ 0x1F
   948  003F                     	ds	2
   949  0041                     tastaApasata@s1_2845:	
   950                           
   951                           ; 2 bytes @ 0x21
   952  0041                     	ds	2
   953  0043                     tastaApasata@s2_2846:	
   954                           
   955                           ; 2 bytes @ 0x23
   956  0043                     	ds	2
   957  0045                     tastaApasata@hour:	
   958                           
   959                           ; 2 bytes @ 0x25
   960  0045                     	ds	2
   961  0047                     tastaApasata@minute:	
   962                           
   963                           ; 2 bytes @ 0x27
   964  0047                     	ds	2
   965  0049                     tastaApasata@second:	
   966                           
   967                           ; 2 bytes @ 0x29
   968  0049                     	ds	2
   969  004B                     tastaApasata@day:	
   970                           
   971                           ; 2 bytes @ 0x2B
   972  004B                     	ds	2
   973  004D                     tastaApasata@month:	
   974                           
   975                           ; 2 bytes @ 0x2D
   976  004D                     	ds	2
   977  004F                     tastaApasata@i:	
   978                           
   979                           ; 2 bytes @ 0x2F
   980  004F                     	ds	2
   981  0051                     tastaApasata@k:	
   982                           
   983                           ; 2 bytes @ 0x31
   984  0051                     	ds	2
   985  0053                     tastaApasata@tasta:	
   986                           
   987                           ; 1 bytes @ 0x33
   988  0053                     	ds	1
   989  0054                     main@tasta:	
   990                           
   991                           ; 1 bytes @ 0x34
   992  0054                     	ds	1
   993                           
   994                           	psect	maintext
   995  0AEB                     __pmaintext:	
   996 ;;Data sizes: Strings 179, constant 0, data 4, bss 97, persistent 0 stack 0
   997 ;;Auto spaces:   Size  Autos    Used
   998 ;; COMMON          14     14      14
   999 ;; BANK0           80     53      74
  1000 ;; BANK1           80      0      80
  1001 ;; BANK3           96      0       0
  1002 ;; BANK2           96      0       0
  1003 ;;
  1004 ;; Pointer list with targets:
  1005 ;; ?_GetADCValue	unsigned int  size(1) Largest target is 0
  1006 ;;
  1007 ;; ?_GetDate_RTC	PTR unsigned char  size(1) Largest target is 4
  1008 ;;		 -> RTCArray(BANK0[4]), 
  1009 ;;
  1010 ;; ?_GetTime_RTC	PTR unsigned char  size(1) Largest target is 4
  1011 ;;		 -> RTCArray(BANK0[4]), 
  1012 ;;
  1013 ;; ?___awdiv	int  size(1) Largest target is 0
  1014 ;;
  1015 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
  1016 ;;
  1017 ;; ?___wmul	unsigned int  size(1) Largest target is 0
  1018 ;;
  1019 ;; ReadBFrom_RTC@pData	PTR unsigned char  size(1) Largest target is 4
  1020 ;;		 -> RTCArray(BANK0[4]), 
  1021 ;;
  1022 ;; WriteBTo_RTC@pData	PTR unsigned char  size(1) Largest target is 4
  1023 ;;		 -> RTCArray(BANK0[4]), 
  1024 ;;
  1025 ;; sp__GetDate_RTC	PTR unsigned char  size(1) Largest target is 4
  1026 ;;		 -> RTCArray(BANK0[4]), 
  1027 ;;
  1028 ;; verificareOreSonerie@oraCurenta	PTR unsigned char  size(1) Largest target is 4
  1029 ;;		 -> NULL(NULL[0]), RTCArray(BANK0[4]), 
  1030 ;;
  1031 ;; test@message	PTR const unsigned char  size(1) Largest target is 19
  1032 ;;		 -> STR_21(CODE[8]), STR_20(CODE[11]), STR_19(CODE[19]), 
  1033 ;;
  1034 ;; oraNext	PTR unsigned char  size(1) Largest target is 4
  1035 ;;		 -> NULL(NULL[0]), RTCArray(BANK0[4]), 
  1036 ;;
  1037 ;; sp__GetTime_RTC	PTR unsigned char  size(1) Largest target is 4
  1038 ;;		 -> RTCArray(BANK0[4]), 
  1039 ;;
  1040 ;; oraPrev	PTR unsigned char  size(1) Largest target is 4
  1041 ;;		 -> NULL(NULL[0]), RTCArray(BANK0[4]), 
  1042 ;;
  1043 ;; DisplayDateOnLCD@pDateArray	PTR unsigned char  size(1) Largest target is 4
  1044 ;;		 -> RTCArray(BANK0[4]), 
  1045 ;;
  1046 ;; DisplayTimeToLCD@pTimeArray	PTR unsigned char  size(1) Largest target is 4
  1047 ;;		 -> RTCArray(BANK0[4]), 
  1048 ;;
  1049 ;; writeString@s	PTR const unsigned char  size(1) Largest target is 19
  1050 ;;		 -> STR_25(CODE[12]), STR_24(CODE[15]), STR_23(CODE[12]), STR_22(CODE[7]), 
  1051 ;;		 -> STR_21(CODE[8]), STR_20(CODE[11]), STR_19(CODE[19]), STR_18(CODE[10]), 
  1052 ;;		 -> STR_17(CODE[10]), STR_16(CODE[9]), STR_15(CODE[10]), STR_14(CODE[8]), 
  1053 ;;		 -> STR_13(CODE[12]), STR_12(CODE[11]), STR_11(CODE[9]), STR_10(CODE[4]), 
  1054 ;;		 -> STR_9(CODE[4]), STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), 
  1055 ;;		 -> STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[3]), 
  1056 ;;		 -> STR_1(CODE[3]), 
  1057 ;;
  1058 ;;
  1059 ;; Critical Paths under _main in COMMON
  1060 ;;
  1061 ;;   _afiareDefault->_GetTime_RTC
  1062 ;;   _afiareDefault->_GetDate_RTC
  1063 ;;   _verificareOreSonerie->_test
  1064 ;;   _detectieIncendiu->___lwdiv
  1065 ;;   _test->_clearScreen
  1066 ;;   _tastaApasata->_SetTime_RTC
  1067 ;;   _tastaApasata->_SetDate_RTC
  1068 ;;   _DisplayDateOnLCD->___lbmod
  1069 ;;   _DisplayTimeToLCD->_clearScreen
  1070 ;;   _DisplayTimeToLCD->___lbmod
  1071 ;;   _disp_num->___awdiv
  1072 ;;   _clearScreen->_writeCommand
  1073 ;;   _writeString->_writeChar
  1074 ;;   _initLCD->_writeCommand
  1075 ;;   _GetDate_RTC->_ReadBFrom_RTC
  1076 ;;   _SetDate_RTC->_WriteBTo_RTC
  1077 ;;   _SetTime_RTC->_WriteBTo_RTC
  1078 ;;   _GetTime_RTC->_ReadBFrom_RTC
  1079 ;;   _writeChar->_pulseEpin
  1080 ;;   _writeCommand->_pulseEpin
  1081 ;;   _GetChar2->_readSwitches
  1082 ;;   _GetChar->_readSwitches
  1083 ;;   _ReadBFrom_RTC->_Write_I2C
  1084 ;;   _WriteBTo_RTC->_Write_I2C
  1085 ;;   ___lwdiv->___wmul
  1086 ;;
  1087 ;; Critical Paths under _main in BANK0
  1088 ;;
  1089 ;;   _main->_tastaApasata
  1090 ;;
  1091 ;; Critical Paths under _main in BANK1
  1092 ;;
  1093 ;;   None.
  1094 ;;
  1095 ;; Critical Paths under _main in BANK3
  1096 ;;
  1097 ;;   None.
  1098 ;;
  1099 ;; Critical Paths under _main in BANK2
  1100 ;;
  1101 ;;   None.
  1102 ;;
  1103 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1104 ;;
  1105 ;;
  1106 ;;Call Graph Tables:
  1107 ;;
  1108 ;; ---------------------------------------------------------------------------------
  1109 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1110 ;; ---------------------------------------------------------------------------------
  1111 ;; (0) _main                                                 1     1      0    8719
  1112 ;;                                             52 BANK0      1     1      0
  1113 ;;                            _InitADC
  1114 ;;                            _initLCD
  1115 ;;                           _Init_I2C
  1116 ;;                         _InitKeypad
  1117 ;;                        _GetTime_RTC
  1118 ;;                            ___lbdiv
  1119 ;;                            ___lbmod
  1120 ;;                        _clearScreen
  1121 ;;                   _detectieIncendiu
  1122 ;;                            _GetChar
  1123 ;;                       _tastaApasata
  1124 ;;               _verificareOreSonerie
  1125 ;;                      _afiareDefault
  1126 ;; ---------------------------------------------------------------------------------
  1127 ;; (1) _afiareDefault                                        4     4      0    1846
  1128 ;;                                              9 COMMON     4     4      0
  1129 ;;                        _GetTime_RTC
  1130 ;;                   _DisplayTimeToLCD
  1131 ;;                        _GetDate_RTC
  1132 ;;                   _DisplayDateOnLCD
  1133 ;; ---------------------------------------------------------------------------------
  1134 ;; (1) _verificareOreSonerie                                27    27      0    1289
  1135 ;;                                              0 BANK0     23    23      0
  1136 ;;                             ___wmul
  1137 ;;                            ___lbdiv
  1138 ;;                            ___lbmod
  1139 ;;                               _test
  1140 ;;                        _GetTime_RTC
  1141 ;; ---------------------------------------------------------------------------------
  1142 ;; (1) _detectieIncendiu                                    24    24      0    1211
  1143 ;;                                              0 BANK0     24    24      0
  1144 ;;                        _GetADCValue
  1145 ;;                            ___lwdiv
  1146 ;;                             ___wmul
  1147 ;;                               _test
  1148 ;; ---------------------------------------------------------------------------------
  1149 ;; (2) _test                                                 5     5      0     201
  1150 ;;                                              5 COMMON     5     5      0
  1151 ;;                        _clearScreen
  1152 ;;                        _writeString
  1153 ;; ---------------------------------------------------------------------------------
  1154 ;; (1) _tastaApasata                                        52    52      0    3600
  1155 ;;                                              0 BANK0     52    52      0
  1156 ;;                        _SetTime_RTC
  1157 ;;                        _SetDate_RTC
  1158 ;;                        _clearScreen
  1159 ;;                        _writeString
  1160 ;;                           _GetChar2
  1161 ;;                          _writeChar
  1162 ;;                             ___wmul
  1163 ;;                           _disp_num
  1164 ;; ---------------------------------------------------------------------------------
  1165 ;; (2) _DisplayDateOnLCD                                     1     1      0     652
  1166 ;;                                              5 COMMON     1     1      0
  1167 ;;                       _writeCommand
  1168 ;;                            ___lbdiv
  1169 ;;                          _writeChar
  1170 ;;                            ___lbmod
  1171 ;;                        _writeString
  1172 ;; ---------------------------------------------------------------------------------
  1173 ;; (2) _DisplayTimeToLCD                                     1     1      0     652
  1174 ;;                                              5 COMMON     1     1      0
  1175 ;;                        _clearScreen
  1176 ;;                            ___lbdiv
  1177 ;;                          _writeChar
  1178 ;;                            ___lbmod
  1179 ;;                        _writeString
  1180 ;; ---------------------------------------------------------------------------------
  1181 ;; (2) _disp_num                                             5     3      2     709
  1182 ;;                                              8 COMMON     5     3      2
  1183 ;;                             ___wmul
  1184 ;;                          _writeChar
  1185 ;;                            ___awdiv
  1186 ;;                             ___bmul
  1187 ;; ---------------------------------------------------------------------------------
  1188 ;; (3) _clearScreen                                          2     2      0      44
  1189 ;;                                              3 COMMON     2     2      0
  1190 ;;                       _writeCommand
  1191 ;; ---------------------------------------------------------------------------------
  1192 ;; (3) _writeString                                          1     1      0      89
  1193 ;;                                              3 COMMON     1     1      0
  1194 ;;                          _writeChar
  1195 ;; ---------------------------------------------------------------------------------
  1196 ;; (1) _initLCD                                              3     3      0      44
  1197 ;;                                              3 COMMON     3     3      0
  1198 ;;                          _pulseEpin
  1199 ;;                       _writeCommand
  1200 ;; ---------------------------------------------------------------------------------
  1201 ;; (2) _GetDate_RTC                                          1     1      0     248
  1202 ;;                                              8 COMMON     1     1      0
  1203 ;;                      _ReadBFrom_RTC
  1204 ;;                             ___bmul
  1205 ;; ---------------------------------------------------------------------------------
  1206 ;; (2) _SetDate_RTC                                          6     3      3     631
  1207 ;;                                              8 COMMON     6     3      3
  1208 ;;                            ___lbmod
  1209 ;;                            ___lbdiv
  1210 ;;                       _WriteBTo_RTC
  1211 ;; ---------------------------------------------------------------------------------
  1212 ;; (2) _SetTime_RTC                                          6     3      3     609
  1213 ;;                                              8 COMMON     6     3      3
  1214 ;;                            ___lbmod
  1215 ;;                            ___lbdiv
  1216 ;;                       _WriteBTo_RTC
  1217 ;; ---------------------------------------------------------------------------------
  1218 ;; (2) _GetTime_RTC                                          1     1      0     248
  1219 ;;                                              8 COMMON     1     1      0
  1220 ;;                      _ReadBFrom_RTC
  1221 ;;                             ___bmul
  1222 ;; ---------------------------------------------------------------------------------
  1223 ;; (4) _writeChar                                            1     1      0      44
  1224 ;;                                              2 COMMON     1     1      0
  1225 ;;                          _pulseEpin
  1226 ;; ---------------------------------------------------------------------------------
  1227 ;; (3) _writeCommand                                         1     1      0      44
  1228 ;;                                              2 COMMON     1     1      0
  1229 ;;                          _pulseEpin
  1230 ;; ---------------------------------------------------------------------------------
  1231 ;; (2) _GetChar2                                             3     1      2     244
  1232 ;;                                              3 COMMON     3     1      2
  1233 ;;                       _readSwitches
  1234 ;; ---------------------------------------------------------------------------------
  1235 ;; (1) _GetChar                                              3     3      0      70
  1236 ;;                                              3 COMMON     3     3      0
  1237 ;;                       _readSwitches
  1238 ;; ---------------------------------------------------------------------------------
  1239 ;; (3) _ReadBFrom_RTC                                        7     4      3     156
  1240 ;;                                              1 COMMON     7     4      3
  1241 ;;                          _Start_I2C
  1242 ;;                          _Write_I2C
  1243 ;;                        _Restart_I2C
  1244 ;;                           _Read_I2C
  1245 ;;                        _SendACK_I2C
  1246 ;;                       _SendNACK_I2C
  1247 ;;                           _Stop_I2C
  1248 ;; ---------------------------------------------------------------------------------
  1249 ;; (3) _WriteBTo_RTC                                         7     5      2     134
  1250 ;;                                              1 COMMON     7     5      2
  1251 ;;                          _Start_I2C
  1252 ;;                          _Write_I2C
  1253 ;;                           _Stop_I2C
  1254 ;; ---------------------------------------------------------------------------------
  1255 ;; (2) _GetADCValue                                          5     3      2      22
  1256 ;;                                              0 COMMON     5     3      2
  1257 ;; ---------------------------------------------------------------------------------
  1258 ;; (5) _pulseEpin                                            2     2      0       0
  1259 ;;                                              0 COMMON     2     2      0
  1260 ;; ---------------------------------------------------------------------------------
  1261 ;; (3) _readSwitches                                         3     3      0       0
  1262 ;;                                              0 COMMON     3     3      0
  1263 ;; ---------------------------------------------------------------------------------
  1264 ;; (3) ___awdiv                                              8     4      4     300
  1265 ;;                                              0 COMMON     8     4      4
  1266 ;; ---------------------------------------------------------------------------------
  1267 ;; (3) ___lbmod                                              5     4      1     159
  1268 ;;                                              0 COMMON     5     4      1
  1269 ;; ---------------------------------------------------------------------------------
  1270 ;; (3) ___lbdiv                                              4     3      1     162
  1271 ;;                                              0 COMMON     4     3      1
  1272 ;; ---------------------------------------------------------------------------------
  1273 ;; (2) ___lwdiv                                              7     3      4     162
  1274 ;;                                              6 COMMON     7     3      4
  1275 ;;                             ___wmul (ARG)
  1276 ;; ---------------------------------------------------------------------------------
  1277 ;; (2) ___wmul                                               6     2      4      92
  1278 ;;                                              0 COMMON     6     2      4
  1279 ;; ---------------------------------------------------------------------------------
  1280 ;; (3) ___bmul                                               3     2      1      92
  1281 ;;                                              0 COMMON     3     2      1
  1282 ;; ---------------------------------------------------------------------------------
  1283 ;; (4) _SendACK_I2C                                          0     0      0       0
  1284 ;; ---------------------------------------------------------------------------------
  1285 ;; (4) _SendNACK_I2C                                         0     0      0       0
  1286 ;; ---------------------------------------------------------------------------------
  1287 ;; (4) _Read_I2C                                             0     0      0       0
  1288 ;; ---------------------------------------------------------------------------------
  1289 ;; (4) _Restart_I2C                                          0     0      0       0
  1290 ;; ---------------------------------------------------------------------------------
  1291 ;; (4) _Stop_I2C                                             0     0      0       0
  1292 ;; ---------------------------------------------------------------------------------
  1293 ;; (4) _Write_I2C                                            1     1      0      22
  1294 ;;                                              0 COMMON     1     1      0
  1295 ;; ---------------------------------------------------------------------------------
  1296 ;; (4) _Start_I2C                                            0     0      0       0
  1297 ;; ---------------------------------------------------------------------------------
  1298 ;; (1) _Init_I2C                                             0     0      0       0
  1299 ;; ---------------------------------------------------------------------------------
  1300 ;; (1) _InitADC                                              0     0      0       0
  1301 ;; ---------------------------------------------------------------------------------
  1302 ;; (1) _InitKeypad                                           0     0      0       0
  1303 ;; ---------------------------------------------------------------------------------
  1304 ;; Estimated maximum stack depth 5
  1305 ;; ---------------------------------------------------------------------------------
  1306 ;; Call Graph Graphs:
  1307 ;; _main (ROOT)
  1308 ;;   _InitADC
  1309 ;;   _initLCD
  1310 ;;     _pulseEpin
  1311 ;;     _writeCommand
  1312 ;;       _pulseEpin
  1313 ;;   _Init_I2C
  1314 ;;   _InitKeypad
  1315 ;;   _GetTime_RTC
  1316 ;;     _ReadBFrom_RTC
  1317 ;;       _Start_I2C
  1318 ;;       _Write_I2C
  1319 ;;       _Restart_I2C
  1320 ;;       _Read_I2C
  1321 ;;       _SendACK_I2C
  1322 ;;       _SendNACK_I2C
  1323 ;;       _Stop_I2C
  1324 ;;     ___bmul
  1325 ;;   ___lbdiv
  1326 ;;   ___lbmod
  1327 ;;   _clearScreen
  1328 ;;     _writeCommand
  1329 ;;       _pulseEpin
  1330 ;;   _detectieIncendiu
  1331 ;;     _GetADCValue
  1332 ;;     ___lwdiv
  1333 ;;       ___wmul (ARG)
  1334 ;;     ___wmul
  1335 ;;     _test
  1336 ;;       _clearScreen
  1337 ;;         _writeCommand
  1338 ;;           _pulseEpin
  1339 ;;       _writeString
  1340 ;;         _writeChar
  1341 ;;           _pulseEpin
  1342 ;;   _GetChar
  1343 ;;     _readSwitches
  1344 ;;   _tastaApasata
  1345 ;;     _SetTime_RTC
  1346 ;;       ___lbmod
  1347 ;;       ___lbdiv
  1348 ;;       _WriteBTo_RTC
  1349 ;;         _Start_I2C
  1350 ;;         _Write_I2C
  1351 ;;         _Stop_I2C
  1352 ;;     _SetDate_RTC
  1353 ;;       ___lbmod
  1354 ;;       ___lbdiv
  1355 ;;       _WriteBTo_RTC
  1356 ;;         _Start_I2C
  1357 ;;         _Write_I2C
  1358 ;;         _Stop_I2C
  1359 ;;     _clearScreen
  1360 ;;       _writeCommand
  1361 ;;         _pulseEpin
  1362 ;;     _writeString
  1363 ;;       _writeChar
  1364 ;;         _pulseEpin
  1365 ;;     _GetChar2
  1366 ;;       _readSwitches
  1367 ;;     _writeChar
  1368 ;;       _pulseEpin
  1369 ;;     ___wmul
  1370 ;;     _disp_num
  1371 ;;       ___wmul
  1372 ;;       _writeChar
  1373 ;;         _pulseEpin
  1374 ;;       ___awdiv
  1375 ;;       ___bmul
  1376 ;;   _verificareOreSonerie
  1377 ;;     ___wmul
  1378 ;;     ___lbdiv
  1379 ;;     ___lbmod
  1380 ;;     _test
  1381 ;;       _clearScreen
  1382 ;;         _writeCommand
  1383 ;;           _pulseEpin
  1384 ;;       _writeString
  1385 ;;         _writeChar
  1386 ;;           _pulseEpin
  1387 ;;     _GetTime_RTC
  1388 ;;       _ReadBFrom_RTC
  1389 ;;         _Start_I2C
  1390 ;;         _Write_I2C
  1391 ;;         _Restart_I2C
  1392 ;;         _Read_I2C
  1393 ;;         _SendACK_I2C
  1394 ;;         _SendNACK_I2C
  1395 ;;         _Stop_I2C
  1396 ;;       ___bmul
  1397 ;;   _afiareDefault
  1398 ;;     _GetTime_RTC
  1399 ;;       _ReadBFrom_RTC
  1400 ;;         _Start_I2C
  1401 ;;         _Write_I2C
  1402 ;;         _Restart_I2C
  1403 ;;         _Read_I2C
  1404 ;;         _SendACK_I2C
  1405 ;;         _SendNACK_I2C
  1406 ;;         _Stop_I2C
  1407 ;;       ___bmul
  1408 ;;     _DisplayTimeToLCD
  1409 ;;       _clearScreen
  1410 ;;         _writeCommand
  1411 ;;           _pulseEpin
  1412 ;;       ___lbdiv
  1413 ;;       _writeChar
  1414 ;;         _pulseEpin
  1415 ;;       ___lbmod
  1416 ;;       _writeString
  1417 ;;         _writeChar
  1418 ;;           _pulseEpin
  1419 ;;     _GetDate_RTC
  1420 ;;       _ReadBFrom_RTC
  1421 ;;         _Start_I2C
  1422 ;;         _Write_I2C
  1423 ;;         _Restart_I2C
  1424 ;;         _Read_I2C
  1425 ;;         _SendACK_I2C
  1426 ;;         _SendNACK_I2C
  1427 ;;         _Stop_I2C
  1428 ;;       ___bmul
  1429 ;;     _DisplayDateOnLCD
  1430 ;;       _writeCommand
  1431 ;;         _pulseEpin
  1432 ;;       ___lbdiv
  1433 ;;       _writeChar
  1434 ;;         _pulseEpin
  1435 ;;       ___lbmod
  1436 ;;       _writeString
  1437 ;;         _writeChar
  1438 ;;           _pulseEpin
  1439 ;;
  1440 ;; Address spaces:
  1441 ;;Name               Size   Autos  Total    Cost      Usage
  1442 ;;BANK3               60      0       0       9        0.0%
  1443 ;;BITBANK3            60      0       0       8        0.0%
  1444 ;;SFR3                 0      0       0       4        0.0%
  1445 ;;BITSFR3              0      0       0       4        0.0%
  1446 ;;BANK2               60      0       0      11        0.0%
  1447 ;;BITBANK2            60      0       0      10        0.0%
  1448 ;;SFR2                 0      0       0       5        0.0%
  1449 ;;BITSFR2              0      0       0       5        0.0%
  1450 ;;SFR1                 0      0       0       2        0.0%
  1451 ;;BITSFR1              0      0       0       2        0.0%
  1452 ;;BANK1               50      0      50       7      100.0%
  1453 ;;BITBANK1            50      0       0       6        0.0%
  1454 ;;CODE                 0      0       0       0        0.0%
  1455 ;;DATA                 0      0      AD      12        0.0%
  1456 ;;ABS                  0      0      A8       3        0.0%
  1457 ;;NULL                 0      0       0       0        0.0%
  1458 ;;STACK                0      0       5       2        0.0%
  1459 ;;BANK0               50     35      4A       5       92.5%
  1460 ;;BITBANK0            50      0       0       4        0.0%
  1461 ;;SFR0                 0      0       0       1        0.0%
  1462 ;;BITSFR0              0      0       0       1        0.0%
  1463 ;;COMMON               E      E       E       1      100.0%
  1464 ;;BITCOMMON            E      0       0       0        0.0%
  1465 ;;EEDATA             100      0       0       0        0.0%
  1466                           
  1467                           
  1468 ;; *************** function _main *****************
  1469 ;; Defined at:
  1470 ;;		line 39 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\Main.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;		None
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  tasta           1   52[BANK0 ] unsigned char 
  1475 ;; Return value:  Size  Location     Type
  1476 ;;		None               void
  1477 ;; Registers used:
  1478 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 17F/0
  1481 ;;		On exit  : 60/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1484 ;;      Params:         0       0       0       0       0
  1485 ;;      Locals:         0       1       0       0       0
  1486 ;;      Temps:          0       0       0       0       0
  1487 ;;      Totals:         0       1       0       0       0
  1488 ;;Total ram usage:        1 bytes
  1489 ;; Hardware stack levels required when called:    5
  1490 ;; This function calls:
  1491 ;;		_InitADC
  1492 ;;		_initLCD
  1493 ;;		_Init_I2C
  1494 ;;		_InitKeypad
  1495 ;;		_GetTime_RTC
  1496 ;;		___lbdiv
  1497 ;;		___lbmod
  1498 ;;		_clearScreen
  1499 ;;		_detectieIncendiu
  1500 ;;		_GetChar
  1501 ;;		_tastaApasata
  1502 ;;		_verificareOreSonerie
  1503 ;;		_afiareDefault
  1504 ;; This function is called by:
  1505 ;;		Startup code after reset
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508  0AEB                     _main:	
  1509                           
  1510                           ;Main.c: 45: InitADC();
  1511                           
  1512                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1513  0AEB  120A  158A  22B5   	fcall	_InitADC
      +       120A  158A         
  1514                           
  1515                           ;Main.c: 46: initLCD();
  1516  0AF0  120A  158A  2379   	fcall	_initLCD
      +       120A  158A         
  1517                           
  1518                           ;Main.c: 47: Init_I2C();
  1519  0AF5  120A  118A  2004   	fcall	_Init_I2C
      +       120A  158A         
  1520                           
  1521                           ;Main.c: 48: InitKeypad();
  1522  0AFA  120A  158A  22A7   	fcall	_InitKeypad
      +       120A  158A         
  1523                           
  1524                           ;Main.c: 51: oraPrev = GetTime_RTC();
  1525  0AFF  120A  158A  25CC   	fcall	_GetTime_RTC
      +       120A  158A         
  1526  0B04  00E1               	movwf	_oraPrev
  1527                           
  1528                           ;Main.c: 52: prevH1 = (oraPrev[2]/10);
  1529  0B05  300A               	movlw	10
  1530  0B06  00F0               	movwf	?___lbdiv
  1531  0B07  0861               	movf	_oraPrev,w
  1532  0B08  3E02               	addlw	2
  1533  0B09  0084               	movwf	4
  1534  0B0A  0800               	movf	0,w
  1535  0B0B  120A  118A  2226   	fcall	___lbdiv
      +       120A  158A         
  1536  0B10  00D5               	movwf	_prevH1
  1537  0B11  300A               	movlw	10
  1538  0B12  01D6               	clrf	_prevH1+1
  1539                           
  1540                           ;Main.c: 53: prevH2 = (oraPrev[2]%10);
  1541  0B13  00F0               	movwf	?___lbmod
  1542  0B14  0861               	movf	_oraPrev,w
  1543  0B15  3E02               	addlw	2
  1544  0B16  0084               	movwf	4
  1545  0B17  0800               	movf	0,w
  1546  0B18  120A  118A  2241   	fcall	___lbmod
      +       120A  158A         
  1547                           
  1548                           ;Main.c: 54: prevM1 = (oraPrev[1]/10);
  1549  0B1D  300A               	movlw	10
  1550  0B1E  00F0               	movwf	?___lbdiv
  1551  0B1F  0861               	movf	_oraPrev,w
  1552  0B20  3E01               	addlw	1
  1553  0B21  0084               	movwf	4
  1554  0B22  0800               	movf	0,w
  1555  0B23  120A  118A  2226   	fcall	___lbdiv
      +       120A  158A         
  1556  0B28  00D7               	movwf	_prevM1
  1557  0B29  300A               	movlw	10
  1558  0B2A  01D8               	clrf	_prevM1+1
  1559                           
  1560                           ;Main.c: 55: prevM2 = (oraPrev[1]%10);
  1561  0B2B  00F0               	movwf	?___lbmod
  1562  0B2C  0861               	movf	_oraPrev,w
  1563  0B2D  3E01               	addlw	1
  1564  0B2E  0084               	movwf	4
  1565  0B2F  0800               	movf	0,w
  1566  0B30  120A  118A  2241   	fcall	___lbmod
      +       120A  158A         
  1567  0B35  00D9               	movwf	_prevM2
  1568  0B36  300A               	movlw	10
  1569  0B37  01DA               	clrf	_prevM2+1
  1570                           
  1571                           ;Main.c: 56: prevS1 = (oraPrev[0]/10);
  1572  0B38  00F0               	movwf	?___lbdiv
  1573  0B39  0861               	movf	_oraPrev,w
  1574  0B3A  0084               	movwf	4
  1575  0B3B  0800               	movf	0,w
  1576  0B3C  120A  118A  2226   	fcall	___lbdiv
      +       120A  158A         
  1577  0B41  00DB               	movwf	_prevS1
  1578  0B42  300A               	movlw	10
  1579  0B43  01DC               	clrf	_prevS1+1
  1580                           
  1581                           ;Main.c: 57: prevS2 = (oraPrev[0]%10);
  1582  0B44  00F0               	movwf	?___lbmod
  1583  0B45  0861               	movf	_oraPrev,w
  1584  0B46  0084               	movwf	4
  1585  0B47  0800               	movf	0,w
  1586  0B48  120A  118A  2241   	fcall	___lbmod
      +       120A  158A         
  1587  0B4D  00DD               	movwf	_prevS2
  1588  0B4E  01DE               	clrf	_prevS2+1
  1589                           
  1590                           ;Main.c: 69: clearScreen();
  1591  0B4F  120A  118A  26EB   	fcall	_clearScreen
      +       120A  158A         
  1592  0B54                     l8771:	
  1593                           
  1594                           ;Main.c: 72: {
  1595                           ;Main.c: 75: detectieIncendiu();
  1596  0B54  120A  118A  225D   	fcall	_detectieIncendiu
      +       120A  158A         
  1597                           
  1598                           ;Main.c: 78: tasta = GetChar();
  1599  0B59  120A  158A  2410   	fcall	_GetChar
      +       120A  158A         
  1600  0B5E  00D4               	movwf	main@tasta
  1601                           
  1602                           ;Main.c: 79: if(tasta != 'x')
  1603  0B5F  3A78               	xorlw	120
  1604  0B60  1903               	skipnz
  1605  0B61  2B68               	goto	l8777
  1606                           
  1607                           ;Main.c: 80: {
  1608                           ;Main.c: 82: tastaApasata( tasta);
  1609  0B62  0854               	movf	main@tasta,w
  1610  0B63  120A  118A  23D2   	fcall	_tastaApasata
      +       120A  158A         
  1611  0B68                     l8777:	
  1612                           
  1613                           ;Main.c: 83: }
  1614                           ;Main.c: 88: oraNext = GetTime_RTC();
  1615  0B68  120A  158A  25CC   	fcall	_GetTime_RTC
      +       120A  158A         
  1616  0B6D  00E0               	movwf	_oraNext
  1617                           
  1618                           ;Main.c: 89: verificareOreSonerie(oraNext);
  1619  0B6E  120A  118A  20B0   	fcall	_verificareOreSonerie
      +       120A  158A         
  1620                           
  1621                           ;Main.c: 95: afiareDefault();
  1622  0B73  120A  158A  256D   	fcall	_afiareDefault
      +       120A  158A         
  1623  0B78  2B54               	goto	l8771
  1624  0B79                     __end_of_main:	
  1625                           
  1626                           	psect	text857
  1627  0D6D                     __ptext857:	
  1628 ;; =============== function _main ends ============
  1629                           
  1630                           
  1631 ;; *************** function _afiareDefault *****************
  1632 ;; Defined at:
  1633 ;;		line 429 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\Main.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;		None
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;  count2          2   11[COMMON] unsigned int 
  1638 ;;  count           2    9[COMMON] unsigned int 
  1639 ;; Return value:  Size  Location     Type
  1640 ;;		None               void
  1641 ;; Registers used:
  1642 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1643 ;; Tracked objects:
  1644 ;;		On entry : 160/0
  1645 ;;		On exit  : 60/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1648 ;;      Params:         0       0       0       0       0
  1649 ;;      Locals:         4       0       0       0       0
  1650 ;;      Temps:          0       0       0       0       0
  1651 ;;      Totals:         4       0       0       0       0
  1652 ;;Total ram usage:        4 bytes
  1653 ;; Hardware stack levels used:    1
  1654 ;; Hardware stack levels required when called:    4
  1655 ;; This function calls:
  1656 ;;		_GetTime_RTC
  1657 ;;		_DisplayTimeToLCD
  1658 ;;		_GetDate_RTC
  1659 ;;		_DisplayDateOnLCD
  1660 ;; This function is called by:
  1661 ;;		_main
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664  0D6D                     _afiareDefault:	
  1665                           
  1666                           ;Main.c: 430: if (apasat == 0)
  1667                           
  1668                           ; Regs used in _afiareDefault: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1669  0D6D  0867               	movf	_apasat+1,w
  1670  0D6E  0466               	iorwf	_apasat,w
  1671  0D6F  1D03               	skipz
  1672  0D70  2D9C               	goto	l8743
  1673                           
  1674                           ;Main.c: 431: {
  1675                           ;Main.c: 432: DisplayTimeToLCD(GetTime_RTC());
  1676  0D71  25CC               	fcall	_GetTime_RTC
  1677  0D72  120A  118A  21B9   	fcall	_DisplayTimeToLCD
      +       120A  158A         
  1678                           
  1679                           ;Main.c: 433: DisplayDateOnLCD(GetDate_RTC());
  1680  0D77  25A1               	fcall	_GetDate_RTC
  1681  0D78  120A  118A  202A   	fcall	_DisplayDateOnLCD
      +       120A  158A         
  1682                           
  1683                           ;Main.c: 434: unsigned int count = 10000;
  1684  0D7D  3010               	movlw	16
  1685  0D7E  00F9               	movwf	afiareDefault@count
  1686  0D7F  3027               	movlw	39
  1687  0D80  00FA               	movwf	afiareDefault@count+1
  1688  0D81                     l8739:	
  1689                           ;Main.c: 435: while(count--)
  1690                           
  1691  0D81  3001               	movlw	1
  1692  0D82  02F9               	subwf	afiareDefault@count,f
  1693  0D83  1C03               	skipc
  1694  0D84  03FA               	decf	afiareDefault@count+1,f
  1695  0D85  0A79               	incf	afiareDefault@count,w
  1696  0D86  1903               	skipnz
  1697  0D87  0A7A               	incf	afiareDefault@count+1,w
  1698  0D88  1903               	btfsc	3,2
  1699  0D89  2D97               	goto	l8741
  1700                           
  1701                           ;Main.c: 436: {
  1702                           ;Main.c: 437: unsigned int count2 = 10;
  1703  0D8A  300A               	movlw	10
  1704  0D8B  00FB               	movwf	afiareDefault@count2
  1705  0D8C  01FC               	clrf	afiareDefault@count2+1
  1706  0D8D                     l8737:	
  1707                           ;Main.c: 438: while(count2--);
  1708                           
  1709  0D8D  3001               	movlw	1
  1710  0D8E  02FB               	subwf	afiareDefault@count2,f
  1711  0D8F  1C03               	skipc
  1712  0D90  03FC               	decf	afiareDefault@count2+1,f
  1713  0D91  0A7B               	incf	afiareDefault@count2,w
  1714  0D92  1903               	skipnz
  1715  0D93  0A7C               	incf	afiareDefault@count2+1,w
  1716  0D94  1903               	btfsc	3,2
  1717  0D95  2D81               	goto	l8739
  1718  0D96  2D8D               	goto	l8737
  1719  0D97                     l8741:	
  1720                           
  1721                           ;Main.c: 439: }
  1722                           ;Main.c: 440: apasat = 20;
  1723  0D97  3014               	movlw	20
  1724  0D98  1283               	bcf	3,5	;RP0=0, select bank0
  1725  0D99  1303               	bcf	3,6	;RP1=0, select bank0
  1726  0D9A  00E6               	movwf	_apasat
  1727  0D9B  01E7               	clrf	_apasat+1
  1728  0D9C                     l8743:	
  1729                           
  1730                           ;Main.c: 442: }
  1731                           ;Main.c: 443: apasat--;
  1732  0D9C  30FF               	movlw	-1
  1733  0D9D  07E6               	addwf	_apasat,f
  1734  0D9E  1C03               	skipc
  1735  0D9F  03E7               	decf	_apasat+1,f
  1736  0DA0  0008               	return
  1737  0DA1                     __end_of_afiareDefault:	
  1738  0DA1                     __ptext868:	
  1739 ;; =============== function _initLCD ends ============
  1740                           
  1741                           
  1742 ;; *************** function _GetDate_RTC *****************
  1743 ;; Defined at:
  1744 ;;		line 207 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\DS1307.c"
  1745 ;; Parameters:    Size  Location     Type
  1746 ;;		None
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;		None
  1749 ;; Return value:  Size  Location     Type
  1750 ;;                  1    wreg      PTR unsigned char 
  1751 ;; Registers used:
  1752 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1753 ;; Tracked objects:
  1754 ;;		On entry : 0/0
  1755 ;;		On exit  : 160/0
  1756 ;;		Unchanged: FFE9F/0
  1757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1758 ;;      Params:         0       0       0       0       0
  1759 ;;      Locals:         0       0       0       0       0
  1760 ;;      Temps:          1       0       0       0       0
  1761 ;;      Totals:         1       0       0       0       0
  1762 ;;Total ram usage:        1 bytes
  1763 ;; Hardware stack levels used:    1
  1764 ;; Hardware stack levels required when called:    2
  1765 ;; This function calls:
  1766 ;;		_ReadBFrom_RTC
  1767 ;;		___bmul
  1768 ;; This function is called by:
  1769 ;;		_afiareDefault
  1770 ;; This function uses a non-reentrant model
  1771 ;;
  1772  0DA1                     _GetDate_RTC:	
  1773                           
  1774                           ;DS1307.c: 209: ReadBFrom_RTC(0x03, RTCArray, 4);
  1775                           
  1776                           ; Regs used in _GetDate_RTC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1777  0DA1  3062               	movlw	_RTCArray& (0+255)
  1778  0DA2  00F1               	movwf	?_ReadBFrom_RTC
  1779  0DA3  3004               	movlw	4
  1780  0DA4  00F2               	movwf	?_ReadBFrom_RTC+1
  1781  0DA5  3003               	movlw	3
  1782  0DA6  01F3               	clrf	?_ReadBFrom_RTC+2
  1783  0DA7  269D  120A  158A   	fcall	_ReadBFrom_RTC
  1784                           
  1785                           ;DS1307.c: 212: Temp = RTCArray[1];
  1786  0DAA  0863               	movf	_RTCArray+1,w
  1787                           
  1788                           ;DS1307.c: 213: RTCArray[1] = (Temp>>4)*10 + (Temp&0x0F);
  1789  0DAB  27FA  120A  158A   	fcall	PL15	;call to abstracted procedure
  1790  0DAE  268F  120A  158A   	fcall	___bmul
  1791  0DB1  00F8               	movwf	??_GetDate_RTC
  1792  0DB2  085F               	movf	_Temp,w
  1793  0DB3  390F               	andlw	15
  1794  0DB4  0778               	addwf	??_GetDate_RTC,w
  1795  0DB5  00E3               	movwf	_RTCArray+1
  1796                           
  1797                           ;DS1307.c: 216: Temp = RTCArray[2];
  1798                           
  1799                           ;DS1307.c: 217: RTCArray[2] = (Temp>>4)*10 + (Temp&0x0F);
  1800  0DB6  27F3  120A  158A   	fcall	PL12	;call to abstracted procedure
  1801  0DB9  268F  120A  158A   	fcall	___bmul
  1802  0DBC  00F8               	movwf	??_GetDate_RTC
  1803  0DBD  085F               	movf	_Temp,w
  1804  0DBE  390F               	andlw	15
  1805  0DBF  0778               	addwf	??_GetDate_RTC,w
  1806  0DC0  00E4               	movwf	_RTCArray+2
  1807                           
  1808                           ;DS1307.c: 220: Temp = RTCArray[3];
  1809  0DC1  0865               	movf	_RTCArray+3,w
  1810                           
  1811                           ;DS1307.c: 221: RTCArray[3] = (Temp>>4)*10 + (Temp&0x0F);
  1812  0DC2  27FA  120A  158A   	fcall	PL15	;call to abstracted procedure
  1813  0DC5  268F               	fcall	___bmul
  1814  0DC6  00F8               	movwf	??_GetDate_RTC
  1815  0DC7  085F               	movf	_Temp,w
  1816  0DC8  390F               	andlw	15
  1817  0DC9  0778               	addwf	??_GetDate_RTC,w
  1818  0DCA  00E5               	movwf	_RTCArray+3
  1819                           
  1820                           ;DS1307.c: 223: return RTCArray;
  1821  0DCB  3462               	retlw	_RTCArray& (0+255)
  1822  0DCC                     __end_of_GetDate_RTC:	
  1823  0DCC                     __ptext871:	
  1824 ;; =============== function _SetTime_RTC ends ============
  1825                           
  1826                           
  1827 ;; *************** function _GetTime_RTC *****************
  1828 ;; Defined at:
  1829 ;;		line 149 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\DS1307.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      PTR unsigned char 
  1836 ;; Registers used:
  1837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/20
  1840 ;;		On exit  : 160/0
  1841 ;;		Unchanged: FFE9F/0
  1842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1843 ;;      Params:         0       0       0       0       0
  1844 ;;      Locals:         0       0       0       0       0
  1845 ;;      Temps:          1       0       0       0       0
  1846 ;;      Totals:         1       0       0       0       0
  1847 ;;Total ram usage:        1 bytes
  1848 ;; Hardware stack levels used:    1
  1849 ;; Hardware stack levels required when called:    2
  1850 ;; This function calls:
  1851 ;;		_ReadBFrom_RTC
  1852 ;;		___bmul
  1853 ;; This function is called by:
  1854 ;;		_main
  1855 ;;		_verificareOreSonerie
  1856 ;;		_afiareDefault
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859  0DCC                     _GetTime_RTC:	
  1860                           
  1861                           ;DS1307.c: 151: ReadBFrom_RTC(0x00, RTCArray, 3);
  1862                           
  1863                           ; Regs used in _GetTime_RTC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1864  0DCC  3062               	movlw	_RTCArray& (0+255)
  1865  0DCD  00F1               	movwf	?_ReadBFrom_RTC
  1866  0DCE  3003               	movlw	3
  1867  0DCF  00F2               	movwf	?_ReadBFrom_RTC+1
  1868  0DD0  3000               	movlw	0
  1869  0DD1  01F3               	clrf	?_ReadBFrom_RTC+2
  1870  0DD2  269D  120A  158A   	fcall	_ReadBFrom_RTC
  1871                           
  1872                           ;DS1307.c: 154: Temp = RTCArray[0];
  1873  0DD5  0862               	movf	_RTCArray,w
  1874  0DD6  00DF               	movwf	_Temp
  1875                           
  1876                           ;DS1307.c: 155: RTCArray[0] = ((Temp&0x7F)>>4)*10 + (Temp&0x0F);
  1877  0DD7  300A               	movlw	10
  1878  0DD8  00F0               	movwf	?___bmul
  1879  0DD9  0E5F               	swapf	_Temp,w
  1880  0DDA  390F               	andlw	15
  1881  0DDB  3907               	andlw	7
  1882  0DDC  268F  120A  158A   	fcall	___bmul
  1883  0DDF  00F8               	movwf	??_GetTime_RTC
  1884  0DE0  085F               	movf	_Temp,w
  1885  0DE1  390F               	andlw	15
  1886  0DE2  0778               	addwf	??_GetTime_RTC,w
  1887  0DE3  00E2               	movwf	_RTCArray
  1888                           
  1889                           ;DS1307.c: 158: Temp = RTCArray[1];
  1890  0DE4  0863               	movf	_RTCArray+1,w
  1891                           
  1892                           ;DS1307.c: 159: RTCArray[1] = (Temp>>4)*10 + (Temp&0x0F);
  1893  0DE5  27FA  120A  158A   	fcall	PL15	;call to abstracted procedure
  1894  0DE8  268F  120A  158A   	fcall	___bmul
  1895  0DEB  00F8               	movwf	??_GetTime_RTC
  1896  0DEC  085F               	movf	_Temp,w
  1897  0DED  390F               	andlw	15
  1898  0DEE  0778               	addwf	??_GetTime_RTC,w
  1899  0DEF  00E3               	movwf	_RTCArray+1
  1900                           
  1901                           ;DS1307.c: 162: if(RTCArray[2]&0x40)
  1902  0DF0  1F64               	btfss	_RTCArray+2,6
  1903  0DF1  2E03               	goto	l8243
  1904                           
  1905                           ;DS1307.c: 163: {
  1906                           ;DS1307.c: 164: if(RTCArray[2]&0x20)
  1907  0DF2  1EE4               	btfss	_RTCArray+2,5
  1908  0DF3  2DF7               	goto	l8237
  1909                           
  1910                           ;DS1307.c: 165: RTCArray[3] = 1;
  1911  0DF4  01E5               	clrf	_RTCArray+3
  1912  0DF5  0AE5               	incf	_RTCArray+3,f
  1913  0DF6  2DF8               	goto	l8239
  1914  0DF7                     l8237:	
  1915                           
  1916                           ;DS1307.c: 166: else
  1917                           ;DS1307.c: 167: RTCArray[3] = 0;
  1918  0DF7  01E5               	clrf	_RTCArray+3
  1919  0DF8                     l8239:	
  1920                           
  1921                           ;DS1307.c: 169: Temp =RTCArray[2];
  1922                           
  1923                           ;DS1307.c: 170: RTCArray[2] = ((Temp&0x1F)>>4)*10 + (Temp&0x0F);
  1924  0DF8  27F3  120A  158A   	fcall	PL12	;call to abstracted procedure
  1925  0DFB  3901               	andlw	1
  1926  0DFC  268F               	fcall	___bmul
  1927  0DFD  00F8               	movwf	??_GetTime_RTC
  1928  0DFE  085F               	movf	_Temp,w
  1929  0DFF  390F               	andlw	15
  1930  0E00  0778               	addwf	??_GetTime_RTC,w
  1931  0E01  00E4               	movwf	_RTCArray+2
  1932                           
  1933                           ;DS1307.c: 171: }
  1934  0E02  3462               	retlw	_RTCArray& (0+255)
  1935  0E03                     l8243:	
  1936                           
  1937                           ;DS1307.c: 172: else
  1938                           ;DS1307.c: 173: {
  1939                           ;DS1307.c: 174: Temp = RTCArray[2];
  1940                           
  1941                           ;DS1307.c: 175: RTCArray[2] = (Temp>>4)*10 + (Temp&0x0F);
  1942  0E03  27F3  120A  158A   	fcall	PL12	;call to abstracted procedure
  1943  0E06  268F               	fcall	___bmul
  1944  0E07  00F8               	movwf	??_GetTime_RTC
  1945  0E08  085F               	movf	_Temp,w
  1946  0E09  390F               	andlw	15
  1947  0E0A  0778               	addwf	??_GetTime_RTC,w
  1948  0E0B  00E4               	movwf	_RTCArray+2
  1949                           
  1950                           ;DS1307.c: 176: RTCArray[3] = 2;
  1951  0E0C  3002               	movlw	2
  1952  0E0D  00E5               	movwf	_RTCArray+3
  1953                           
  1954                           ;DS1307.c: 177: }
  1955                           ;DS1307.c: 179: return RTCArray;
  1956  0E0E  3462               	retlw	_RTCArray& (0+255)
  1957  0E0F                     __end_of_GetTime_RTC:	
  1958  0E0F                     __ptext864:	
  1959 ;; =============== function _DisplayTimeToLCD ends ============
  1960                           
  1961                           
  1962 ;; *************** function _disp_num *****************
  1963 ;; Defined at:
  1964 ;;		line 505 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\Main.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;  numb            2    8[COMMON] int 
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;  TenthDigit      1   12[COMMON] unsigned char 
  1969 ;;  UnitDigit       1   11[COMMON] unsigned char 
  1970 ;; Return value:  Size  Location     Type
  1971 ;;		None               void
  1972 ;; Registers used:
  1973 ;;		wreg, status,2, status,0, pclath, cstack
  1974 ;; Tracked objects:
  1975 ;;		On entry : 60/0
  1976 ;;		On exit  : 0/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1979 ;;      Params:         2       0       0       0       0
  1980 ;;      Locals:         2       0       0       0       0
  1981 ;;      Temps:          1       0       0       0       0
  1982 ;;      Totals:         5       0       0       0       0
  1983 ;;Total ram usage:        5 bytes
  1984 ;; Hardware stack levels used:    1
  1985 ;; Hardware stack levels required when called:    2
  1986 ;; This function calls:
  1987 ;;		___wmul
  1988 ;;		_writeChar
  1989 ;;		___awdiv
  1990 ;;		___bmul
  1991 ;; This function is called by:
  1992 ;;		_tastaApasata
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995  0E0F                     _disp_num:	
  1996                           
  1997                           ;Main.c: 507: unsigned char TenthDigit = 0;
  1998                           
  1999                           ; Regs used in _disp_num: [wreg+status,2+status,0+pclath+cstack]
  2000  0E0F  01FC               	clrf	disp_num@TenthDigit
  2001                           
  2002                           ;Main.c: 509: if(numb<0)
  2003  0E10  1FF9               	btfss	disp_num@numb+1,7
  2004  0E11  2E28               	goto	l2235
  2005                           
  2006                           ;Main.c: 510: {
  2007                           ;Main.c: 511: numb = -1*numb;
  2008  0E12  30FF               	movlw	255
  2009  0E13  00F0               	movwf	?___wmul
  2010  0E14  00F1               	movwf	?___wmul+1
  2011  0E15  0879               	movf	disp_num@numb+1,w
  2012  0E16  00F3               	movwf	?___wmul+3
  2013  0E17  0878               	movf	disp_num@numb,w
  2014  0E18  00F2               	movwf	?___wmul+2
  2015  0E19  120A  118A  23B9   	fcall	___wmul
      +       120A  158A         
  2016  0E1E  0871               	movf	?___wmul+1,w
  2017  0E1F  00F9               	movwf	disp_num@numb+1
  2018  0E20  0870               	movf	?___wmul,w
  2019  0E21  00F8               	movwf	disp_num@numb
  2020                           
  2021                           ;Main.c: 512: writeChar('-');
  2022  0E22  302D               	movlw	45
  2023  0E23  120A  118A  26D5   	fcall	_writeChar
      +       120A  158A         
  2024  0E28                     l2235:	
  2025                           
  2026                           ;Main.c: 513: }
  2027                           ;Main.c: 515: TenthDigit = (numb/10);
  2028  0E28  300A               	movlw	10
  2029  0E29  00F0               	movwf	?___awdiv
  2030  0E2A  01F1               	clrf	?___awdiv+1
  2031  0E2B  0879               	movf	disp_num@numb+1,w
  2032  0E2C  00F3               	movwf	?___awdiv+3
  2033  0E2D  0878               	movf	disp_num@numb,w
  2034  0E2E  00F2               	movwf	?___awdiv+2
  2035  0E2F  264A  120A  158A   	fcall	___awdiv
  2036  0E32  0870               	movf	?___awdiv,w
  2037  0E33  00FC               	movwf	disp_num@TenthDigit
  2038                           
  2039                           ;Main.c: 517: if( TenthDigit != 0)
  2040  0E34  087C               	movf	disp_num@TenthDigit,w
  2041  0E35  1903               	btfsc	3,2
  2042  0E36  2E3E               	goto	l2236
  2043                           
  2044                           ;Main.c: 518: writeChar(TenthDigit+0x30);
  2045  0E37  087C               	movf	disp_num@TenthDigit,w
  2046  0E38  3E30               	addlw	48
  2047  0E39  120A  118A  26D5   	fcall	_writeChar
      +       120A  158A         
  2048  0E3E                     l2236:	
  2049                           
  2050                           ;Main.c: 520: UnitDigit = numb - TenthDigit*10;
  2051  0E3E  30F6               	movlw	246
  2052  0E3F  00F0               	movwf	?___bmul
  2053  0E40  087C               	movf	disp_num@TenthDigit,w
  2054  0E41  268F               	fcall	___bmul
  2055  0E42  00FA               	movwf	??_disp_num
  2056  0E43  0878               	movf	disp_num@numb,w
  2057  0E44  077A               	addwf	??_disp_num,w
  2058  0E45  00FB               	movwf	disp_num@UnitDigit
  2059                           
  2060                           ;Main.c: 522: writeChar(UnitDigit+0x30);
  2061  0E46  3E30               	addlw	48
  2062  0E47  120A  118A  2ED5   	ljmp	_writeChar
  2063  0E4A                     __end_of_disp_num:	
  2064  0E4A                     __ptext881:	
  2065 ;; =============== function _readSwitches ends ============
  2066                           
  2067                           
  2068 ;; *************** function ___awdiv *****************
  2069 ;; Defined at:
  2070 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\awdiv.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;  divisor         2    0[COMMON] int 
  2073 ;;  dividend        2    2[COMMON] int 
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;  quotient        2    6[COMMON] int 
  2076 ;;  sign            1    5[COMMON] unsigned char 
  2077 ;;  counter         1    4[COMMON] unsigned char 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  2    0[COMMON] int 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: FFFFF/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2087 ;;      Params:         4       0       0       0       0
  2088 ;;      Locals:         4       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0
  2090 ;;      Totals:         8       0       0       0       0
  2091 ;;Total ram usage:        8 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_disp_num
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099  0E4A                     ___awdiv:	
  2100                           
  2101                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2102  0E4A  01F5               	clrf	___awdiv@sign
  2103  0E4B  1FF1               	btfss	___awdiv@divisor+1,7
  2104  0E4C  2E54               	goto	l7913
  2105  0E4D  09F0               	comf	___awdiv@divisor,f
  2106  0E4E  09F1               	comf	___awdiv@divisor+1,f
  2107  0E4F  0AF0               	incf	___awdiv@divisor,f
  2108  0E50  1903               	skipnz
  2109  0E51  0AF1               	incf	___awdiv@divisor+1,f
  2110  0E52  01F5               	clrf	___awdiv@sign
  2111  0E53  0AF5               	incf	___awdiv@sign,f
  2112  0E54                     l7913:	
  2113  0E54  1FF3               	btfss	___awdiv@dividend+1,7
  2114  0E55  2E5D               	goto	l7919
  2115  0E56  09F2               	comf	___awdiv@dividend,f
  2116  0E57  09F3               	comf	___awdiv@dividend+1,f
  2117  0E58  0AF2               	incf	___awdiv@dividend,f
  2118  0E59  1903               	skipnz
  2119  0E5A  0AF3               	incf	___awdiv@dividend+1,f
  2120  0E5B  3001               	movlw	1
  2121  0E5C  06F5               	xorwf	___awdiv@sign,f
  2122  0E5D                     l7919:	
  2123  0E5D  01F6               	clrf	___awdiv@quotient
  2124  0E5E  01F7               	clrf	___awdiv@quotient+1
  2125  0E5F  0871               	movf	___awdiv@divisor+1,w
  2126  0E60  0470               	iorwf	___awdiv@divisor,w
  2127  0E61  1903               	skipnz
  2128  0E62  2E82               	goto	l7941
  2129  0E63  01F4               	clrf	___awdiv@counter
  2130  0E64                     L2:	
  2131  0E64  0AF4               	incf	___awdiv@counter,f
  2132  0E65  1BF1               	btfsc	___awdiv@divisor+1,7
  2133  0E66  2E6B               	goto	l7929
  2134  0E67  1003               	clrc
  2135  0E68  0DF0               	rlf	___awdiv@divisor,f
  2136  0E69  0DF1               	rlf	___awdiv@divisor+1,f
  2137  0E6A  2E64               	goto	L2
  2138  0E6B                     l7929:	
  2139  0E6B  1003               	clrc
  2140  0E6C  0DF6               	rlf	___awdiv@quotient,f
  2141  0E6D  0DF7               	rlf	___awdiv@quotient+1,f
  2142  0E6E  0871               	movf	___awdiv@divisor+1,w
  2143  0E6F  0273               	subwf	___awdiv@dividend+1,w
  2144  0E70  1D03               	skipz
  2145  0E71  2E74               	goto	u1435
  2146  0E72  0870               	movf	___awdiv@divisor,w
  2147  0E73  0272               	subwf	___awdiv@dividend,w
  2148  0E74                     u1435:	
  2149  0E74  1C03               	skipc
  2150  0E75  2E7E               	goto	L3
  2151  0E76  0870               	movf	___awdiv@divisor,w
  2152  0E77  02F2               	subwf	___awdiv@dividend,f
  2153  0E78  0871               	movf	___awdiv@divisor+1,w
  2154  0E79  1C03               	skipc
  2155  0E7A  03F3               	decf	___awdiv@dividend+1,f
  2156  0E7B  02F3               	subwf	___awdiv@dividend+1,f
  2157  0E7C  1476               	bsf	___awdiv@quotient,0
  2158  0E7D  1003               	clrc
  2159  0E7E                     L3:	
  2160  0E7E  0CF1               	rrf	___awdiv@divisor+1,f
  2161  0E7F  0CF0               	rrf	___awdiv@divisor,f
  2162  0E80  0BF4               	decfsz	___awdiv@counter,f
  2163  0E81  2E6B               	goto	l7929
  2164  0E82                     l7941:	
  2165  0E82  0875               	movf	___awdiv@sign,w
  2166  0E83  1903               	btfsc	3,2
  2167  0E84  2E8A               	goto	l7945
  2168  0E85  09F6               	comf	___awdiv@quotient,f
  2169  0E86  09F7               	comf	___awdiv@quotient+1,f
  2170  0E87  0AF6               	incf	___awdiv@quotient,f
  2171  0E88  1903               	skipnz
  2172  0E89  0AF7               	incf	___awdiv@quotient+1,f
  2173  0E8A                     l7945:	
  2174  0E8A  0877               	movf	___awdiv@quotient+1,w
  2175  0E8B  00F1               	movwf	?___awdiv+1
  2176  0E8C  0876               	movf	___awdiv@quotient,w
  2177  0E8D  00F0               	movwf	?___awdiv
  2178  0E8E  0008               	return
  2179  0E8F                     __end_of___awdiv:	
  2180  0E8F                     __ptext886:	
  2181 ;; =============== function ___wmul ends ============
  2182                           
  2183                           
  2184 ;; *************** function ___bmul *****************
  2185 ;; Defined at:
  2186 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\bmul.c"
  2187 ;; Parameters:    Size  Location     Type
  2188 ;;  multiplier      1    wreg     unsigned char 
  2189 ;;  multiplicand    1    0[COMMON] unsigned char 
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;  multiplier      1    2[COMMON] unsigned char 
  2192 ;;  product         1    1[COMMON] unsigned char 
  2193 ;; Return value:  Size  Location     Type
  2194 ;;                  1    wreg      unsigned char 
  2195 ;; Registers used:
  2196 ;;		wreg, status,2, status,0
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: FFFFF/0
  2201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2202 ;;      Params:         1       0       0       0       0
  2203 ;;      Locals:         2       0       0       0       0
  2204 ;;      Temps:          0       0       0       0       0
  2205 ;;      Totals:         3       0       0       0       0
  2206 ;;Total ram usage:        3 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_disp_num
  2212 ;;		_GetTime_RTC
  2213 ;;		_GetDate_RTC
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216  0E8F                     ___bmul:	
  2217                           
  2218                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2219                           ;___bmul@multiplier stored from wreg
  2220  0E8F  00F2               	movwf	___bmul@multiplier
  2221  0E90  01F1               	clrf	___bmul@product
  2222  0E91                     l7807:	
  2223  0E91  0870               	movf	___bmul@multiplicand,w
  2224  0E92  1872               	btfsc	___bmul@multiplier,0
  2225  0E93  07F1               	addwf	___bmul@product,f
  2226  0E94  1003               	clrc
  2227  0E95  0DF0               	rlf	___bmul@multiplicand,f
  2228  0E96  1003               	clrc
  2229  0E97  0CF2               	rrf	___bmul@multiplier,f
  2230  0E98  08F2               	movf	___bmul@multiplier,f
  2231  0E99  1D03               	skipz
  2232  0E9A  2E91               	goto	l7807
  2233  0E9B  0871               	movf	___bmul@product,w
  2234  0E9C  0008               	return
  2235  0E9D                     __end_of___bmul:	
  2236  0E9D                     __ptext876:	
  2237 ;; =============== function _GetChar ends ============
  2238                           
  2239                           
  2240 ;; *************** function _ReadBFrom_RTC *****************
  2241 ;; Defined at:
  2242 ;;		line 85 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\DS1307.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;  Address         1    wreg     unsigned char 
  2245 ;;  pData           1    1[COMMON] PTR unsigned char 
  2246 ;;		 -> RTCArray(4), 
  2247 ;;  NOBytes         2    2[COMMON] unsigned int 
  2248 ;; Auto vars:     Size  Location     Type
  2249 ;;  Address         1    5[COMMON] unsigned char 
  2250 ;;  i               2    6[COMMON] unsigned int 
  2251 ;; Return value:  Size  Location     Type
  2252 ;;		None               void
  2253 ;; Registers used:
  2254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 160/0
  2258 ;;		Unchanged: FFE9F/0
  2259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2260 ;;      Params:         3       0       0       0       0
  2261 ;;      Locals:         3       0       0       0       0
  2262 ;;      Temps:          1       0       0       0       0
  2263 ;;      Totals:         7       0       0       0       0
  2264 ;;Total ram usage:        7 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:    1
  2267 ;; This function calls:
  2268 ;;		_Start_I2C
  2269 ;;		_Write_I2C
  2270 ;;		_Restart_I2C
  2271 ;;		_Read_I2C
  2272 ;;		_SendACK_I2C
  2273 ;;		_SendNACK_I2C
  2274 ;;		_Stop_I2C
  2275 ;; This function is called by:
  2276 ;;		_GetTime_RTC
  2277 ;;		_GetDate_RTC
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280  0E9D                     _ReadBFrom_RTC:	
  2281                           
  2282                           ; Regs used in _ReadBFrom_RTC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2283                           ;ReadBFrom_RTC@Address stored from wreg
  2284  0E9D  00F5               	movwf	ReadBFrom_RTC@Address
  2285  0E9E                     l8085:	
  2286                           
  2287                           ;DS1307.c: 86: unsigned int i;
  2288                           ;DS1307.c: 88: Start_I2C();
  2289  0E9E  27C5  120A  158A   	fcall	_Start_I2C
  2290                           
  2291                           ;DS1307.c: 91: while(Write_I2C(0xD0 + 0) == 1)
  2292  0EA1  30D0               	movlw	208
  2293  0EA2  27B7  120A  158A   	fcall	_Write_I2C
  2294  0EA5  1803               	btfsc	3,0
  2295  0EA6  2E9E               	goto	l8085
  2296                           
  2297                           ;DS1307.c: 94: }
  2298                           ;DS1307.c: 96: Write_I2C(Address);
  2299  0EA7  0875               	movf	ReadBFrom_RTC@Address,w
  2300  0EA8  27B7  120A  158A   	fcall	_Write_I2C
  2301                           
  2302                           ;DS1307.c: 97: Restart_I2C();
  2303  0EAB  27DC  120A  158A   	fcall	_Restart_I2C
  2304                           
  2305                           ;DS1307.c: 100: Write_I2C(0xD0 + 1);
  2306  0EAE  30D1               	movlw	209
  2307  0EAF  27B7  120A  158A   	fcall	_Write_I2C
  2308                           
  2309                           ;DS1307.c: 102: pData[0] = Read_I2C();
  2310  0EB2  0871               	movf	ReadBFrom_RTC@pData,w
  2311  0EB3  0084               	movwf	4
  2312  0EB4  27D4  120A  158A   	fcall	_Read_I2C
  2313  0EB7  1383               	bcf	3,7	;select IRP bank0
  2314  0EB8  0080               	movwf	0
  2315                           
  2316                           ;DS1307.c: 104: for(i=1;i<NOBytes;i++)
  2317  0EB9  01F6               	clrf	ReadBFrom_RTC@i
  2318  0EBA  0AF6               	incf	ReadBFrom_RTC@i,f
  2319  0EBB  01F7               	clrf	ReadBFrom_RTC@i+1
  2320  0EBC                     l8107:	
  2321  0EBC  0873               	movf	ReadBFrom_RTC@NOBytes+1,w
  2322  0EBD  0277               	subwf	ReadBFrom_RTC@i+1,w
  2323  0EBE  1D03               	skipz
  2324  0EBF  2EC2               	goto	u1825
  2325  0EC0  0872               	movf	ReadBFrom_RTC@NOBytes,w
  2326  0EC1  0276               	subwf	ReadBFrom_RTC@i,w
  2327  0EC2                     u1825:	
  2328  0EC2  1803               	btfsc	3,0
  2329  0EC3  2ED4               	goto	l8109
  2330                           
  2331                           ;DS1307.c: 105: {
  2332                           ;DS1307.c: 106: SendACK_I2C();
  2333  0EC4  27EA  120A  158A   	fcall	_SendACK_I2C
  2334                           
  2335                           ;DS1307.c: 107: pData[i] = Read_I2C();
  2336  0EC7  0876               	movf	ReadBFrom_RTC@i,w
  2337  0EC8  0771               	addwf	ReadBFrom_RTC@pData,w
  2338  0EC9  00F4               	movwf	??_ReadBFrom_RTC
  2339  0ECA  0874               	movf	??_ReadBFrom_RTC,w
  2340  0ECB  0084               	movwf	4
  2341  0ECC  27D4  120A  158A   	fcall	_Read_I2C
  2342  0ECF  0080               	movwf	0
  2343  0ED0  0AF6               	incf	ReadBFrom_RTC@i,f
  2344  0ED1  1903               	skipnz
  2345  0ED2  0AF7               	incf	ReadBFrom_RTC@i+1,f
  2346  0ED3  2EBC               	goto	l8107
  2347  0ED4                     l8109:	
  2348                           
  2349                           ;DS1307.c: 108: }
  2350                           ;DS1307.c: 110: SendNACK_I2C();
  2351  0ED4  27E2  120A  158A   	fcall	_SendNACK_I2C
  2352                           
  2353                           ;DS1307.c: 111: Stop_I2C();
  2354  0ED7  2FCD               	ljmp	l7791
  2355  0ED8                     __end_of_ReadBFrom_RTC:	
  2356  0ED8                     __ptext870:	
  2357 ;; =============== function _SetDate_RTC ends ============
  2358                           
  2359                           
  2360 ;; *************** function _SetTime_RTC *****************
  2361 ;; Defined at:
  2362 ;;		line 123 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\DS1307.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  Mode            1    wreg     unsigned char 
  2365 ;;  Hours           1    8[COMMON] unsigned char 
  2366 ;;  Minutes         1    9[COMMON] unsigned char 
  2367 ;;  Seconds         1   10[COMMON] unsigned char 
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;  Mode            1   13[COMMON] unsigned char 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;		None               void
  2372 ;; Registers used:
  2373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 60/0
  2376 ;;		On exit  : 60/0
  2377 ;;		Unchanged: FFE9F/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2379 ;;      Params:         3       0       0       0       0
  2380 ;;      Locals:         1       0       0       0       0
  2381 ;;      Temps:          2       0       0       0       0
  2382 ;;      Totals:         6       0       0       0       0
  2383 ;;Total ram usage:        6 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    2
  2386 ;; This function calls:
  2387 ;;		___lbmod
  2388 ;;		___lbdiv
  2389 ;;		_WriteBTo_RTC
  2390 ;; This function is called by:
  2391 ;;		_tastaApasata
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394  0ED8                     _SetTime_RTC:	
  2395                           
  2396                           ; Regs used in _SetTime_RTC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2397                           ;SetTime_RTC@Mode stored from wreg
  2398  0ED8  00FD               	movwf	SetTime_RTC@Mode
  2399                           
  2400                           ;DS1307.c: 125: RTCArray[0] = (((unsigned char)(Seconds/10))<<4)|((unsigned char)(Second
      +                          s%10));
  2401  0ED9  300A               	movlw	10
  2402  0EDA  00F0               	movwf	?___lbmod
  2403  0EDB  087A               	movf	SetTime_RTC@Seconds,w
  2404  0EDC  120A  118A  2241   	fcall	___lbmod
      +       120A  158A         
  2405  0EE1  00FB               	movwf	??_SetTime_RTC
  2406  0EE2  300A               	movlw	10
  2407  0EE3  00F0               	movwf	?___lbdiv
  2408  0EE4  087A               	movf	SetTime_RTC@Seconds,w
  2409  0EE5  120A  118A  2226   	fcall	___lbdiv
      +       120A  158A         
  2410  0EEA  00FC               	movwf	??_SetTime_RTC+1
  2411  0EEB  0E7C               	swapf	??_SetTime_RTC+1,w
  2412  0EEC  39F0               	andlw	240
  2413  0EED  047B               	iorwf	??_SetTime_RTC,w
  2414  0EEE  00E2               	movwf	_RTCArray
  2415                           
  2416                           ;DS1307.c: 126: RTCArray[1] = (((unsigned char)(Minutes/10))<<4)|((unsigned char)(Minute
      +                          s%10));
  2417  0EEF  300A               	movlw	10
  2418  0EF0  00F0               	movwf	?___lbmod
  2419  0EF1  0879               	movf	SetTime_RTC@Minutes,w
  2420  0EF2  120A  118A  2241   	fcall	___lbmod
      +       120A  158A         
  2421  0EF7  00FB               	movwf	??_SetTime_RTC
  2422  0EF8  300A               	movlw	10
  2423  0EF9  00F0               	movwf	?___lbdiv
  2424  0EFA  0879               	movf	SetTime_RTC@Minutes,w
  2425  0EFB  120A  118A  2226   	fcall	___lbdiv
      +       120A  158A         
  2426  0F00  00FC               	movwf	??_SetTime_RTC+1
  2427  0F01  0E7C               	swapf	??_SetTime_RTC+1,w
  2428  0F02  39F0               	andlw	240
  2429  0F03  047B               	iorwf	??_SetTime_RTC,w
  2430  0F04  00E3               	movwf	_RTCArray+1
  2431                           
  2432                           ;DS1307.c: 127: RTCArray[2] = (((unsigned char)(Hours/10))<<4) |((unsigned char)(Hours%1
      +                          0));
  2433  0F05  300A               	movlw	10
  2434  0F06  00F0               	movwf	?___lbmod
  2435  0F07  0878               	movf	SetTime_RTC@Hours,w
  2436  0F08  120A  118A  2241   	fcall	___lbmod
      +       120A  158A         
  2437  0F0D  00FB               	movwf	??_SetTime_RTC
  2438  0F0E  300A               	movlw	10
  2439  0F0F  00F0               	movwf	?___lbdiv
  2440  0F10  0878               	movf	SetTime_RTC@Hours,w
  2441  0F11  120A  118A  2226   	fcall	___lbdiv
      +       120A  158A         
  2442  0F16  00FC               	movwf	??_SetTime_RTC+1
  2443  0F17  0E7C               	swapf	??_SetTime_RTC+1,w
  2444  0F18  39F0               	andlw	240
  2445  0F19  047B               	iorwf	??_SetTime_RTC,w
  2446  0F1A  00E4               	movwf	_RTCArray+2
  2447                           
  2448                           ;DS1307.c: 129: switch(Mode)
  2449  0F1B  2F21               	goto	l8259
  2450  0F1C                     l2927:	
  2451                           ;DS1307.c: 130: {
  2452                           ;DS1307.c: 131: case 0: RTCArray[2] |= 0x40; break;
  2453                           
  2454  0F1C  1764               	bsf	_RTCArray+2,6
  2455  0F1D  2F29               	goto	l8261
  2456  0F1E                     l8255:	
  2457  0F1E  3060               	movlw	96
  2458  0F1F  04E4               	iorwf	_RTCArray+2,f
  2459  0F20  2F29               	goto	l8261
  2460  0F21                     l8259:	
  2461  0F21  087D               	movf	SetTime_RTC@Mode,w
  2462                           
  2463                           ; Switch size 1, requested type "space"
  2464                           ; Number of cases is 2, Range of values is 0 to 1
  2465                           ; switch strategies available:
  2466                           ; Name         Instructions Cycles
  2467                           ; simple_byte            7     4 (average)
  2468                           ; direct_byte           14     8 (fixed)
  2469                           ; jumptable            260     6 (fixed)
  2470                           ; rangetable             6     6 (fixed)
  2471                           ; spacedrange           10     9 (fixed)
  2472                           ; locatedrange           2     3 (fixed)
  2473                           ;	Chosen strategy is simple_byte
  2474  0F22  3A00               	xorlw	0	; case 0
  2475  0F23  1903               	skipnz
  2476  0F24  2F1C               	goto	l2927
  2477  0F25  3A01               	xorlw	1	; case 1
  2478  0F26  1903               	skipnz
  2479  0F27  2F1E               	goto	l8255
  2480  0F28  2F29               	goto	l8261
  2481  0F29                     l8261:	
  2482                           
  2483                           ;DS1307.c: 138: WriteBTo_RTC(0x00, RTCArray, 3);
  2484  0F29  3062               	movlw	_RTCArray& (0+255)
  2485  0F2A  00F1               	movwf	?_WriteBTo_RTC
  2486  0F2B  3003               	movlw	3
  2487  0F2C  00F2               	movwf	?_WriteBTo_RTC+1
  2488  0F2D  3000               	movlw	0
  2489  0F2E  2F8E               	ljmp	_WriteBTo_RTC
  2490  0F2F                     __end_of_SetTime_RTC:	
  2491  0F2F                     __ptext869:	
  2492 ;; =============== function _GetDate_RTC ends ============
  2493                           
  2494                           
  2495 ;; *************** function _SetDate_RTC *****************
  2496 ;; Defined at:
  2497 ;;		line 188 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\DS1307.c"
  2498 ;; Parameters:    Size  Location     Type
  2499 ;;  Date            1    wreg     unsigned char 
  2500 ;;  Month           1    8[COMMON] unsigned char 
  2501 ;;  Year            1    9[COMMON] unsigned char 
  2502 ;;  Day             1   10[COMMON] unsigned char 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  Date            1   13[COMMON] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;		None               void
  2507 ;; Registers used:
  2508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 60/0
  2511 ;;		On exit  : 60/0
  2512 ;;		Unchanged: FFE9F/0
  2513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2514 ;;      Params:         3       0       0       0       0
  2515 ;;      Locals:         1       0       0       0       0
  2516 ;;      Temps:          2       0       0       0       0
  2517 ;;      Totals:         6       0       0       0       0
  2518 ;;Total ram usage:        6 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    2
  2521 ;; This function calls:
  2522 ;;		___lbmod
  2523 ;;		___lbdiv
  2524 ;;		_WriteBTo_RTC
  2525 ;; This function is called by:
  2526 ;;		_tastaApasata
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529  0F2F                     _SetDate_RTC:	
  2530                           
  2531                           ; Regs used in _SetDate_RTC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2532                           ;SetDate_RTC@Date stored from wreg
  2533  0F2F  00FD               	movwf	SetDate_RTC@Date
  2534                           
  2535                           ;DS1307.c: 190: RTCArray[0] = (((unsigned char)(Day/10))<<4)|((unsigned char)(Day%10));
  2536  0F30  300A               	movlw	10
  2537  0F31  00F0               	movwf	?___lbmod
  2538  0F32  087A               	movf	SetDate_RTC@Day,w
  2539  0F33  120A  118A  2241   	fcall	___lbmod
      +       120A  158A         
  2540  0F38  00FB               	movwf	??_SetDate_RTC
  2541  0F39  300A               	movlw	10
  2542  0F3A  00F0               	movwf	?___lbdiv
  2543  0F3B  087A               	movf	SetDate_RTC@Day,w
  2544  0F3C  120A  118A  2226   	fcall	___lbdiv
      +       120A  158A         
  2545  0F41  00FC               	movwf	??_SetDate_RTC+1
  2546  0F42  0E7C               	swapf	??_SetDate_RTC+1,w
  2547  0F43  39F0               	andlw	240
  2548  0F44  047B               	iorwf	??_SetDate_RTC,w
  2549  0F45  00E2               	movwf	_RTCArray
  2550                           
  2551                           ;DS1307.c: 191: RTCArray[1] = (((unsigned char)(Date/10))<<4)|((unsigned char)(Date%10));
  2552  0F46  300A               	movlw	10
  2553  0F47  00F0               	movwf	?___lbmod
  2554  0F48  087D               	movf	SetDate_RTC@Date,w
  2555  0F49  120A  118A  2241   	fcall	___lbmod
      +       120A  158A         
  2556  0F4E  00FB               	movwf	??_SetDate_RTC
  2557  0F4F  300A               	movlw	10
  2558  0F50  00F0               	movwf	?___lbdiv
  2559  0F51  087D               	movf	SetDate_RTC@Date,w
  2560  0F52  120A  118A  2226   	fcall	___lbdiv
      +       120A  158A         
  2561  0F57  00FC               	movwf	??_SetDate_RTC+1
  2562  0F58  0E7C               	swapf	??_SetDate_RTC+1,w
  2563  0F59  39F0               	andlw	240
  2564  0F5A  047B               	iorwf	??_SetDate_RTC,w
  2565  0F5B  00E3               	movwf	_RTCArray+1
  2566                           
  2567                           ;DS1307.c: 192: RTCArray[2] = (((unsigned char)(Month/10))<<4)|((unsigned char)(Month%10
      +                          ));
  2568  0F5C  300A               	movlw	10
  2569  0F5D  00F0               	movwf	?___lbmod
  2570  0F5E  0878               	movf	SetDate_RTC@Month,w
  2571  0F5F  120A  118A  2241   	fcall	___lbmod
      +       120A  158A         
  2572  0F64  00FB               	movwf	??_SetDate_RTC
  2573  0F65  300A               	movlw	10
  2574  0F66  00F0               	movwf	?___lbdiv
  2575  0F67  0878               	movf	SetDate_RTC@Month,w
  2576  0F68  120A  118A  2226   	fcall	___lbdiv
      +       120A  158A         
  2577  0F6D  00FC               	movwf	??_SetDate_RTC+1
  2578  0F6E  0E7C               	swapf	??_SetDate_RTC+1,w
  2579  0F6F  39F0               	andlw	240
  2580  0F70  047B               	iorwf	??_SetDate_RTC,w
  2581  0F71  00E4               	movwf	_RTCArray+2
  2582                           
  2583                           ;DS1307.c: 193: RTCArray[3] = (((unsigned char)(Year/10))<<4)|((unsigned char)(Year%10));
  2584  0F72  300A               	movlw	10
  2585  0F73  00F0               	movwf	?___lbmod
  2586  0F74  0879               	movf	SetDate_RTC@Year,w
  2587  0F75  120A  118A  2241   	fcall	___lbmod
      +       120A  158A         
  2588  0F7A  00FB               	movwf	??_SetDate_RTC
  2589  0F7B  300A               	movlw	10
  2590  0F7C  00F0               	movwf	?___lbdiv
  2591  0F7D  0879               	movf	SetDate_RTC@Year,w
  2592  0F7E  120A  118A  2226   	fcall	___lbdiv
      +       120A  158A         
  2593  0F83  00FC               	movwf	??_SetDate_RTC+1
  2594  0F84  0E7C               	swapf	??_SetDate_RTC+1,w
  2595  0F85  39F0               	andlw	240
  2596  0F86  047B               	iorwf	??_SetDate_RTC,w
  2597  0F87  00E5               	movwf	_RTCArray+3
  2598                           
  2599                           ;DS1307.c: 196: WriteBTo_RTC(0x03, RTCArray, 4);
  2600  0F88  3062               	movlw	_RTCArray& (0+255)
  2601  0F89  00F1               	movwf	?_WriteBTo_RTC
  2602  0F8A  3004               	movlw	4
  2603  0F8B  00F2               	movwf	?_WriteBTo_RTC+1
  2604  0F8C  3003               	movlw	3
  2605  0F8D  2F8E               	ljmp	_WriteBTo_RTC
  2606  0F8E                     __end_of_SetDate_RTC:	
  2607  0F8E                     __ptext877:	
  2608 ;; =============== function _ReadBFrom_RTC ends ============
  2609                           
  2610                           
  2611 ;; *************** function _WriteBTo_RTC *****************
  2612 ;; Defined at:
  2613 ;;		line 61 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\DS1307.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  Address         1    wreg     unsigned char 
  2616 ;;  pData           1    1[COMMON] PTR unsigned char 
  2617 ;;		 -> RTCArray(4), 
  2618 ;;  NOBytes         1    2[COMMON] unsigned char 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  Address         1    5[COMMON] unsigned char 
  2621 ;;  i               2    6[COMMON] unsigned int 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;		None               void
  2624 ;; Registers used:
  2625 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 60/0
  2628 ;;		On exit  : 60/0
  2629 ;;		Unchanged: FFE9F/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2631 ;;      Params:         2       0       0       0       0
  2632 ;;      Locals:         3       0       0       0       0
  2633 ;;      Temps:          2       0       0       0       0
  2634 ;;      Totals:         7       0       0       0       0
  2635 ;;Total ram usage:        7 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    1
  2638 ;; This function calls:
  2639 ;;		_Start_I2C
  2640 ;;		_Write_I2C
  2641 ;;		_Stop_I2C
  2642 ;; This function is called by:
  2643 ;;		_SetTime_RTC
  2644 ;;		_SetDate_RTC
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647  0F8E                     _WriteBTo_RTC:	
  2648                           
  2649                           ; Regs used in _WriteBTo_RTC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2650                           ;WriteBTo_RTC@Address stored from wreg
  2651  0F8E  00F5               	movwf	WriteBTo_RTC@Address
  2652  0F8F                     l8067:	
  2653                           
  2654                           ;DS1307.c: 62: unsigned int i;
  2655                           ;DS1307.c: 64: Start_I2C();
  2656  0F8F  27C5  120A  158A   	fcall	_Start_I2C
  2657                           
  2658                           ;DS1307.c: 67: while(Write_I2C(0xD0 + 0) == 1)
  2659  0F92  30D0               	movlw	208
  2660  0F93  27B7  120A  158A   	fcall	_Write_I2C
  2661  0F96  1803               	btfsc	3,0
  2662  0F97  2F8F               	goto	l8067
  2663                           
  2664                           ;DS1307.c: 70: }
  2665                           ;DS1307.c: 72: Write_I2C(Address);
  2666  0F98  0875               	movf	WriteBTo_RTC@Address,w
  2667  0F99  27B7  120A  158A   	fcall	_Write_I2C
  2668                           
  2669                           ;DS1307.c: 74: for(i=0;i<NOBytes;i++)
  2670  0F9C  01F6               	clrf	WriteBTo_RTC@i
  2671  0F9D  01F7               	clrf	WriteBTo_RTC@i+1
  2672  0F9E                     l8081:	
  2673  0F9E  0872               	movf	WriteBTo_RTC@NOBytes,w
  2674  0F9F  00F3               	movwf	??_WriteBTo_RTC
  2675  0FA0  01F4               	clrf	??_WriteBTo_RTC+1
  2676  0FA1  0874               	movf	??_WriteBTo_RTC+1,w
  2677  0FA2  0277               	subwf	WriteBTo_RTC@i+1,w
  2678  0FA3  1D03               	skipz
  2679  0FA4  2FA7               	goto	u1805
  2680  0FA5  0873               	movf	??_WriteBTo_RTC,w
  2681  0FA6  0276               	subwf	WriteBTo_RTC@i,w
  2682  0FA7                     u1805:	
  2683  0FA7  1803               	btfsc	3,0
  2684  0FA8  2FB6               	goto	l8083
  2685                           
  2686                           ;DS1307.c: 75: Write_I2C(pData[i]);
  2687  0FA9  0876               	movf	WriteBTo_RTC@i,w
  2688  0FAA  0771               	addwf	WriteBTo_RTC@pData,w
  2689  0FAB  00F3               	movwf	??_WriteBTo_RTC
  2690  0FAC  0084               	movwf	4
  2691  0FAD  1383               	bcf	3,7	;select IRP bank0
  2692  0FAE  0800               	movf	0,w
  2693  0FAF  27B7  120A  158A   	fcall	_Write_I2C
  2694  0FB2  0AF6               	incf	WriteBTo_RTC@i,f
  2695  0FB3  1903               	skipnz
  2696  0FB4  0AF7               	incf	WriteBTo_RTC@i+1,f
  2697  0FB5  2F9E               	goto	l8081
  2698  0FB6                     l8083:	
  2699                           
  2700                           ;DS1307.c: 77: Stop_I2C();
  2701  0FB6  2FCD               	ljmp	l7791
  2702  0FB7                     __end_of_WriteBTo_RTC:	
  2703  0FB7                     __ptext892:	
  2704 ;; =============== function _Stop_I2C ends ============
  2705                           
  2706                           
  2707 ;; *************** function _Write_I2C *****************
  2708 ;; Defined at:
  2709 ;;		line 65 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\I2C.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  Byte            1    wreg     unsigned char 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;  Byte            1    0[COMMON] unsigned char 
  2714 ;; Return value:  Size  Location     Type
  2715 ;;		None               void
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0
  2718 ;; Tracked objects:
  2719 ;;		On entry : 40/0
  2720 ;;		On exit  : 60/20
  2721 ;;		Unchanged: FFF9F/0
  2722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2723 ;;      Params:         0       0       0       0       0
  2724 ;;      Locals:         1       0       0       0       0
  2725 ;;      Temps:          0       0       0       0       0
  2726 ;;      Totals:         1       0       0       0       0
  2727 ;;Total ram usage:        1 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; This function calls:
  2730 ;;		Nothing
  2731 ;; This function is called by:
  2732 ;;		_WriteBTo_RTC
  2733 ;;		_ReadBFrom_RTC
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736  0FB7                     _Write_I2C:	
  2737                           
  2738                           ; Regs used in _Write_I2C: [wreg+status,2+status,0]
  2739                           ;Write_I2C@Byte stored from wreg
  2740  0FB7  00F0               	movwf	Write_I2C@Byte
  2741                           
  2742                           ;I2C.c: 66: SSPBUF = Byte;
  2743  0FB8  0870               	movf	Write_I2C@Byte,w
  2744  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  2745  0FBA  0093               	movwf	19	;volatile
  2746  0FBB                     l3618:	
  2747                           ;I2C.c: 67: while(!SSPIF);
  2748                           
  2749  0FBB  1D8C               	btfss	12,3
  2750  0FBC  2FBB               	goto	l3618
  2751                           
  2752                           ;I2C.c: 68: SSPIF = 0;
  2753  0FBD  118C               	bcf	12,3
  2754                           
  2755                           ;I2C.c: 70: return ACKSTAT;
  2756  0FBE  1683               	bsf	3,5	;RP0=1, select bank1
  2757  0FBF  1B11               	btfsc	17,6
  2758  0FC0  2FC3               	goto	l7787
  2759  0FC1  1003               	clrc
  2760  0FC2  0008               	return
  2761  0FC3                     l7787:	
  2762  0FC3  1403               	setc
  2763  0FC4  0008               	return
  2764  0FC5                     __end_of_Write_I2C:	
  2765  0FC5                     __ptext893:	
  2766 ;; =============== function _Write_I2C ends ============
  2767                           
  2768                           
  2769 ;; *************** function _Start_I2C *****************
  2770 ;; Defined at:
  2771 ;;		line 19 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\I2C.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;		None               void
  2778 ;; Registers used:
  2779 ;;		None
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 60/0
  2783 ;;		Unchanged: FFF9F/0
  2784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2785 ;;      Params:         0       0       0       0       0
  2786 ;;      Locals:         0       0       0       0       0
  2787 ;;      Temps:          0       0       0       0       0
  2788 ;;      Totals:         0       0       0       0       0
  2789 ;;Total ram usage:        0 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; This function calls:
  2792 ;;		Nothing
  2793 ;; This function is called by:
  2794 ;;		_WriteBTo_RTC
  2795 ;;		_ReadBFrom_RTC
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798  0FC5                     _Start_I2C:	
  2799                           
  2800                           ;I2C.c: 20: SEN = 1;
  2801                           
  2802                           ; Regs used in _Start_I2C: []
  2803  0FC5  1683               	bsf	3,5	;RP0=1, select bank1
  2804  0FC6  1303               	bcf	3,6	;RP1=0, select bank1
  2805  0FC7  1411               	bsf	17,0
  2806  0FC8                     l3588:	
  2807                           ;I2C.c: 21: while(!SSPIF);
  2808                           
  2809  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  2810  0FC9  1D8C               	btfss	12,3
  2811  0FCA  2FC8               	goto	l3588
  2812                           
  2813                           ;I2C.c: 22: SSPIF = 0;
  2814  0FCB  118C               	bcf	12,3
  2815  0FCC  0008               	return
  2816  0FCD                     __end_of_Start_I2C:	
  2817  0FCD                     __ptext891:	
  2818 ;; =============== function _Restart_I2C ends ============
  2819                           
  2820                           
  2821 ;; *************** function _Stop_I2C *****************
  2822 ;; Defined at:
  2823 ;;		line 36 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\I2C.c"
  2824 ;; Parameters:    Size  Location     Type
  2825 ;;		None
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;		None
  2828 ;; Return value:  Size  Location     Type
  2829 ;;		None               void
  2830 ;; Registers used:
  2831 ;;		None
  2832 ;; Tracked objects:
  2833 ;;		On entry : 40/0
  2834 ;;		On exit  : 60/0
  2835 ;;		Unchanged: FFF9F/0
  2836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2837 ;;      Params:         0       0       0       0       0
  2838 ;;      Locals:         0       0       0       0       0
  2839 ;;      Temps:          0       0       0       0       0
  2840 ;;      Totals:         0       0       0       0       0
  2841 ;;Total ram usage:        0 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; This function calls:
  2844 ;;		Nothing
  2845 ;; This function is called by:
  2846 ;;		_WriteBTo_RTC
  2847 ;;		_ReadBFrom_RTC
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850  0FCD                     _Stop_I2C:	
  2851  0FCD                     l7791:	
  2852                           ; Regs used in _Stop_I2C: []
  2853                           
  2854                           
  2855                           ;I2C.c: 37: PEN = 1;
  2856  0FCD  1683               	bsf	3,5	;RP0=1, select bank1
  2857  0FCE  1511               	bsf	17,2
  2858  0FCF                     l3600:	
  2859                           ;I2C.c: 38: while(!SSPIF);
  2860                           
  2861  0FCF  1283               	bcf	3,5	;RP0=0, select bank0
  2862  0FD0  1D8C               	btfss	12,3
  2863  0FD1  2FCF               	goto	l3600
  2864                           
  2865                           ;I2C.c: 39: SSPIF = 0;
  2866  0FD2  118C               	bcf	12,3
  2867  0FD3  0008               	return
  2868  0FD4                     __end_of_Stop_I2C:	
  2869  0FD4                     __ptext889:	
  2870 ;; =============== function _SendNACK_I2C ends ============
  2871                           
  2872                           
  2873 ;; *************** function _Read_I2C *****************
  2874 ;; Defined at:
  2875 ;;		line 76 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\I2C.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;		None
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;		None
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      unsigned char 
  2882 ;; Registers used:
  2883 ;;		wreg
  2884 ;; Tracked objects:
  2885 ;;		On entry : 40/20
  2886 ;;		On exit  : 60/0
  2887 ;;		Unchanged: FFF9F/0
  2888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2889 ;;      Params:         0       0       0       0       0
  2890 ;;      Locals:         0       0       0       0       0
  2891 ;;      Temps:          0       0       0       0       0
  2892 ;;      Totals:         0       0       0       0       0
  2893 ;;Total ram usage:        0 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; This function calls:
  2896 ;;		Nothing
  2897 ;; This function is called by:
  2898 ;;		_ReadBFrom_RTC
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901  0FD4                     _Read_I2C:	
  2902                           
  2903                           ;I2C.c: 77: RCEN = 1;
  2904                           
  2905                           ; Regs used in _Read_I2C: [wreg]
  2906  0FD4  1683               	bsf	3,5	;RP0=1, select bank1
  2907  0FD5  1591               	bsf	17,3
  2908  0FD6                     l3624:	
  2909                           ;I2C.c: 78: while(!SSPIF);
  2910                           
  2911  0FD6  1283               	bcf	3,5	;RP0=0, select bank0
  2912  0FD7  1D8C               	btfss	12,3
  2913  0FD8  2FD6               	goto	l3624
  2914                           
  2915                           ;I2C.c: 79: SSPIF = 0;
  2916  0FD9  118C               	bcf	12,3
  2917                           
  2918                           ;I2C.c: 81: return SSPBUF;
  2919  0FDA  0813               	movf	19,w	;volatile
  2920  0FDB  0008               	return
  2921  0FDC                     __end_of_Read_I2C:	
  2922  0FDC                     __ptext890:	
  2923 ;; =============== function _Read_I2C ends ============
  2924                           
  2925                           
  2926 ;; *************** function _Restart_I2C *****************
  2927 ;; Defined at:
  2928 ;;		line 27 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\I2C.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;		None
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;		None               void
  2935 ;; Registers used:
  2936 ;;		None
  2937 ;; Tracked objects:
  2938 ;;		On entry : 60/20
  2939 ;;		On exit  : 60/0
  2940 ;;		Unchanged: FFF9F/0
  2941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2942 ;;      Params:         0       0       0       0       0
  2943 ;;      Locals:         0       0       0       0       0
  2944 ;;      Temps:          0       0       0       0       0
  2945 ;;      Totals:         0       0       0       0       0
  2946 ;;Total ram usage:        0 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; This function calls:
  2949 ;;		Nothing
  2950 ;; This function is called by:
  2951 ;;		_ReadBFrom_RTC
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954  0FDC                     _Restart_I2C:	
  2955                           
  2956                           ;I2C.c: 28: RSEN = 1;
  2957                           
  2958                           ; Regs used in _Restart_I2C: []
  2959  0FDC  1491               	bsf	17,1
  2960  0FDD                     l3594:	
  2961                           ;I2C.c: 29: while(!SSPIF);
  2962                           
  2963  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  2964  0FDE  1D8C               	btfss	12,3
  2965  0FDF  2FDD               	goto	l3594
  2966                           
  2967                           ;I2C.c: 30: SSPIF = 0;
  2968  0FE0  118C               	bcf	12,3
  2969  0FE1  0008               	return
  2970  0FE2                     __end_of_Restart_I2C:	
  2971  0FE2                     __ptext888:	
  2972 ;; =============== function _SendACK_I2C ends ============
  2973                           
  2974                           
  2975 ;; *************** function _SendNACK_I2C *****************
  2976 ;; Defined at:
  2977 ;;		line 55 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\I2C.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;		None
  2982 ;; Return value:  Size  Location     Type
  2983 ;;		None               void
  2984 ;; Registers used:
  2985 ;;		None
  2986 ;; Tracked objects:
  2987 ;;		On entry : 160/0
  2988 ;;		On exit  : 160/0
  2989 ;;		Unchanged: FFE9F/0
  2990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2991 ;;      Params:         0       0       0       0       0
  2992 ;;      Locals:         0       0       0       0       0
  2993 ;;      Temps:          0       0       0       0       0
  2994 ;;      Totals:         0       0       0       0       0
  2995 ;;Total ram usage:        0 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; This function calls:
  2998 ;;		Nothing
  2999 ;; This function is called by:
  3000 ;;		_ReadBFrom_RTC
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003  0FE2                     _SendNACK_I2C:	
  3004                           
  3005                           ;I2C.c: 56: ACKDT = 1;
  3006                           
  3007                           ; Regs used in _SendNACK_I2C: []
  3008  0FE2  1683               	bsf	3,5	;RP0=1, select bank1
  3009  0FE3  1691               	bsf	17,5
  3010                           
  3011                           ;I2C.c: 57: ACKEN = 1;
  3012  0FE4  1611               	bsf	17,4
  3013  0FE5                     l3612:	
  3014                           ;I2C.c: 58: while(!SSPIF);
  3015                           
  3016  0FE5  1283               	bcf	3,5	;RP0=0, select bank0
  3017  0FE6  1D8C               	btfss	12,3
  3018  0FE7  2FE5               	goto	l3612
  3019                           
  3020                           ;I2C.c: 59: SSPIF = 0;
  3021  0FE8  118C               	bcf	12,3
  3022  0FE9  0008               	return
  3023  0FEA                     __end_of_SendNACK_I2C:	
  3024  0FEA                     __ptext887:	
  3025 ;; =============== function ___bmul ends ============
  3026                           
  3027                           
  3028 ;; *************** function _SendACK_I2C *****************
  3029 ;; Defined at:
  3030 ;;		line 45 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\I2C.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;		None
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;		None
  3035 ;; Return value:  Size  Location     Type
  3036 ;;		None               void
  3037 ;; Registers used:
  3038 ;;		None
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 60/0
  3042 ;;		Unchanged: FFF9F/0
  3043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3044 ;;      Params:         0       0       0       0       0
  3045 ;;      Locals:         0       0       0       0       0
  3046 ;;      Temps:          0       0       0       0       0
  3047 ;;      Totals:         0       0       0       0       0
  3048 ;;Total ram usage:        0 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; This function calls:
  3051 ;;		Nothing
  3052 ;; This function is called by:
  3053 ;;		_ReadBFrom_RTC
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056  0FEA                     _SendACK_I2C:	
  3057                           
  3058                           ;I2C.c: 46: ACKDT = 0;
  3059                           
  3060                           ; Regs used in _SendACK_I2C: []
  3061  0FEA  1683               	bsf	3,5	;RP0=1, select bank1
  3062  0FEB  1303               	bcf	3,6	;RP1=0, select bank1
  3063  0FEC  1291               	bcf	17,5
  3064                           
  3065                           ;I2C.c: 47: ACKEN = 1;
  3066  0FED  1611               	bsf	17,4
  3067  0FEE                     l3606:	
  3068                           ;I2C.c: 48: while(!SSPIF);
  3069                           
  3070  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  3071  0FEF  1D8C               	btfss	12,3
  3072  0FF0  2FEE               	goto	l3606
  3073                           
  3074                           ;I2C.c: 49: SSPIF = 0;
  3075  0FF1  118C               	bcf	12,3
  3076  0FF2  0008               	return
  3077  0FF3                     __end_of_SendACK_I2C:	
  3078  0FF3                     PL12:	
  3079  0FF3  0864               	movf	_RTCArray+2,w
  3080  0FF4  00DF               	movwf	_Temp
  3081  0FF5  300A               	movlw	10
  3082  0FF6  00F0               	movwf	?___bmul
  3083  0FF7  0E5F               	swapf	_Temp,w
  3084  0FF8  390F               	andlw	15
  3085  0FF9  0008               	return
  3086  0FFA                     PL15:	
  3087  0FFA  00DF               	movwf	_Temp
  3088  0FFB  300A               	movlw	10
  3089  0FFC  00F0               	movwf	?___bmul
  3090  0FFD  0E5F               	swapf	_Temp,w
  3091  0FFE  390F               	andlw	15
  3092  0FFF  0008               	return
  3093                           
  3094                           	psect	text860
  3095  0AC0                     __ptext860:	
  3096 ;; =============== function _detectieIncendiu ends ============
  3097                           
  3098                           
  3099 ;; *************** function _test *****************
  3100 ;; Defined at:
  3101 ;;		line 108 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\Main.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;  message         1    wreg     PTR const unsigned char 
  3104 ;;		 -> STR_21(8), STR_20(11), STR_19(19), 
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  message         1    9[COMMON] PTR const unsigned char 
  3107 ;;		 -> STR_21(8), STR_20(11), STR_19(19), 
  3108 ;;  count2          2    7[COMMON] unsigned int 
  3109 ;;  count           2    5[COMMON] unsigned int 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;		None               void
  3112 ;; Registers used:
  3113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3114 ;; Tracked objects:
  3115 ;;		On entry : 60/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3119 ;;      Params:         0       0       0       0       0
  3120 ;;      Locals:         5       0       0       0       0
  3121 ;;      Temps:          0       0       0       0       0
  3122 ;;      Totals:         5       0       0       0       0
  3123 ;;Total ram usage:        5 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    3
  3126 ;; This function calls:
  3127 ;;		_clearScreen
  3128 ;;		_writeString
  3129 ;; This function is called by:
  3130 ;;		_detectieIncendiu
  3131 ;;		_verificareOreSonerie
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134  0AC0                     _test:	
  3135                           
  3136                           ; Regs used in _test: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3137                           ;test@message stored from wreg
  3138  0AC0  00F9               	movwf	test@message
  3139                           
  3140                           ;Main.c: 109: apasat = 20;
  3141  0AC1  3014               	movlw	20
  3142  0AC2  00E6               	movwf	_apasat
  3143  0AC3  01E7               	clrf	_apasat+1
  3144                           
  3145                           ;Main.c: 110: clearScreen();
  3146  0AC4  120A  118A  26EB   	fcall	_clearScreen
      +       120A  158A         
  3147                           
  3148                           ;Main.c: 111: writeString(message);
  3149  0AC9  0879               	movf	test@message,w
  3150  0ACA  120A  118A  26FB   	fcall	_writeString
      +       120A  158A         
  3151                           
  3152                           ;Main.c: 113: unsigned int count = 10000;
  3153  0ACF  3010               	movlw	16
  3154  0AD0  00F5               	movwf	test@count
  3155  0AD1  3027               	movlw	39
  3156  0AD2  00F6               	movwf	test@count+1
  3157  0AD3                     l8621:	
  3158                           ;Main.c: 114: while(count--)
  3159                           
  3160  0AD3  3001               	movlw	1
  3161  0AD4  02F5               	subwf	test@count,f
  3162  0AD5  3000               	movlw	0
  3163  0AD6  1C03               	skipc
  3164  0AD7  03F6               	decf	test@count+1,f
  3165  0AD8  02F6               	subwf	test@count+1,f
  3166  0AD9  0A75               	incf	test@count,w
  3167  0ADA  1903               	skipnz
  3168  0ADB  0A76               	incf	test@count+1,w
  3169  0ADC  1903               	btfsc	3,2
  3170  0ADD  0008               	return
  3171                           
  3172                           ;Main.c: 115: {
  3173                           ;Main.c: 116: unsigned int count2 = 100;
  3174  0ADE  3064               	movlw	100
  3175  0ADF  00F7               	movwf	test@count2
  3176  0AE0  01F8               	clrf	test@count2+1
  3177  0AE1                     l8619:	
  3178                           ;Main.c: 117: while(count2--);
  3179                           
  3180  0AE1  3001               	movlw	1
  3181  0AE2  02F7               	subwf	test@count2,f
  3182  0AE3  1C03               	skipc
  3183  0AE4  03F8               	decf	test@count2+1,f
  3184  0AE5  0A77               	incf	test@count2,w
  3185  0AE6  1903               	skipnz
  3186  0AE7  0A78               	incf	test@count2+1,w
  3187  0AE8  1903               	btfsc	3,2
  3188  0AE9  2AD3               	goto	l8621
  3189  0AEA  2AE1               	goto	l8619
  3190  0AEB                     __end_of_test:	
  3191                           
  3192                           	psect	text862
  3193  002A                     __ptext862:	
  3194 ;; =============== function _tastaApasata ends ============
  3195                           
  3196                           
  3197 ;; *************** function _DisplayDateOnLCD *****************
  3198 ;; Defined at:
  3199 ;;		line 143 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\LCD.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;  pDateArray      1    wreg     PTR unsigned char 
  3202 ;;		 -> RTCArray(4), 
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;  pDateArray      1    5[COMMON] PTR unsigned char 
  3205 ;;		 -> RTCArray(4), 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;		None               void
  3208 ;; Registers used:
  3209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3210 ;; Tracked objects:
  3211 ;;		On entry : 160/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3215 ;;      Params:         0       0       0       0       0
  3216 ;;      Locals:         1       0       0       0       0
  3217 ;;      Temps:          0       0       0       0       0
  3218 ;;      Totals:         1       0       0       0       0
  3219 ;;Total ram usage:        1 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    3
  3222 ;; This function calls:
  3223 ;;		_writeCommand
  3224 ;;		___lbdiv
  3225 ;;		_writeChar
  3226 ;;		___lbmod
  3227 ;;		_writeString
  3228 ;; This function is called by:
  3229 ;;		_afiareDefault
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232  002A                     _DisplayDateOnLCD:	
  3233                           
  3234                           ; Regs used in _DisplayDateOnLCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3235                           ;DisplayDateOnLCD@pDateArray stored from wreg
  3236  002A  00F5               	movwf	DisplayDateOnLCD@pDateArray
  3237                           
  3238                           ;LCD.c: 144: writeCommand(0xc0);
  3239  002B  30C0               	movlw	192
  3240  002C  120A  158A  23ED   	fcall	_writeCommand
      +       120A  118A         
  3241                           
  3242                           ;LCD.c: 147: writeChar( (pDateArray[1]/10)+0x30 );
  3243  0031  300A               	movlw	10
  3244  0032  00F0               	movwf	?___lbdiv
  3245  0033  27D2  120A  118A   	fcall	PL25	;call to abstracted procedure
  3246  0036  2226  120A  118A   	fcall	___lbdiv
  3247  0039  3E30               	addlw	48
  3248  003A  26D5  120A  118A   	fcall	_writeChar
  3249                           
  3250                           ;LCD.c: 148: writeChar( (pDateArray[1]%10)+0x30 );
  3251  003D  300A               	movlw	10
  3252  003E  00F0               	movwf	?___lbmod
  3253  003F  27D2  120A  118A   	fcall	PL25	;call to abstracted procedure
  3254  0042  2241  120A  118A   	fcall	___lbmod
  3255  0045  3E30               	addlw	48
  3256  0046  26D5  120A  118A   	fcall	_writeChar
  3257                           
  3258                           ;LCD.c: 151: writeChar('/');
  3259  0049  302F               	movlw	47
  3260  004A  26D5  120A  118A   	fcall	_writeChar
  3261                           
  3262                           ;LCD.c: 154: writeChar( (pDateArray[2]/10)+0x30 );
  3263  004D  300A               	movlw	10
  3264  004E  00F0               	movwf	?___lbdiv
  3265  004F  27CC  120A  118A   	fcall	PL24	;call to abstracted procedure
  3266  0052  2226  120A  118A   	fcall	___lbdiv
  3267  0055  3E30               	addlw	48
  3268  0056  26D5  120A  118A   	fcall	_writeChar
  3269                           
  3270                           ;LCD.c: 155: writeChar( (pDateArray[2]%10)+0x30 );
  3271  0059  300A               	movlw	10
  3272  005A  00F0               	movwf	?___lbmod
  3273  005B  27CC  120A  118A   	fcall	PL24	;call to abstracted procedure
  3274  005E  2241  120A  118A   	fcall	___lbmod
  3275  0061  3E30               	addlw	48
  3276  0062  26D5  120A  118A   	fcall	_writeChar
  3277                           
  3278                           ;LCD.c: 158: writeChar('/');
  3279  0065  302F               	movlw	47
  3280  0066  26D5  120A  118A   	fcall	_writeChar
  3281                           
  3282                           ;LCD.c: 161: writeChar( (pDateArray[3]/10)+0x30 );
  3283  0069  300A               	movlw	10
  3284  006A  00F0               	movwf	?___lbdiv
  3285  006B  27C6  120A  118A   	fcall	PL23	;call to abstracted procedure
  3286  006E  2226  120A  118A   	fcall	___lbdiv
  3287  0071  3E30               	addlw	48
  3288  0072  26D5  120A  118A   	fcall	_writeChar
  3289                           
  3290                           ;LCD.c: 162: writeChar( (pDateArray[3]%10)+0x30 );
  3291  0075  300A               	movlw	10
  3292  0076  00F0               	movwf	?___lbmod
  3293  0077  27C6  120A  118A   	fcall	PL23	;call to abstracted procedure
  3294  007A  2241  120A  118A   	fcall	___lbmod
  3295  007D  3E30               	addlw	48
  3296  007E  26D5  120A  118A   	fcall	_writeChar
  3297                           
  3298                           ;LCD.c: 165: writeChar(' ');
  3299  0081  3020               	movlw	32
  3300  0082  26D5  120A  118A   	fcall	_writeChar
  3301                           
  3302                           ;LCD.c: 168: switch(pDateArray[0])
  3303  0085  0875               	movf	DisplayDateOnLCD@pDateArray,w
  3304  0086  0084               	movwf	4
  3305  0087  1383               	bcf	3,7	;select IRP bank0
  3306  0088  0800               	movf	0,w
  3307                           
  3308                           ; Switch size 1, requested type "space"
  3309                           ; Number of cases is 7, Range of values is 1 to 7
  3310                           ; switch strategies available:
  3311                           ; Name         Instructions Cycles
  3312                           ; simple_byte           22    12 (average)
  3313                           ; direct_byte           32    11 (fixed)
  3314                           ; jumptable            263     9 (fixed)
  3315                           ;	Chosen strategy is simple_byte
  3316  0089  3A01               	xorlw	1	; case 1
  3317  008A  1903               	skipnz
  3318  008B  28A0               	goto	l8385
  3319  008C  3A03               	xorlw	3	; case 2
  3320  008D  1903               	skipnz
  3321  008E  28A2               	goto	l8387
  3322  008F  3A01               	xorlw	1	; case 3
  3323  0090  1903               	skipnz
  3324  0091  28A4               	goto	l8389
  3325  0092  3A07               	xorlw	7	; case 4
  3326  0093  1903               	skipnz
  3327  0094  28A6               	goto	l8391
  3328  0095  3A01               	xorlw	1	; case 5
  3329  0096  1903               	skipnz
  3330  0097  28A8               	goto	l8393
  3331  0098  3A03               	xorlw	3	; case 6
  3332  0099  1903               	skipnz
  3333  009A  28AA               	goto	l8395
  3334  009B  3A01               	xorlw	1	; case 7
  3335  009C  1903               	skipnz
  3336  009D  28AC               	goto	l8397
  3337  009E  28AE               	goto	l8399
  3338  009F  0008               	return
  3339  00A0                     l8385:	
  3340  00A0  309E               	movlw	(STR_3-__stringbase)& (0+255)
  3341  00A1  2EFB               	ljmp	_writeString
  3342  00A2                     l8387:	
  3343  00A2  3096               	movlw	(STR_4-__stringbase)& (0+255)
  3344  00A3  2EFB               	ljmp	_writeString
  3345  00A4                     l8389:	
  3346  00A4  3092               	movlw	(STR_5-__stringbase)& (0+255)
  3347  00A5  2EFB               	ljmp	_writeString
  3348  00A6                     l8391:	
  3349  00A6  30AA               	movlw	(STR_6-__stringbase)& (0+255)
  3350  00A7  2EFB               	ljmp	_writeString
  3351  00A8                     l8393:	
  3352  00A8  309A               	movlw	(STR_7-__stringbase)& (0+255)
  3353  00A9  2EFB               	ljmp	_writeString
  3354  00AA                     l8395:	
  3355  00AA  30A6               	movlw	(STR_8-__stringbase)& (0+255)
  3356  00AB  2EFB               	ljmp	_writeString
  3357  00AC                     l8397:	
  3358  00AC  30A2               	movlw	(STR_9-__stringbase)& (0+255)
  3359  00AD  2EFB               	ljmp	_writeString
  3360  00AE                     l8399:	
  3361  00AE  308E               	movlw	(STR_10-__stringbase)& (0+255)
  3362  00AF  2EFB               	ljmp	_writeString
  3363  00B0                     __end_of_DisplayDateOnLCD:	
  3364  00B0                     __ptext858:	
  3365 ;; =============== function _afiareDefault ends ============
  3366                           
  3367                           
  3368 ;; *************** function _verificareOreSonerie *****************
  3369 ;; Defined at:
  3370 ;;		line 376 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\Main.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;  oraCurenta      1    wreg     PTR unsigned char 
  3373 ;;		 -> NULL(0), RTCArray(4), 
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;  oraCurenta      1   22[BANK0 ] PTR unsigned char 
  3376 ;;		 -> NULL(0), RTCArray(4), 
  3377 ;;  dif             2   20[BANK0 ] int 
  3378 ;;  newSecond       2   18[BANK0 ] int 
  3379 ;;  prevSecond      2   16[BANK0 ] int 
  3380 ;;  newMinute       2   14[BANK0 ] int 
  3381 ;;  prevMinute      2   12[BANK0 ] int 
  3382 ;;  newS2           2   10[BANK0 ] int 
  3383 ;;  newS1           2    8[BANK0 ] int 
  3384 ;;  newM2           2    6[BANK0 ] int 
  3385 ;;  newM1           2    4[BANK0 ] int 
  3386 ;;  newH1           2    2[BANK0 ] int 
  3387 ;;  newH2           2    0        int 
  3388 ;;  newHour         2    0        int 
  3389 ;;  prevHour        2    0        int 
  3390 ;; Return value:  Size  Location     Type
  3391 ;;		None               void
  3392 ;; Registers used:
  3393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3394 ;; Tracked objects:
  3395 ;;		On entry : 160/0
  3396 ;;		On exit  : 160/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3399 ;;      Params:         0       0       0       0       0
  3400 ;;      Locals:         0      23       0       0       0
  3401 ;;      Temps:          0       0       0       0       0
  3402 ;;      Totals:         0      23       0       0       0
  3403 ;;Total ram usage:       23 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; Hardware stack levels required when called:    4
  3406 ;; This function calls:
  3407 ;;		___wmul
  3408 ;;		___lbdiv
  3409 ;;		___lbmod
  3410 ;;		_test
  3411 ;;		_GetTime_RTC
  3412 ;; This function is called by:
  3413 ;;		_main
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416  00B0                     _verificareOreSonerie:	
  3417                           
  3418                           ; Regs used in _verificareOreSonerie: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3419                           ;verificareOreSonerie@oraCurenta stored from wreg
  3420  00B0  00B6               	movwf	verificareOreSonerie@oraCurenta
  3421                           
  3422                           ;Main.c: 380: int prevSecond = prevS1*10 + prevS2;
  3423  00B1  085C               	movf	_prevS1+1,w
  3424  00B2  00F1               	movwf	?___wmul+1
  3425  00B3  085B               	movf	_prevS1,w
  3426  00B4  00F0               	movwf	?___wmul
  3427  00B5  300A               	movlw	10
  3428  00B6  00F2               	movwf	?___wmul+2
  3429  00B7  01F3               	clrf	?___wmul+3
  3430  00B8  23B9  120A  118A   	fcall	___wmul
  3431  00BB  0871               	movf	?___wmul+1,w
  3432  00BC  00B1               	movwf	verificareOreSonerie@prevSecond+1
  3433  00BD  0870               	movf	?___wmul,w
  3434  00BE  00B0               	movwf	verificareOreSonerie@prevSecond
  3435  00BF  085D               	movf	_prevS2,w
  3436  00C0  07B0               	addwf	verificareOreSonerie@prevSecond,f
  3437  00C1  1803               	skipnc
  3438  00C2  0AB1               	incf	verificareOreSonerie@prevSecond+1,f
  3439  00C3  085E               	movf	_prevS2+1,w
  3440  00C4  07B1               	addwf	verificareOreSonerie@prevSecond+1,f
  3441                           
  3442                           ;Main.c: 381: int prevHour = prevH1*10 + prevH2;
  3443  00C5  0856               	movf	_prevH1+1,w
  3444  00C6  00F1               	movwf	?___wmul+1
  3445  00C7  0855               	movf	_prevH1,w
  3446  00C8  00F0               	movwf	?___wmul
  3447  00C9  300A               	movlw	10
  3448  00CA  00F2               	movwf	?___wmul+2
  3449  00CB  01F3               	clrf	?___wmul+3
  3450  00CC  23B9  120A  118A   	fcall	___wmul
  3451                           
  3452                           ;Main.c: 382: int prevMinute = prevM1*10 + prevM2;
  3453  00CF  0858               	movf	_prevM1+1,w
  3454  00D0  00F1               	movwf	?___wmul+1
  3455  00D1  0857               	movf	_prevM1,w
  3456  00D2  00F0               	movwf	?___wmul
  3457  00D3  300A               	movlw	10
  3458  00D4  00F2               	movwf	?___wmul+2
  3459  00D5  01F3               	clrf	?___wmul+3
  3460  00D6  23B9  120A  118A   	fcall	___wmul
  3461  00D9  0871               	movf	?___wmul+1,w
  3462  00DA  00AD               	movwf	verificareOreSonerie@prevMinute+1
  3463  00DB  0870               	movf	?___wmul,w
  3464  00DC  00AC               	movwf	verificareOreSonerie@prevMinute
  3465  00DD  0859               	movf	_prevM2,w
  3466  00DE  07AC               	addwf	verificareOreSonerie@prevMinute,f
  3467  00DF  1803               	skipnc
  3468  00E0  0AAD               	incf	verificareOreSonerie@prevMinute+1,f
  3469  00E1  085A               	movf	_prevM2+1,w
  3470  00E2  07AD               	addwf	verificareOreSonerie@prevMinute+1,f
  3471                           
  3472                           ;Main.c: 385: int newH1 = (oraCurenta[2]/10);
  3473  00E3  300A               	movlw	10
  3474  00E4  00F0               	movwf	?___lbdiv
  3475  00E5  0836               	movf	verificareOreSonerie@oraCurenta,w
  3476  00E6  3E02               	addlw	2
  3477  00E7  0084               	movwf	4
  3478  00E8  0800               	movf	0,w
  3479  00E9  2226  120A  118A   	fcall	___lbdiv
  3480  00EC  00A2               	movwf	verificareOreSonerie@newH1
  3481  00ED  300A               	movlw	10
  3482  00EE  01A3               	clrf	verificareOreSonerie@newH1+1
  3483  00EF  00F0               	movwf	?___lbmod
  3484  00F0  0836               	movf	verificareOreSonerie@oraCurenta,w
  3485  00F1  3E02               	addlw	2
  3486  00F2  0084               	movwf	4
  3487  00F3  0800               	movf	0,w
  3488  00F4  2241  120A  118A   	fcall	___lbmod
  3489                           
  3490                           ;Main.c: 387: int newHour = newH1*10 + newH2;
  3491  00F7  0823               	movf	verificareOreSonerie@newH1+1,w
  3492  00F8  00F1               	movwf	?___wmul+1
  3493  00F9  0822               	movf	verificareOreSonerie@newH1,w
  3494  00FA  00F0               	movwf	?___wmul
  3495  00FB  300A               	movlw	10
  3496  00FC  00F2               	movwf	?___wmul+2
  3497  00FD  01F3               	clrf	?___wmul+3
  3498  00FE  23B9  120A  118A   	fcall	___wmul
  3499                           
  3500                           ;Main.c: 389: int newM1 = (oraCurenta[1]/10);
  3501  0101  300A               	movlw	10
  3502  0102  00F0               	movwf	?___lbdiv
  3503  0103  0836               	movf	verificareOreSonerie@oraCurenta,w
  3504  0104  3E01               	addlw	1
  3505  0105  0084               	movwf	4
  3506  0106  0800               	movf	0,w
  3507  0107  2226  120A  118A   	fcall	___lbdiv
  3508  010A  00A4               	movwf	verificareOreSonerie@newM1
  3509  010B  300A               	movlw	10
  3510  010C  01A5               	clrf	verificareOreSonerie@newM1+1
  3511                           
  3512                           ;Main.c: 390: int newM2 = (oraCurenta[1]%10);
  3513  010D  00F0               	movwf	?___lbmod
  3514  010E  0836               	movf	verificareOreSonerie@oraCurenta,w
  3515  010F  3E01               	addlw	1
  3516  0110  0084               	movwf	4
  3517  0111  0800               	movf	0,w
  3518  0112  2241  120A  118A   	fcall	___lbmod
  3519  0115  00A6               	movwf	verificareOreSonerie@newM2
  3520  0116  01A7               	clrf	verificareOreSonerie@newM2+1
  3521                           
  3522                           ;Main.c: 391: int newMinute = newM1*10 + newM2;
  3523  0117  0825               	movf	verificareOreSonerie@newM1+1,w
  3524  0118  00F1               	movwf	?___wmul+1
  3525  0119  0824               	movf	verificareOreSonerie@newM1,w
  3526  011A  00F0               	movwf	?___wmul
  3527  011B  300A               	movlw	10
  3528  011C  00F2               	movwf	?___wmul+2
  3529  011D  01F3               	clrf	?___wmul+3
  3530  011E  23B9  120A  118A   	fcall	___wmul
  3531  0121  0871               	movf	?___wmul+1,w
  3532  0122  00AF               	movwf	verificareOreSonerie@newMinute+1
  3533  0123  0870               	movf	?___wmul,w
  3534  0124  00AE               	movwf	verificareOreSonerie@newMinute
  3535  0125  0826               	movf	verificareOreSonerie@newM2,w
  3536  0126  07AE               	addwf	verificareOreSonerie@newMinute,f
  3537  0127  1803               	skipnc
  3538  0128  0AAF               	incf	verificareOreSonerie@newMinute+1,f
  3539  0129  0827               	movf	verificareOreSonerie@newM2+1,w
  3540  012A  07AF               	addwf	verificareOreSonerie@newMinute+1,f
  3541                           
  3542                           ;Main.c: 393: int newS1 = (oraCurenta[0]/10);
  3543  012B  300A               	movlw	10
  3544  012C  00F0               	movwf	?___lbdiv
  3545  012D  0836               	movf	verificareOreSonerie@oraCurenta,w
  3546  012E  0084               	movwf	4
  3547  012F  0800               	movf	0,w
  3548  0130  2226  120A  118A   	fcall	___lbdiv
  3549  0133  00A8               	movwf	verificareOreSonerie@newS1
  3550  0134  300A               	movlw	10
  3551  0135  01A9               	clrf	verificareOreSonerie@newS1+1
  3552                           
  3553                           ;Main.c: 394: int newS2 = (oraCurenta[0]%10);
  3554  0136  00F0               	movwf	?___lbmod
  3555  0137  0836               	movf	verificareOreSonerie@oraCurenta,w
  3556  0138  0084               	movwf	4
  3557  0139  0800               	movf	0,w
  3558  013A  2241  120A  118A   	fcall	___lbmod
  3559  013D  00AA               	movwf	verificareOreSonerie@newS2
  3560  013E  01AB               	clrf	verificareOreSonerie@newS2+1
  3561                           
  3562                           ;Main.c: 395: int newSecond = newS1*10 + newS2;
  3563  013F  0829               	movf	verificareOreSonerie@newS1+1,w
  3564  0140  00F1               	movwf	?___wmul+1
  3565  0141  0828               	movf	verificareOreSonerie@newS1,w
  3566  0142  00F0               	movwf	?___wmul
  3567  0143  300A               	movlw	10
  3568  0144  00F2               	movwf	?___wmul+2
  3569  0145  01F3               	clrf	?___wmul+3
  3570  0146  23B9  120A  118A   	fcall	___wmul
  3571  0149  0871               	movf	?___wmul+1,w
  3572  014A  00B3               	movwf	verificareOreSonerie@newSecond+1
  3573  014B  0870               	movf	?___wmul,w
  3574  014C  00B2               	movwf	verificareOreSonerie@newSecond
  3575  014D  082A               	movf	verificareOreSonerie@newS2,w
  3576  014E  07B2               	addwf	verificareOreSonerie@newSecond,f
  3577  014F  1803               	skipnc
  3578  0150  0AB3               	incf	verificareOreSonerie@newSecond+1,f
  3579  0151  082B               	movf	verificareOreSonerie@newS2+1,w
  3580  0152  07B3               	addwf	verificareOreSonerie@newSecond+1,f
  3581                           
  3582                           ;Main.c: 399: if(prevMinute!=newMinute)
  3583  0153  082F               	movf	verificareOreSonerie@newMinute+1,w
  3584  0154  062D               	xorwf	verificareOreSonerie@prevMinute+1,w
  3585  0155  1D03               	skipz
  3586  0156  2959               	goto	u2255
  3587  0157  082E               	movf	verificareOreSonerie@newMinute,w
  3588  0158  062C               	xorwf	verificareOreSonerie@prevMinute,w
  3589  0159                     u2255:	
  3590  0159  1903               	skipnz
  3591  015A  2964               	goto	l8725
  3592                           
  3593                           ;Main.c: 400: dif = newSecond + (60 - prevSecond);
  3594  015B  0833               	movf	verificareOreSonerie@newSecond+1,w
  3595  015C  2778  120A  118A   	fcall	PL9	;call to abstracted procedure
  3596  015F  303C               	movlw	60
  3597  0160  07B4               	addwf	verificareOreSonerie@dif,f
  3598  0161  1803               	skipnc
  3599  0162  0AB5               	incf	verificareOreSonerie@dif+1,f
  3600  0163  2968               	goto	l2184
  3601  0164                     l8725:	
  3602                           
  3603                           ;Main.c: 401: else dif = newSecond - prevSecond;
  3604  0164  0833               	movf	verificareOreSonerie@newSecond+1,w
  3605  0165  2778  120A  118A   	fcall	PL9	;call to abstracted procedure
  3606  0168                     l2184:	
  3607                           
  3608                           ;Main.c: 403: if(dif >= intervalSonerie)
  3609  0168  0869               	movf	_intervalSonerie+1,w
  3610  0169  0235               	subwf	verificareOreSonerie@dif+1,w
  3611  016A  1D03               	skipz
  3612  016B  296E               	goto	u2265
  3613  016C  0868               	movf	_intervalSonerie,w
  3614  016D  0234               	subwf	verificareOreSonerie@dif,w
  3615  016E                     u2265:	
  3616  016E  1C03               	skipc
  3617  016F  0008               	return
  3618                           
  3619                           ;Main.c: 404: { test("sonerie");
  3620  0170  3077               	movlw	(STR_21-__stringbase)& (0+255)
  3621  0171  120A  158A  22C0   	fcall	_test
      +       120A  118A         
  3622                           
  3623                           ;Main.c: 406: oraPrev = GetTime_RTC();
  3624  0176  120A  158A  25CC   	fcall	_GetTime_RTC
      +       120A  118A         
  3625  017B  00E1               	movwf	_oraPrev
  3626                           
  3627                           ;Main.c: 407: prevH1 = (oraPrev[2]/10);
  3628  017C  300A               	movlw	10
  3629  017D  00F0               	movwf	?___lbdiv
  3630  017E  0861               	movf	_oraPrev,w
  3631  017F  3E02               	addlw	2
  3632  0180  0084               	movwf	4
  3633  0181  0800               	movf	0,w
  3634  0182  2226  120A  118A   	fcall	___lbdiv
  3635  0185  00D5               	movwf	_prevH1
  3636  0186  300A               	movlw	10
  3637  0187  01D6               	clrf	_prevH1+1
  3638                           
  3639                           ;Main.c: 408: prevH2 = (oraPrev[2]%10);
  3640  0188  00F0               	movwf	?___lbmod
  3641  0189  0861               	movf	_oraPrev,w
  3642  018A  3E02               	addlw	2
  3643  018B  0084               	movwf	4
  3644  018C  0800               	movf	0,w
  3645  018D  2241  120A  118A   	fcall	___lbmod
  3646                           
  3647                           ;Main.c: 409: prevM1 = (oraPrev[1]/10);
  3648  0190  300A               	movlw	10
  3649  0191  00F0               	movwf	?___lbdiv
  3650  0192  0861               	movf	_oraPrev,w
  3651  0193  3E01               	addlw	1
  3652  0194  0084               	movwf	4
  3653  0195  0800               	movf	0,w
  3654  0196  2226  120A  118A   	fcall	___lbdiv
  3655  0199  00D7               	movwf	_prevM1
  3656  019A  300A               	movlw	10
  3657  019B  01D8               	clrf	_prevM1+1
  3658                           
  3659                           ;Main.c: 410: prevM2 = (oraPrev[1]%10);
  3660  019C  00F0               	movwf	?___lbmod
  3661  019D  0861               	movf	_oraPrev,w
  3662  019E  3E01               	addlw	1
  3663  019F  0084               	movwf	4
  3664  01A0  0800               	movf	0,w
  3665  01A1  2241  120A  118A   	fcall	___lbmod
  3666  01A4  00D9               	movwf	_prevM2
  3667  01A5  300A               	movlw	10
  3668  01A6  01DA               	clrf	_prevM2+1
  3669                           
  3670                           ;Main.c: 411: prevS1 = (oraPrev[0]/10);
  3671  01A7  00F0               	movwf	?___lbdiv
  3672  01A8  0861               	movf	_oraPrev,w
  3673  01A9  0084               	movwf	4
  3674  01AA  0800               	movf	0,w
  3675  01AB  2226  120A  118A   	fcall	___lbdiv
  3676  01AE  00DB               	movwf	_prevS1
  3677  01AF  300A               	movlw	10
  3678  01B0  01DC               	clrf	_prevS1+1
  3679                           
  3680                           ;Main.c: 412: prevS2 = (oraPrev[0]%10);}
  3681  01B1  00F0               	movwf	?___lbmod
  3682  01B2  0861               	movf	_oraPrev,w
  3683  01B3  0084               	movwf	4
  3684  01B4  0800               	movf	0,w
  3685  01B5  2241               	fcall	___lbmod
  3686  01B6  00DD               	movwf	_prevS2
  3687  01B7  01DE               	clrf	_prevS2+1
  3688  01B8  0008               	return
  3689  01B9                     __end_of_verificareOreSonerie:	
  3690  01B9                     __ptext863:	
  3691 ;; =============== function _DisplayDateOnLCD ends ============
  3692                           
  3693                           
  3694 ;; *************** function _DisplayTimeToLCD *****************
  3695 ;; Defined at:
  3696 ;;		line 105 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\LCD.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;  pTimeArray      1    wreg     PTR unsigned char 
  3699 ;;		 -> RTCArray(4), 
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  pTimeArray      1    5[COMMON] PTR unsigned char 
  3702 ;;		 -> RTCArray(4), 
  3703 ;; Return value:  Size  Location     Type
  3704 ;;		None               void
  3705 ;; Registers used:
  3706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3707 ;; Tracked objects:
  3708 ;;		On entry : 160/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3712 ;;      Params:         0       0       0       0       0
  3713 ;;      Locals:         1       0       0       0       0
  3714 ;;      Temps:          0       0       0       0       0
  3715 ;;      Totals:         1       0       0       0       0
  3716 ;;Total ram usage:        1 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    3
  3719 ;; This function calls:
  3720 ;;		_clearScreen
  3721 ;;		___lbdiv
  3722 ;;		_writeChar
  3723 ;;		___lbmod
  3724 ;;		_writeString
  3725 ;; This function is called by:
  3726 ;;		_afiareDefault
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729  01B9                     _DisplayTimeToLCD:	
  3730                           
  3731                           ; Regs used in _DisplayTimeToLCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3732                           ;DisplayTimeToLCD@pTimeArray stored from wreg
  3733  01B9  00F5               	movwf	DisplayTimeToLCD@pTimeArray
  3734                           
  3735                           ;LCD.c: 106: clearScreen();
  3736  01BA  26EB  120A  118A   	fcall	_clearScreen
  3737                           
  3738                           ;LCD.c: 109: writeChar( (pTimeArray[2]/10)+0x30 );
  3739  01BD  300A               	movlw	10
  3740  01BE  00F0               	movwf	?___lbdiv
  3741  01BF  27BA  120A  118A   	fcall	PL21	;call to abstracted procedure
  3742  01C2  2226  120A  118A   	fcall	___lbdiv
  3743  01C5  3E30               	addlw	48
  3744  01C6  26D5  120A  118A   	fcall	_writeChar
  3745                           
  3746                           ;LCD.c: 110: writeChar( (pTimeArray[2]%10)+0x30 );
  3747  01C9  300A               	movlw	10
  3748  01CA  00F0               	movwf	?___lbmod
  3749  01CB  27BA  120A  118A   	fcall	PL21	;call to abstracted procedure
  3750  01CE  2241  120A  118A   	fcall	___lbmod
  3751  01D1  3E30               	addlw	48
  3752  01D2  26D5  120A  118A   	fcall	_writeChar
  3753                           
  3754                           ;LCD.c: 113: writeChar(':');
  3755  01D5  303A               	movlw	58
  3756  01D6  26D5  120A  118A   	fcall	_writeChar
  3757                           
  3758                           ;LCD.c: 116: writeChar( (pTimeArray[1]/10)+0x30 );
  3759  01D9  300A               	movlw	10
  3760  01DA  00F0               	movwf	?___lbdiv
  3761  01DB  27C0  120A  118A   	fcall	PL22	;call to abstracted procedure
  3762  01DE  2226  120A  118A   	fcall	___lbdiv
  3763  01E1  3E30               	addlw	48
  3764  01E2  26D5  120A  118A   	fcall	_writeChar
  3765                           
  3766                           ;LCD.c: 117: writeChar( (pTimeArray[1]%10)+0x30 );
  3767  01E5  300A               	movlw	10
  3768  01E6  00F0               	movwf	?___lbmod
  3769  01E7  27C0  120A  118A   	fcall	PL22	;call to abstracted procedure
  3770  01EA  2241  120A  118A   	fcall	___lbmod
  3771  01ED  3E30               	addlw	48
  3772  01EE  26D5  120A  118A   	fcall	_writeChar
  3773                           
  3774                           ;LCD.c: 120: writeChar(':');
  3775  01F1  303A               	movlw	58
  3776  01F2  26D5  120A  118A   	fcall	_writeChar
  3777                           
  3778                           ;LCD.c: 123: writeChar( (pTimeArray[0]/10)+0x30 );
  3779  01F5  300A               	movlw	10
  3780  01F6  00F0               	movwf	?___lbdiv
  3781  01F7  0875               	movf	DisplayTimeToLCD@pTimeArray,w
  3782  01F8  0084               	movwf	4
  3783  01F9  1383               	bcf	3,7	;select IRP bank0
  3784  01FA  0800               	movf	0,w
  3785  01FB  2226  120A  118A   	fcall	___lbdiv
  3786  01FE  3E30               	addlw	48
  3787  01FF  26D5  120A  118A   	fcall	_writeChar
  3788                           
  3789                           ;LCD.c: 124: writeChar( (pTimeArray[0]%10)+0x30 );
  3790  0202  300A               	movlw	10
  3791  0203  00F0               	movwf	?___lbmod
  3792  0204  0875               	movf	DisplayTimeToLCD@pTimeArray,w
  3793  0205  0084               	movwf	4
  3794  0206  1383               	bcf	3,7	;select IRP bank0
  3795  0207  0800               	movf	0,w
  3796  0208  2241  120A  118A   	fcall	___lbmod
  3797  020B  3E30               	addlw	48
  3798  020C  26D5  120A  118A   	fcall	_writeChar
  3799                           
  3800                           ;LCD.c: 127: writeChar(' ');
  3801  020F  3020               	movlw	32
  3802  0210  26D5  120A  118A   	fcall	_writeChar
  3803                           
  3804                           ;LCD.c: 130: switch(pTimeArray[3])
  3805  0213  0875               	movf	DisplayTimeToLCD@pTimeArray,w
  3806  0214  3E03               	addlw	3
  3807  0215  0084               	movwf	4
  3808  0216  1383               	bcf	3,7	;select IRP bank0
  3809  0217  0800               	movf	0,w
  3810                           
  3811                           ; Switch size 1, requested type "space"
  3812                           ; Number of cases is 2, Range of values is 0 to 1
  3813                           ; switch strategies available:
  3814                           ; Name         Instructions Cycles
  3815                           ; simple_byte            7     4 (average)
  3816                           ; direct_byte           14     8 (fixed)
  3817                           ; jumptable            260     6 (fixed)
  3818                           ; rangetable             6     6 (fixed)
  3819                           ; spacedrange           10     9 (fixed)
  3820                           ; locatedrange           2     3 (fixed)
  3821                           ;	Chosen strategy is simple_byte
  3822  0218  3A00               	xorlw	0	; case 0
  3823  0219  1903               	skipnz
  3824  021A  2A20               	goto	l8361
  3825  021B  3A01               	xorlw	1	; case 1
  3826  021C  1903               	skipnz
  3827  021D  2A22               	goto	l8363
  3828  021E  2A24               	goto	l8365
  3829  021F  0008               	return
  3830  0220                     l8361:	
  3831  0220  30AE               	movlw	(STR_1-__stringbase)& (0+255)
  3832  0221  2EFB               	ljmp	_writeString
  3833  0222                     l8363:	
  3834  0222  30B1               	movlw	(STR_2-__stringbase)& (0+255)
  3835  0223  2EFB               	ljmp	_writeString
  3836  0224                     l8365:	
  3837  0224  3048               	movlw	72
  3838  0225  2ED5               	ljmp	_writeChar
  3839  0226                     __end_of_DisplayTimeToLCD:	
  3840  0226                     __ptext883:	
  3841 ;; =============== function ___lbmod ends ============
  3842                           
  3843                           
  3844 ;; *************** function ___lbdiv *****************
  3845 ;; Defined at:
  3846 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lbdiv.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  dividend        1    wreg     unsigned char 
  3849 ;;  divisor         1    0[COMMON] unsigned char 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  dividend        1    1[COMMON] unsigned char 
  3852 ;;  quotient        1    3[COMMON] unsigned char 
  3853 ;;  counter         1    2[COMMON] unsigned char 
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      unsigned char 
  3856 ;; Registers used:
  3857 ;;		wreg, status,2, status,0
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: FFFFF/0
  3862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3863 ;;      Params:         1       0       0       0       0
  3864 ;;      Locals:         3       0       0       0       0
  3865 ;;      Temps:          0       0       0       0       0
  3866 ;;      Totals:         4       0       0       0       0
  3867 ;;Total ram usage:        4 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; This function calls:
  3870 ;;		Nothing
  3871 ;; This function is called by:
  3872 ;;		_DisplayTimeToLCD
  3873 ;;		_DisplayDateOnLCD
  3874 ;;		_main
  3875 ;;		_verificareOreSonerie
  3876 ;;		_SetTime_RTC
  3877 ;;		_SetDate_RTC
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880  0226                     ___lbdiv:	
  3881                           
  3882                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3883                           ;___lbdiv@dividend stored from wreg
  3884  0226  00F1               	movwf	___lbdiv@dividend
  3885  0227  01F3               	clrf	___lbdiv@quotient
  3886  0228  0870               	movf	___lbdiv@divisor,w
  3887  0229  1903               	btfsc	3,2
  3888  022A  2A3F               	goto	l7883
  3889  022B  01F2               	clrf	___lbdiv@counter
  3890  022C                     l7869:	
  3891  022C  0AF2               	incf	___lbdiv@counter,f
  3892  022D  1BF0               	btfsc	___lbdiv@divisor,7
  3893  022E  2A32               	goto	l4949
  3894  022F  1003               	clrc
  3895  0230  0DF0               	rlf	___lbdiv@divisor,f
  3896  0231  2A2C               	goto	l7869
  3897  0232                     l4949:	
  3898  0232  1003               	clrc
  3899  0233  0DF3               	rlf	___lbdiv@quotient,f
  3900  0234  0870               	movf	___lbdiv@divisor,w
  3901  0235  0271               	subwf	___lbdiv@dividend,w
  3902  0236  1C03               	skipc
  3903  0237  2A3C               	goto	L5
  3904  0238  0870               	movf	___lbdiv@divisor,w
  3905  0239  02F1               	subwf	___lbdiv@dividend,f
  3906  023A  1473               	bsf	___lbdiv@quotient,0
  3907  023B  1003               	clrc
  3908  023C                     L5:	
  3909  023C  0CF0               	rrf	___lbdiv@divisor,f
  3910  023D  0BF2               	decfsz	___lbdiv@counter,f
  3911  023E  2A32               	goto	l4949
  3912  023F                     l7883:	
  3913  023F  0873               	movf	___lbdiv@quotient,w
  3914  0240  0008               	return
  3915  0241                     __end_of___lbdiv:	
  3916  0241                     __ptext882:	
  3917 ;; =============== function ___awdiv ends ============
  3918                           
  3919                           
  3920 ;; *************** function ___lbmod *****************
  3921 ;; Defined at:
  3922 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lbmod.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  dividend        1    wreg     unsigned char 
  3925 ;;  divisor         1    0[COMMON] unsigned char 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  dividend        1    2[COMMON] unsigned char 
  3928 ;;  rem             1    4[COMMON] unsigned char 
  3929 ;;  counter         1    3[COMMON] unsigned char 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      unsigned char 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: FFFFF/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3939 ;;      Params:         1       0       0       0       0
  3940 ;;      Locals:         3       0       0       0       0
  3941 ;;      Temps:          1       0       0       0       0
  3942 ;;      Totals:         5       0       0       0       0
  3943 ;;Total ram usage:        5 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; This function calls:
  3946 ;;		Nothing
  3947 ;; This function is called by:
  3948 ;;		_DisplayTimeToLCD
  3949 ;;		_DisplayDateOnLCD
  3950 ;;		_main
  3951 ;;		_verificareOreSonerie
  3952 ;;		_SetTime_RTC
  3953 ;;		_SetDate_RTC
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956  0241                     ___lbmod:	
  3957                           
  3958                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3959                           ;___lbmod@dividend stored from wreg
  3960  0241  00F2               	movwf	___lbmod@dividend
  3961  0242  3008               	movlw	8
  3962  0243  00F3               	movwf	___lbmod@counter
  3963  0244  01F4               	clrf	___lbmod@rem
  3964  0245                     l7891:	
  3965  0245  0872               	movf	___lbmod@dividend,w
  3966  0246  00F1               	movwf	??___lbmod
  3967  0247  3007               	movlw	7
  3968  0248  1003               	clrc
  3969  0249                     L4:	
  3970  0249  0CF1               	rrf	??___lbmod,f
  3971  024A  3EFF               	addlw	-1
  3972  024B  1003               	clrc
  3973  024C  1D03               	skipz
  3974  024D  2A49               	goto	L4
  3975  024E  0D74               	rlf	___lbmod@rem,w
  3976  024F  0471               	iorwf	??___lbmod,w
  3977  0250  00F4               	movwf	___lbmod@rem
  3978  0251  1003               	clrc
  3979  0252  0DF2               	rlf	___lbmod@dividend,f
  3980  0253  0870               	movf	___lbmod@divisor,w
  3981  0254  0274               	subwf	___lbmod@rem,w
  3982  0255  1C03               	skipc
  3983  0256  2A59               	goto	l7899
  3984  0257  0870               	movf	___lbmod@divisor,w
  3985  0258  02F4               	subwf	___lbmod@rem,f
  3986  0259                     l7899:	
  3987  0259  0BF3               	decfsz	___lbmod@counter,f
  3988  025A  2A45               	goto	l7891
  3989  025B  0874               	movf	___lbmod@rem,w
  3990  025C  0008               	return
  3991  025D                     __end_of___lbmod:	
  3992  025D                     __ptext859:	
  3993 ;; =============== function _verificareOreSonerie ends ============
  3994                           
  3995                           
  3996 ;; *************** function _detectieIncendiu *****************
  3997 ;; Defined at:
  3998 ;;		line 309 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\Main.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;		None
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;  count2          2    6[BANK0 ] unsigned int 
  4003 ;;  count           2    4[BANK0 ] unsigned int 
  4004 ;;  digit1          2   22[BANK0 ] unsigned int 
  4005 ;;  digit2          2   20[BANK0 ] unsigned int 
  4006 ;;  digit3          2   18[BANK0 ] unsigned int 
  4007 ;;  ADC_value_2     2   16[BANK0 ] unsigned int 
  4008 ;;  ADC_value       2   14[BANK0 ] unsigned int 
  4009 ;;  digit4          2   12[BANK0 ] unsigned int 
  4010 ;;  fum             2   10[BANK0 ] unsigned int 
  4011 ;;  temperatura     2    8[BANK0 ] unsigned int 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;		None               void
  4014 ;; Registers used:
  4015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 60/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4021 ;;      Params:         0       0       0       0       0
  4022 ;;      Locals:         0      20       0       0       0
  4023 ;;      Temps:          0       4       0       0       0
  4024 ;;      Totals:         0      24       0       0       0
  4025 ;;Total ram usage:       24 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    4
  4028 ;; This function calls:
  4029 ;;		_GetADCValue
  4030 ;;		___lwdiv
  4031 ;;		___wmul
  4032 ;;		_test
  4033 ;; This function is called by:
  4034 ;;		_main
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037  025D                     _detectieIncendiu:	
  4038  025D  27D8               	call	PL26	;select bank 0
  4039                           
  4040                           ;Main.c: 311: unsigned int fum = 0;
  4041                           
  4042                           ; Regs used in _detectieIncendiu: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4043  025E  3002               	movlw	2
  4044  025F  01AA               	clrf	detectieIncendiu@fum
  4045  0260  01AB               	clrf	detectieIncendiu@fum+1
  4046  0261  27DB  120A  118A   	fcall	_GetADCValue
  4047  0264  3001               	movlw	1
  4048  0265  27DB  120A  118A   	fcall	_GetADCValue
  4049                           
  4050                           ;Main.c: 319: unsigned int ADC_value = GetADCValue(2);
  4051  0268  3002               	movlw	2
  4052  0269  27DB  120A  118A   	fcall	_GetADCValue
  4053  026C  0871               	movf	?_GetADCValue+1,w
  4054  026D  1283               	bcf	3,5	;RP0=0, select bank0
  4055  026E  00AF               	movwf	detectieIncendiu@ADC_value+1
  4056  026F  0870               	movf	?_GetADCValue,w
  4057  0270  00AE               	movwf	detectieIncendiu@ADC_value
  4058                           
  4059                           ;Main.c: 323: digit1 = (unsigned int)(ADC_value/1000);
  4060  0271  30E8               	movlw	232
  4061  0272  00F6               	movwf	?___lwdiv
  4062  0273  3003               	movlw	3
  4063  0274  00F7               	movwf	?___lwdiv+1
  4064  0275  082F               	movf	detectieIncendiu@ADC_value+1,w
  4065  0276  00F9               	movwf	?___lwdiv+3
  4066  0277  082E               	movf	detectieIncendiu@ADC_value,w
  4067  0278  00F8               	movwf	?___lwdiv+2
  4068  0279  2712  120A  118A   	fcall	___lwdiv
  4069                           
  4070                           ;Main.c: 324: digit2 = (unsigned int)((ADC_value - digit1*1000)/100);
  4071  027C  2756  120A  118A   	fcall	PL5	;call to abstracted procedure
  4072  027F  273C  120A  118A   	fcall	PL2	;call to abstracted procedure
  4073  0282  23B9  120A  118A   	fcall	___wmul
  4074  0285  082E               	movf	detectieIncendiu@ADC_value,w
  4075  0286  0770               	addwf	?___wmul,w
  4076  0287  00F8               	movwf	?___lwdiv+2
  4077  0288  082F               	movf	detectieIncendiu@ADC_value+1,w
  4078  0289  1803               	skipnc
  4079  028A  0A2F               	incf	detectieIncendiu@ADC_value+1,w
  4080  028B  0771               	addwf	?___wmul+1,w
  4081  028C  00F9               	movwf	?___lwdiv+3
  4082  028D  2712  120A  118A   	fcall	___lwdiv
  4083                           
  4084                           ;Main.c: 325: digit3 = (unsigned int)((ADC_value - (digit1*1000+digit2*100))/10);
  4085  0290  2745  120A  118A   	fcall	PL3	;call to abstracted procedure
  4086  0293  273C  120A  118A   	fcall	PL2	;call to abstracted procedure
  4087  0296  23B9  120A  118A   	fcall	___wmul
  4088  0299  0870               	movf	?___wmul,w
  4089  029A  00A0               	movwf	??_detectieIncendiu
  4090  029B  0871               	movf	?___wmul+1,w
  4091  029C  00A1               	movwf	??_detectieIncendiu+1
  4092  029D  274D  120A  118A   	fcall	PL4	;call to abstracted procedure
  4093  02A0  23B9  120A  118A   	fcall	___wmul
  4094  02A3  278C  120A  118A   	fcall	PL11	;call to abstracted procedure
  4095  02A6  082E               	movf	detectieIncendiu@ADC_value,w
  4096  02A7  0722               	addwf	??_detectieIncendiu+2,w
  4097  02A8  00F8               	movwf	?___lwdiv+2
  4098  02A9  082F               	movf	detectieIncendiu@ADC_value+1,w
  4099  02AA  1803               	skipnc
  4100  02AB  0A2F               	incf	detectieIncendiu@ADC_value+1,w
  4101  02AC  0723               	addwf	??_detectieIncendiu+3,w
  4102  02AD  00F9               	movwf	?___lwdiv+3
  4103  02AE  2712  120A  118A   	fcall	___lwdiv
  4104                           
  4105                           ;Main.c: 326: digit4 = (unsigned int)(ADC_value - (digit1*1000+digit2*100+digit3*10));
  4106  02B1  2764  120A  118A   	fcall	PL7	;call to abstracted procedure
  4107  02B4  23B9  120A  118A   	fcall	___wmul
  4108  02B7  0871               	movf	?___wmul+1,w
  4109  02B8  00AD               	movwf	detectieIncendiu@digit4+1
  4110  02B9  0870               	movf	?___wmul,w
  4111  02BA  00AC               	movwf	detectieIncendiu@digit4
  4112  02BB  274D  120A  118A   	fcall	PL4	;call to abstracted procedure
  4113  02BE  23B9  120A  118A   	fcall	___wmul
  4114  02C1  0870               	movf	?___wmul,w
  4115  02C2  275E  120A  118A   	fcall	PL6	;call to abstracted procedure
  4116  02C5  273C  120A  118A   	fcall	PL2	;call to abstracted procedure
  4117  02C8  23B9  120A  118A   	fcall	___wmul
  4118  02CB  2771  120A  118A   	fcall	PL8	;call to abstracted procedure
  4119  02CE  082E               	movf	detectieIncendiu@ADC_value,w
  4120  02CF  07AC               	addwf	detectieIncendiu@digit4,f
  4121  02D0  1803               	skipnc
  4122  02D1  0AAD               	incf	detectieIncendiu@digit4+1,f
  4123  02D2  082F               	movf	detectieIncendiu@ADC_value+1,w
  4124                           
  4125                           ;Main.c: 329: temperatura = digit1*1000+digit2*100+digit3*10+digit4;
  4126  02D3  2782  120A  118A   	fcall	PL10	;call to abstracted procedure
  4127  02D6  23B9  120A  118A   	fcall	___wmul
  4128  02D9  0871               	movf	?___wmul+1,w
  4129  02DA  00A9               	movwf	detectieIncendiu@temperatura+1
  4130  02DB  0870               	movf	?___wmul,w
  4131  02DC  00A8               	movwf	detectieIncendiu@temperatura
  4132  02DD  2795  120A  118A   	fcall	PL13	;call to abstracted procedure
  4133  02E0  23B9  120A  118A   	fcall	___wmul
  4134  02E3  27A5  120A  118A   	fcall	PL18	;call to abstracted procedure
  4135  02E6  279D  120A  118A   	fcall	PL14	;call to abstracted procedure
  4136  02E9  23B9  120A  118A   	fcall	___wmul
  4137  02EC  27A5  120A  118A   	fcall	PL18	;call to abstracted procedure
  4138  02EF  082C               	movf	detectieIncendiu@digit4,w
  4139  02F0  07A8               	addwf	detectieIncendiu@temperatura,f
  4140  02F1  1803               	skipnc
  4141  02F2  0AA9               	incf	detectieIncendiu@temperatura+1,f
  4142  02F3  082D               	movf	detectieIncendiu@digit4+1,w
  4143  02F4  07A9               	addwf	detectieIncendiu@temperatura+1,f
  4144                           
  4145                           ;Main.c: 332: if(temperatura > tempAlarma)
  4146  02F5  3000               	movlw	0
  4147  02F6  0229               	subwf	detectieIncendiu@temperatura+1,w
  4148  02F7  3065               	movlw	101
  4149  02F8  1903               	skipnz
  4150  02F9  0228               	subwf	detectieIncendiu@temperatura,w
  4151  02FA  1C03               	skipc
  4152  02FB  2B02               	goto	l8657
  4153                           
  4154                           ;Main.c: 333: {
  4155                           ;Main.c: 334: test("arde uite cum arde");
  4156  02FC  3001               	movlw	(STR_19-__stringbase)& (0+255)
  4157  02FD  120A  158A  22C0   	fcall	_test
      +       120A  118A         
  4158  0302                     l8657:	
  4159                           
  4160                           ;Main.c: 339: }
  4161                           ;Main.c: 344: unsigned int ADC_value_2 = GetADCValue(1);
  4162  0302  3001               	movlw	1
  4163  0303  27DB  120A  118A   	fcall	_GetADCValue
  4164  0306  0871               	movf	?_GetADCValue+1,w
  4165  0307  1283               	bcf	3,5	;RP0=0, select bank0
  4166  0308  00B1               	movwf	detectieIncendiu@ADC_value_2+1
  4167  0309  0870               	movf	?_GetADCValue,w
  4168  030A  00B0               	movwf	detectieIncendiu@ADC_value_2
  4169                           
  4170                           ;Main.c: 348: digit1 = (unsigned int)(ADC_value_2/1000);
  4171  030B  30E8               	movlw	232
  4172  030C  00F6               	movwf	?___lwdiv
  4173  030D  3003               	movlw	3
  4174  030E  00F7               	movwf	?___lwdiv+1
  4175  030F  0831               	movf	detectieIncendiu@ADC_value_2+1,w
  4176  0310  00F9               	movwf	?___lwdiv+3
  4177  0311  0830               	movf	detectieIncendiu@ADC_value_2,w
  4178  0312  00F8               	movwf	?___lwdiv+2
  4179  0313  2712  120A  118A   	fcall	___lwdiv
  4180                           
  4181                           ;Main.c: 349: digit2 = (unsigned int)((ADC_value_2 - digit1*1000)/100);
  4182  0316  2756  120A  118A   	fcall	PL5	;call to abstracted procedure
  4183  0319  273C  120A  118A   	fcall	PL2	;call to abstracted procedure
  4184  031C  23B9  120A  118A   	fcall	___wmul
  4185  031F  0830               	movf	detectieIncendiu@ADC_value_2,w
  4186  0320  0770               	addwf	?___wmul,w
  4187  0321  00F8               	movwf	?___lwdiv+2
  4188  0322  0831               	movf	detectieIncendiu@ADC_value_2+1,w
  4189  0323  1803               	skipnc
  4190  0324  0A31               	incf	detectieIncendiu@ADC_value_2+1,w
  4191  0325  0771               	addwf	?___wmul+1,w
  4192  0326  00F9               	movwf	?___lwdiv+3
  4193  0327  2712  120A  118A   	fcall	___lwdiv
  4194                           
  4195                           ;Main.c: 350: digit3 = (unsigned int)((ADC_value_2 - (digit1*1000+digit2*100))/10);
  4196  032A  2745  120A  118A   	fcall	PL3	;call to abstracted procedure
  4197  032D  273C  120A  118A   	fcall	PL2	;call to abstracted procedure
  4198  0330  23B9  120A  118A   	fcall	___wmul
  4199  0333  0870               	movf	?___wmul,w
  4200  0334  00A0               	movwf	??_detectieIncendiu
  4201  0335  0871               	movf	?___wmul+1,w
  4202  0336  00A1               	movwf	??_detectieIncendiu+1
  4203  0337  274D  120A  118A   	fcall	PL4	;call to abstracted procedure
  4204  033A  23B9  120A  118A   	fcall	___wmul
  4205  033D  278C  120A  118A   	fcall	PL11	;call to abstracted procedure
  4206  0340  0830               	movf	detectieIncendiu@ADC_value_2,w
  4207  0341  0722               	addwf	??_detectieIncendiu+2,w
  4208  0342  00F8               	movwf	?___lwdiv+2
  4209  0343  0831               	movf	detectieIncendiu@ADC_value_2+1,w
  4210  0344  1803               	skipnc
  4211  0345  0A31               	incf	detectieIncendiu@ADC_value_2+1,w
  4212  0346  0723               	addwf	??_detectieIncendiu+3,w
  4213  0347  00F9               	movwf	?___lwdiv+3
  4214  0348  2712  120A  118A   	fcall	___lwdiv
  4215                           
  4216                           ;Main.c: 351: digit4 = (unsigned int)(ADC_value_2 - (digit1*1000+digit2*100+digit3*10));
  4217  034B  2764  120A  118A   	fcall	PL7	;call to abstracted procedure
  4218  034E  23B9  120A  118A   	fcall	___wmul
  4219  0351  0871               	movf	?___wmul+1,w
  4220  0352  00AD               	movwf	detectieIncendiu@digit4+1
  4221  0353  0870               	movf	?___wmul,w
  4222  0354  00AC               	movwf	detectieIncendiu@digit4
  4223  0355  274D  120A  118A   	fcall	PL4	;call to abstracted procedure
  4224  0358  23B9  120A  118A   	fcall	___wmul
  4225  035B  0870               	movf	?___wmul,w
  4226  035C  275E  120A  118A   	fcall	PL6	;call to abstracted procedure
  4227  035F  273C  120A  118A   	fcall	PL2	;call to abstracted procedure
  4228  0362  23B9  120A  118A   	fcall	___wmul
  4229  0365  2771  120A  118A   	fcall	PL8	;call to abstracted procedure
  4230  0368  0830               	movf	detectieIncendiu@ADC_value_2,w
  4231  0369  07AC               	addwf	detectieIncendiu@digit4,f
  4232  036A  1803               	skipnc
  4233  036B  0AAD               	incf	detectieIncendiu@digit4+1,f
  4234  036C  0831               	movf	detectieIncendiu@ADC_value_2+1,w
  4235                           
  4236                           ;Main.c: 354: fum = digit1*1000+digit2*100+digit3*10+digit4;
  4237  036D  2782  120A  118A   	fcall	PL10	;call to abstracted procedure
  4238  0370  23B9  120A  118A   	fcall	___wmul
  4239  0373  0871               	movf	?___wmul+1,w
  4240  0374  00AB               	movwf	detectieIncendiu@fum+1
  4241  0375  0870               	movf	?___wmul,w
  4242  0376  00AA               	movwf	detectieIncendiu@fum
  4243  0377  2795  120A  118A   	fcall	PL13	;call to abstracted procedure
  4244  037A  23B9  120A  118A   	fcall	___wmul
  4245  037D  27B3  120A  118A   	fcall	PL20	;call to abstracted procedure
  4246  0380  279D  120A  118A   	fcall	PL14	;call to abstracted procedure
  4247  0383  23B9  120A  118A   	fcall	___wmul
  4248  0386  27B3  120A  118A   	fcall	PL20	;call to abstracted procedure
  4249  0389  082C               	movf	detectieIncendiu@digit4,w
  4250  038A  07AA               	addwf	detectieIncendiu@fum,f
  4251  038B  1803               	skipnc
  4252  038C  0AAB               	incf	detectieIncendiu@fum+1,f
  4253  038D  082D               	movf	detectieIncendiu@digit4+1,w
  4254  038E  07AB               	addwf	detectieIncendiu@fum+1,f
  4255                           
  4256                           ;Main.c: 357: if(fum > fumAlarma)
  4257  038F  3000               	movlw	0
  4258  0390  022B               	subwf	detectieIncendiu@fum+1,w
  4259  0391  3065               	movlw	101
  4260  0392  1903               	skipnz
  4261  0393  022A               	subwf	detectieIncendiu@fum,w
  4262  0394  1C03               	skipc
  4263  0395  0008               	return
  4264                           
  4265                           ;Main.c: 358: {
  4266                           ;Main.c: 359: test("alarma fum");
  4267  0396  3046               	movlw	(STR_20-__stringbase)& (0+255)
  4268  0397  120A  158A  22C0   	fcall	_test
      +       120A  118A         
  4269                           
  4270                           ;Main.c: 365: unsigned int count = 10000;
  4271  039C  3010               	movlw	16
  4272  039D  27D8               	call	PL26	;select bank 0
  4273  039E  00A4               	movwf	detectieIncendiu@count
  4274  039F  3027               	movlw	39
  4275  03A0  00A5               	movwf	detectieIncendiu@count+1
  4276  03A1                     l8691:	
  4277                           ;Main.c: 366: while(count--)
  4278                           
  4279  03A1  3001               	movlw	1
  4280  03A2  02A4               	subwf	detectieIncendiu@count,f
  4281  03A3  3000               	movlw	0
  4282  03A4  1C03               	skipc
  4283  03A5  03A5               	decf	detectieIncendiu@count+1,f
  4284  03A6  02A5               	subwf	detectieIncendiu@count+1,f
  4285  03A7  0A24               	incf	detectieIncendiu@count,w
  4286  03A8  1903               	skipnz
  4287  03A9  0A25               	incf	detectieIncendiu@count+1,w
  4288  03AA  1903               	btfsc	3,2
  4289  03AB  0008               	return
  4290                           
  4291                           ;Main.c: 367: {
  4292                           ;Main.c: 368: unsigned int count2 = 100;
  4293  03AC  3064               	movlw	100
  4294  03AD  00A6               	movwf	detectieIncendiu@count2
  4295  03AE  01A7               	clrf	detectieIncendiu@count2+1
  4296  03AF                     l8689:	
  4297                           ;Main.c: 369: while(count2--);
  4298                           
  4299  03AF  3001               	movlw	1
  4300  03B0  02A6               	subwf	detectieIncendiu@count2,f
  4301  03B1  1C03               	skipc
  4302  03B2  03A7               	decf	detectieIncendiu@count2+1,f
  4303  03B3  0A26               	incf	detectieIncendiu@count2,w
  4304  03B4  1903               	skipnz
  4305  03B5  0A27               	incf	detectieIncendiu@count2+1,w
  4306  03B6  1903               	btfsc	3,2
  4307  03B7  2BA1               	goto	l8691
  4308  03B8  2BAF               	goto	l8689
  4309  03B9                     __end_of_detectieIncendiu:	
  4310  03B9                     __ptext885:	
  4311 ;; =============== function ___lwdiv ends ============
  4312                           
  4313                           
  4314 ;; *************** function ___wmul *****************
  4315 ;; Defined at:
  4316 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\wmul.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  multiplier      2    0[COMMON] unsigned int 
  4319 ;;  multiplicand    2    2[COMMON] unsigned int 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  product         2    4[COMMON] unsigned int 
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  2    0[COMMON] unsigned int 
  4324 ;; Registers used:
  4325 ;;		wreg, status,2, status,0
  4326 ;; Tracked objects:
  4327 ;;		On entry : 60/0
  4328 ;;		On exit  : 60/0
  4329 ;;		Unchanged: FFF9F/0
  4330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4331 ;;      Params:         4       0       0       0       0
  4332 ;;      Locals:         2       0       0       0       0
  4333 ;;      Temps:          0       0       0       0       0
  4334 ;;      Totals:         6       0       0       0       0
  4335 ;;Total ram usage:        6 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; This function calls:
  4338 ;;		Nothing
  4339 ;; This function is called by:
  4340 ;;		_tastaApasata
  4341 ;;		_detectieIncendiu
  4342 ;;		_verificareOreSonerie
  4343 ;;		_disp_num
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346  03B9                     ___wmul:	
  4347                           
  4348                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4349  03B9  01F4               	clrf	___wmul@product
  4350  03BA  01F5               	clrf	___wmul@product+1
  4351  03BB                     l7823:	
  4352  03BB  1C70               	btfss	___wmul@multiplier,0
  4353  03BC  2BC3               	goto	l7827
  4354  03BD  0872               	movf	___wmul@multiplicand,w
  4355  03BE  07F4               	addwf	___wmul@product,f
  4356  03BF  1803               	skipnc
  4357  03C0  0AF5               	incf	___wmul@product+1,f
  4358  03C1  0873               	movf	___wmul@multiplicand+1,w
  4359  03C2  07F5               	addwf	___wmul@product+1,f
  4360  03C3                     l7827:	
  4361  03C3  1003               	clrc
  4362  03C4  0DF2               	rlf	___wmul@multiplicand,f
  4363  03C5  0DF3               	rlf	___wmul@multiplicand+1,f
  4364  03C6  1003               	clrc
  4365  03C7  0CF1               	rrf	___wmul@multiplier+1,f
  4366  03C8  0CF0               	rrf	___wmul@multiplier,f
  4367  03C9  0871               	movf	___wmul@multiplier+1,w
  4368  03CA  0470               	iorwf	___wmul@multiplier,w
  4369  03CB  1D03               	skipz
  4370  03CC  2BBB               	goto	l7823
  4371  03CD  0875               	movf	___wmul@product+1,w
  4372  03CE  00F1               	movwf	?___wmul+1
  4373  03CF  0874               	movf	___wmul@product,w
  4374  03D0  00F0               	movwf	?___wmul
  4375  03D1  0008               	return
  4376  03D2                     __end_of___wmul:	
  4377  03D2                     __ptext861:	
  4378 ;; =============== function _test ends ============
  4379                           
  4380                           
  4381 ;; *************** function _tastaApasata *****************
  4382 ;; Defined at:
  4383 ;;		line 123 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\Main.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;  tasta           1    wreg     unsigned char 
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;  tasta           1   51[BANK0 ] unsigned char 
  4388 ;;  k               2   49[BANK0 ] int 
  4389 ;;  count2          2    9[BANK0 ] unsigned int 
  4390 ;;  count2          2    5[BANK0 ] unsigned int 
  4391 ;;  i               2   47[BANK0 ] int 
  4392 ;;  count           2    7[BANK0 ] unsigned int 
  4393 ;;  count           2    3[BANK0 ] unsigned int 
  4394 ;;  month           2   45[BANK0 ] int 
  4395 ;;  day             2   43[BANK0 ] int 
  4396 ;;  s2              2   35[BANK0 ] int 
  4397 ;;  s1              2   33[BANK0 ] int 
  4398 ;;  m2              2   31[BANK0 ] int 
  4399 ;;  m1              2   29[BANK0 ] int 
  4400 ;;  ch2             2   27[BANK0 ] int 
  4401 ;;  ch1             2   25[BANK0 ] int 
  4402 ;;  year            2   11[BANK0 ] int 
  4403 ;;  second          2   41[BANK0 ] int 
  4404 ;;  minute          2   39[BANK0 ] int 
  4405 ;;  hour            2   37[BANK0 ] int 
  4406 ;;  s2              2   23[BANK0 ] int 
  4407 ;;  s1              2   21[BANK0 ] int 
  4408 ;;  m2              2   19[BANK0 ] int 
  4409 ;;  m1              2   17[BANK0 ] int 
  4410 ;;  ch2             2   15[BANK0 ] int 
  4411 ;;  ch1             2   13[BANK0 ] int 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;		None               void
  4414 ;; Registers used:
  4415 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : 60/0
  4418 ;;		On exit  : 60/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4421 ;;      Params:         0       0       0       0       0
  4422 ;;      Locals:         0      49       0       0       0
  4423 ;;      Temps:          0       3       0       0       0
  4424 ;;      Totals:         0      52       0       0       0
  4425 ;;Total ram usage:       52 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    3
  4428 ;; This function calls:
  4429 ;;		_SetTime_RTC
  4430 ;;		_SetDate_RTC
  4431 ;;		_clearScreen
  4432 ;;		_writeString
  4433 ;;		_GetChar2
  4434 ;;		_writeChar
  4435 ;;		___wmul
  4436 ;;		_disp_num
  4437 ;; This function is called by:
  4438 ;;		_main
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441  03D2                     _tastaApasata:	
  4442                           
  4443                           ; Regs used in _tastaApasata: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4444                           ;tastaApasata@tasta stored from wreg
  4445  03D2  00D3               	movwf	tastaApasata@tasta
  4446                           
  4447                           ;Main.c: 125: if(tasta == 'C')
  4448  03D3  3A43               	xorlw	67
  4449  03D4  1D03               	skipz
  4450  03D5  2C1D               	goto	l8431
  4451  03D6  3002               	movlw	2
  4452                           
  4453                           ;Main.c: 126: {
  4454                           ;Main.c: 128: SetTime_RTC(2, 0, 0, 0);
  4455  03D7  01F8               	clrf	?_SetTime_RTC
  4456  03D8  01F9               	clrf	?_SetTime_RTC+1
  4457  03D9  01FA               	clrf	?_SetTime_RTC+2
  4458  03DA  120A  158A  26D8   	fcall	_SetTime_RTC
      +       120A  118A         
  4459                           
  4460                           ;Main.c: 129: SetDate_RTC(8, 5, 14, 2);
  4461  03DF  3005               	movlw	5
  4462  03E0  00F8               	movwf	?_SetDate_RTC
  4463  03E1  300E               	movlw	14
  4464  03E2  00F9               	movwf	?_SetDate_RTC+1
  4465  03E3  3002               	movlw	2
  4466  03E4  00FA               	movwf	?_SetDate_RTC+2
  4467  03E5  3008               	movlw	8
  4468  03E6  120A  158A  272F   	fcall	_SetDate_RTC
      +       120A  118A         
  4469                           
  4470                           ;Main.c: 136: for(int i = 0; i< 20; i++)
  4471  03EB  01CF               	clrf	tastaApasata@i
  4472  03EC  01D0               	clrf	tastaApasata@i+1
  4473  03ED                     l8415:	
  4474  03ED  27D8               	call	PL26	;select bank 0
  4475                           
  4476                           ;Main.c: 137: {
  4477                           ;Main.c: 138: for(int k = 0; k< 4; k++)
  4478  03EE  01D1               	clrf	tastaApasata@k
  4479  03EF  01D2               	clrf	tastaApasata@k+1
  4480  03F0                     l8421:	
  4481  03F0  27D8               	call	PL26	;select bank 0
  4482                           
  4483                           ;Main.c: 139: {
  4484                           ;Main.c: 140: oreSonerie[i][k] = 0;
  4485  03F1  084F               	movf	tastaApasata@i,w
  4486  03F2  00A0               	movwf	??_tastaApasata
  4487  03F3  30A0               	movlw	_oreSonerie& (0+255)
  4488  03F4  1003               	clrc
  4489  03F5  0DA0               	rlf	??_tastaApasata,f
  4490  03F6  1003               	clrc
  4491  03F7  0DA0               	rlf	??_tastaApasata,f
  4492  03F8  0720               	addwf	??_tastaApasata,w
  4493  03F9  00A1               	movwf	??_tastaApasata+1
  4494  03FA  0851               	movf	tastaApasata@k,w
  4495  03FB  0721               	addwf	??_tastaApasata+1,w
  4496  03FC  00A2               	movwf	??_tastaApasata+2
  4497  03FD  0084               	movwf	4
  4498  03FE  1383               	bcf	3,7	;select IRP bank1
  4499  03FF  0180               	clrf	0
  4500  0400  0AD1               	incf	tastaApasata@k,f
  4501  0401  1903               	skipnz
  4502  0402  0AD2               	incf	tastaApasata@k+1,f
  4503  0403  0852               	movf	tastaApasata@k+1,w
  4504  0404  3A80               	xorlw	128
  4505  0405  00FF               	movwf	127
  4506  0406  3080               	movlw	128
  4507  0407  027F               	subwf	127,w
  4508  0408  1D03               	skipz
  4509  0409  2C0C               	goto	u2025
  4510  040A  3004               	movlw	4
  4511  040B  0251               	subwf	tastaApasata@k,w
  4512  040C                     u2025:	
  4513  040C  1C03               	skipc
  4514  040D  2BF0               	goto	l8421
  4515  040E  27D8               	call	PL26	;select bank 0
  4516  040F  0ACF               	incf	tastaApasata@i,f
  4517  0410  1903               	skipnz
  4518  0411  0AD0               	incf	tastaApasata@i+1,f
  4519  0412  0850               	movf	tastaApasata@i+1,w
  4520  0413  3A80               	xorlw	128
  4521  0414  00FF               	movwf	127
  4522  0415  3080               	movlw	128
  4523  0416  027F               	subwf	127,w
  4524  0417  1D03               	skipz
  4525  0418  2C1B               	goto	u2035
  4526  0419  3014               	movlw	20
  4527  041A  024F               	subwf	tastaApasata@i,w
  4528  041B                     u2035:	
  4529  041B  1C03               	skipc
  4530  041C  2BED               	goto	l8415
  4531  041D                     l8431:	
  4532  041D  27D8               	call	PL26	;select bank 0
  4533                           
  4534                           ;Main.c: 141: }
  4535                           ;Main.c: 142: }
  4536                           ;Main.c: 143: }
  4537                           ;Main.c: 145: if(tasta == '/')
  4538  041E  0853               	movf	tastaApasata@tasta,w
  4539  041F  3A2F               	xorlw	47
  4540  0420  1D03               	skipz
  4541  0421  2CEB               	goto	l8495
  4542                           
  4543                           ;Main.c: 149: int ch1;
  4544                           ;Main.c: 150: int ch2;
  4545                           ;Main.c: 151: clearScreen();
  4546  0422  26EB  120A  118A   	fcall	_clearScreen
  4547                           
  4548                           ;Main.c: 152: writeString("Set hour");
  4549  0425  306E               	movlw	(STR_11-__stringbase)& (0+255)
  4550  0426  26FB  120A  118A   	fcall	_writeString
  4551                           
  4552                           ;Main.c: 154: ch1 = GetChar2();
  4553  0429  267B  120A  118A   	fcall	_GetChar2
  4554  042C  0874               	movf	?_GetChar2+1,w
  4555  042D  27D8               	call	PL26	;select bank 0
  4556  042E  00AE               	movwf	tastaApasata@ch1+1
  4557  042F  0873               	movf	?_GetChar2,w
  4558  0430  00AD               	movwf	tastaApasata@ch1
  4559                           
  4560                           ;Main.c: 155: writeChar(ch1);
  4561  0431  26D5  120A  118A   	fcall	_writeChar
  4562                           
  4563                           ;Main.c: 157: ch2 = GetChar2();
  4564  0434  267B  120A  118A   	fcall	_GetChar2
  4565  0437  0874               	movf	?_GetChar2+1,w
  4566  0438  27D8               	call	PL26	;select bank 0
  4567  0439  00B0               	movwf	tastaApasata@ch2+1
  4568  043A  0873               	movf	?_GetChar2,w
  4569  043B  00AF               	movwf	tastaApasata@ch2
  4570                           
  4571                           ;Main.c: 158: writeChar(ch2);
  4572  043C  082F               	movf	tastaApasata@ch2,w
  4573  043D  26D5  120A  118A   	fcall	_writeChar
  4574                           
  4575                           ;Main.c: 160: clearScreen();
  4576  0440  26EB  120A  118A   	fcall	_clearScreen
  4577                           
  4578                           ;Main.c: 164: int m1;
  4579                           ;Main.c: 165: int m2;
  4580                           ;Main.c: 167: writeString("Set minute");
  4581  0443  303B               	movlw	(STR_12-__stringbase)& (0+255)
  4582  0444  26FB  120A  118A   	fcall	_writeString
  4583                           
  4584                           ;Main.c: 169: m1 = GetChar2();
  4585  0447  267B  120A  118A   	fcall	_GetChar2
  4586  044A  0874               	movf	?_GetChar2+1,w
  4587  044B  27D8               	call	PL26	;select bank 0
  4588  044C  00B2               	movwf	tastaApasata@m1+1
  4589  044D  0873               	movf	?_GetChar2,w
  4590  044E  00B1               	movwf	tastaApasata@m1
  4591                           
  4592                           ;Main.c: 170: writeChar(m1);
  4593  044F  26D5  120A  118A   	fcall	_writeChar
  4594                           
  4595                           ;Main.c: 172: m2 = GetChar2() ;
  4596  0452  267B  120A  118A   	fcall	_GetChar2
  4597  0455  0874               	movf	?_GetChar2+1,w
  4598  0456  27D8               	call	PL26	;select bank 0
  4599  0457  00B4               	movwf	tastaApasata@m2+1
  4600  0458  0873               	movf	?_GetChar2,w
  4601  0459  00B3               	movwf	tastaApasata@m2
  4602                           
  4603                           ;Main.c: 173: writeChar(m2);
  4604  045A  0833               	movf	tastaApasata@m2,w
  4605  045B  26D5  120A  118A   	fcall	_writeChar
  4606                           
  4607                           ;Main.c: 175: clearScreen();
  4608  045E  26EB  120A  118A   	fcall	_clearScreen
  4609                           
  4610                           ;Main.c: 179: int s1;
  4611                           ;Main.c: 180: int s2;
  4612                           ;Main.c: 182: writeString("Set seconds");
  4613  0461  3023               	movlw	(STR_13-__stringbase)& (0+255)
  4614  0462  26FB  120A  118A   	fcall	_writeString
  4615                           
  4616                           ;Main.c: 184: s1 = GetChar2();
  4617  0465  267B  120A  118A   	fcall	_GetChar2
  4618  0468  0874               	movf	?_GetChar2+1,w
  4619  0469  27D8               	call	PL26	;select bank 0
  4620  046A  00B6               	movwf	tastaApasata@s1+1
  4621  046B  0873               	movf	?_GetChar2,w
  4622  046C  00B5               	movwf	tastaApasata@s1
  4623                           
  4624                           ;Main.c: 185: writeChar(s1);
  4625  046D  26D5  120A  118A   	fcall	_writeChar
  4626                           
  4627                           ;Main.c: 187: s2 = GetChar2();
  4628  0470  267B  120A  118A   	fcall	_GetChar2
  4629  0473  0874               	movf	?_GetChar2+1,w
  4630  0474  27D8               	call	PL26	;select bank 0
  4631  0475  00B8               	movwf	tastaApasata@s2+1
  4632  0476  0873               	movf	?_GetChar2,w
  4633  0477  00B7               	movwf	tastaApasata@s2
  4634                           
  4635                           ;Main.c: 188: writeChar(s2);
  4636  0478  26D5  120A  118A   	fcall	_writeChar
  4637  047B  27D8               	call	PL26	;select bank 0
  4638                           
  4639                           ;Main.c: 190: hour = ch1*10+ch2;
  4640  047C  082E               	movf	tastaApasata@ch1+1,w
  4641  047D  00F1               	movwf	?___wmul+1
  4642  047E  082D               	movf	tastaApasata@ch1,w
  4643  047F  00F0               	movwf	?___wmul
  4644  0480  300A               	movlw	10
  4645  0481  00F2               	movwf	?___wmul+2
  4646  0482  01F3               	clrf	?___wmul+3
  4647  0483  23B9  120A  118A   	fcall	___wmul
  4648  0486  0871               	movf	?___wmul+1,w
  4649  0487  00C6               	movwf	tastaApasata@hour+1
  4650  0488  0870               	movf	?___wmul,w
  4651  0489  00C5               	movwf	tastaApasata@hour
  4652  048A  082F               	movf	tastaApasata@ch2,w
  4653  048B  07C5               	addwf	tastaApasata@hour,f
  4654  048C  1803               	skipnc
  4655  048D  0AC6               	incf	tastaApasata@hour+1,f
  4656  048E  0830               	movf	tastaApasata@ch2+1,w
  4657  048F  07C6               	addwf	tastaApasata@hour+1,f
  4658                           
  4659                           ;Main.c: 191: minute = m1*10+m2;
  4660  0490  0832               	movf	tastaApasata@m1+1,w
  4661  0491  00F1               	movwf	?___wmul+1
  4662  0492  0831               	movf	tastaApasata@m1,w
  4663  0493  00F0               	movwf	?___wmul
  4664  0494  300A               	movlw	10
  4665  0495  00F2               	movwf	?___wmul+2
  4666  0496  01F3               	clrf	?___wmul+3
  4667  0497  23B9  120A  118A   	fcall	___wmul
  4668  049A  0871               	movf	?___wmul+1,w
  4669  049B  00C8               	movwf	tastaApasata@minute+1
  4670  049C  0870               	movf	?___wmul,w
  4671  049D  00C7               	movwf	tastaApasata@minute
  4672  049E  0833               	movf	tastaApasata@m2,w
  4673  049F  07C7               	addwf	tastaApasata@minute,f
  4674  04A0  1803               	skipnc
  4675  04A1  0AC8               	incf	tastaApasata@minute+1,f
  4676  04A2  0834               	movf	tastaApasata@m2+1,w
  4677  04A3  07C8               	addwf	tastaApasata@minute+1,f
  4678                           
  4679                           ;Main.c: 192: second = s1*10+s2;
  4680  04A4  0836               	movf	tastaApasata@s1+1,w
  4681  04A5  00F1               	movwf	?___wmul+1
  4682  04A6  0835               	movf	tastaApasata@s1,w
  4683  04A7  00F0               	movwf	?___wmul
  4684  04A8  300A               	movlw	10
  4685  04A9  00F2               	movwf	?___wmul+2
  4686  04AA  01F3               	clrf	?___wmul+3
  4687  04AB  23B9  120A  118A   	fcall	___wmul
  4688  04AE  0871               	movf	?___wmul+1,w
  4689  04AF  00CA               	movwf	tastaApasata@second+1
  4690  04B0  0870               	movf	?___wmul,w
  4691  04B1  00C9               	movwf	tastaApasata@second
  4692  04B2  0837               	movf	tastaApasata@s2,w
  4693  04B3  07C9               	addwf	tastaApasata@second,f
  4694  04B4  1803               	skipnc
  4695  04B5  0ACA               	incf	tastaApasata@second+1,f
  4696  04B6  0838               	movf	tastaApasata@s2+1,w
  4697  04B7  07CA               	addwf	tastaApasata@second+1,f
  4698                           
  4699                           ;Main.c: 194: if(hour<24 && minute<60 && second<60)
  4700  04B8  0846               	movf	tastaApasata@hour+1,w
  4701  04B9  3A80               	xorlw	128
  4702  04BA  00FF               	movwf	127
  4703  04BB  3080               	movlw	128
  4704  04BC  027F               	subwf	127,w
  4705  04BD  1D03               	skipz
  4706  04BE  2CC1               	goto	u2055
  4707  04BF  3018               	movlw	24
  4708  04C0  0245               	subwf	tastaApasata@hour,w
  4709  04C1                     u2055:	
  4710  04C1  1803               	skipnc
  4711  04C2  2CE8               	goto	l8493
  4712  04C3  27D8               	call	PL26	;select bank 0
  4713  04C4  0848               	movf	tastaApasata@minute+1,w
  4714  04C5  3A80               	xorlw	128
  4715  04C6  00FF               	movwf	127
  4716  04C7  3080               	movlw	128
  4717  04C8  027F               	subwf	127,w
  4718  04C9  1D03               	skipz
  4719  04CA  2CCD               	goto	u2065
  4720  04CB  303C               	movlw	60
  4721  04CC  0247               	subwf	tastaApasata@minute,w
  4722  04CD                     u2065:	
  4723  04CD  1803               	skipnc
  4724  04CE  2CE8               	goto	l8493
  4725  04CF  27D8               	call	PL26	;select bank 0
  4726  04D0  084A               	movf	tastaApasata@second+1,w
  4727  04D1  3A80               	xorlw	128
  4728  04D2  00FF               	movwf	127
  4729  04D3  3080               	movlw	128
  4730  04D4  027F               	subwf	127,w
  4731  04D5  1D03               	skipz
  4732  04D6  2CD9               	goto	u2075
  4733  04D7  303C               	movlw	60
  4734  04D8  0249               	subwf	tastaApasata@second,w
  4735  04D9                     u2075:	
  4736  04D9  1803               	skipnc
  4737  04DA  2CE8               	goto	l8493
  4738  04DB  27D8               	call	PL26	;select bank 0
  4739                           
  4740                           ;Main.c: 195: SetTime_RTC(2, hour, minute, second);
  4741  04DC  0845               	movf	tastaApasata@hour,w
  4742  04DD  00F8               	movwf	?_SetTime_RTC
  4743  04DE  0847               	movf	tastaApasata@minute,w
  4744  04DF  00F9               	movwf	?_SetTime_RTC+1
  4745  04E0  0849               	movf	tastaApasata@second,w
  4746  04E1  00FA               	movwf	?_SetTime_RTC+2
  4747  04E2  3002               	movlw	2
  4748  04E3  120A  158A  26D8   	fcall	_SetTime_RTC
      +       120A  118A         
  4749  04E8                     l8493:	
  4750                           
  4751                           ;Main.c: 197: clearScreen();
  4752  04E8  26EB  120A  118A   	fcall	_clearScreen
  4753  04EB                     l8495:	
  4754  04EB  27D8               	call	PL26	;select bank 0
  4755                           
  4756                           ;Main.c: 200: }
  4757                           ;Main.c: 204: if(tasta == '*')
  4758  04EC  0853               	movf	tastaApasata@tasta,w
  4759  04ED  3A2A               	xorlw	42
  4760  04EE  1D03               	skipz
  4761  04EF  2E05               	goto	l8569
  4762                           
  4763                           ;Main.c: 208: int ch1;
  4764                           ;Main.c: 209: int ch2;
  4765                           ;Main.c: 210: clearScreen();
  4766  04F0  26EB  120A  118A   	fcall	_clearScreen
  4767                           
  4768                           ;Main.c: 211: writeString("Set day");
  4769  04F3  307F               	movlw	(STR_14-__stringbase)& (0+255)
  4770  04F4  26FB  120A  118A   	fcall	_writeString
  4771                           
  4772                           ;Main.c: 213: ch1 = GetChar2();
  4773  04F7  267B  120A  118A   	fcall	_GetChar2
  4774  04FA  0874               	movf	?_GetChar2+1,w
  4775  04FB  27D8               	call	PL26	;select bank 0
  4776  04FC  00BA               	movwf	tastaApasata@ch1_2837+1
  4777  04FD  0873               	movf	?_GetChar2,w
  4778  04FE  00B9               	movwf	tastaApasata@ch1_2837
  4779                           
  4780                           ;Main.c: 214: writeChar(ch1);
  4781  04FF  0839               	movf	tastaApasata@ch1_2837,w
  4782  0500  26D5  120A  118A   	fcall	_writeChar
  4783                           
  4784                           ;Main.c: 215: _delay((unsigned long)((250)*(20000000/4000.0)));
  4785  0503  3007               	movlw	7
  4786  0504  27D8               	call	PL26	;select bank 0
  4787  0505  00A2               	movwf	??_tastaApasata+2
  4788  0506  3058               	movlw	88
  4789  0507  00A1               	movwf	??_tastaApasata+1
  4790  0508  305E               	movlw	94
  4791  0509  00A0               	movwf	??_tastaApasata
  4792  050A                     u2317:	
  4793  050A  0BA0               	decfsz	??_tastaApasata,f
  4794  050B  2D0A               	goto	u2317
  4795  050C  0BA1               	decfsz	??_tastaApasata+1,f
  4796  050D  2D0A               	goto	u2317
  4797  050E  0BA2               	decfsz	??_tastaApasata+2,f
  4798  050F  2D0A               	goto	u2317
  4799  0510  2D11               	nop2
  4800                           
  4801                           ;Main.c: 217: ch2 = GetChar2();
  4802  0511  267B  120A  118A   	fcall	_GetChar2
  4803  0514  0874               	movf	?_GetChar2+1,w
  4804  0515  27D8               	call	PL26	;select bank 0
  4805  0516  00BC               	movwf	tastaApasata@ch2_2838+1
  4806  0517  0873               	movf	?_GetChar2,w
  4807  0518  00BB               	movwf	tastaApasata@ch2_2838
  4808                           
  4809                           ;Main.c: 218: writeChar(ch2);
  4810  0519  083B               	movf	tastaApasata@ch2_2838,w
  4811  051A  26D5  120A  118A   	fcall	_writeChar
  4812                           
  4813                           ;Main.c: 219: _delay((unsigned long)((250)*(20000000/4000.0)));
  4814  051D  3007               	movlw	7
  4815  051E  27D8               	call	PL26	;select bank 0
  4816  051F  00A2               	movwf	??_tastaApasata+2
  4817  0520  3058               	movlw	88
  4818  0521  00A1               	movwf	??_tastaApasata+1
  4819  0522  305E               	movlw	94
  4820  0523  00A0               	movwf	??_tastaApasata
  4821  0524                     u2327:	
  4822  0524  0BA0               	decfsz	??_tastaApasata,f
  4823  0525  2D24               	goto	u2327
  4824  0526  0BA1               	decfsz	??_tastaApasata+1,f
  4825  0527  2D24               	goto	u2327
  4826  0528  0BA2               	decfsz	??_tastaApasata+2,f
  4827  0529  2D24               	goto	u2327
  4828  052A  2D2B               	nop2
  4829                           
  4830                           ;Main.c: 221: clearScreen();
  4831  052B  26EB  120A  118A   	fcall	_clearScreen
  4832                           
  4833                           ;Main.c: 225: int m1;
  4834                           ;Main.c: 226: int m2;
  4835                           ;Main.c: 228: writeString("Set month");
  4836  052E  305B               	movlw	(STR_15-__stringbase)& (0+255)
  4837  052F  26FB  120A  118A   	fcall	_writeString
  4838                           
  4839                           ;Main.c: 230: m1 = GetChar2();
  4840  0532  267B  120A  118A   	fcall	_GetChar2
  4841  0535  0874               	movf	?_GetChar2+1,w
  4842  0536  27D8               	call	PL26	;select bank 0
  4843  0537  00BE               	movwf	tastaApasata@m1_2841+1
  4844  0538  0873               	movf	?_GetChar2,w
  4845  0539  00BD               	movwf	tastaApasata@m1_2841
  4846                           
  4847                           ;Main.c: 231: writeChar(m1);
  4848  053A  083D               	movf	tastaApasata@m1_2841,w
  4849  053B  26D5  120A  118A   	fcall	_writeChar
  4850                           
  4851                           ;Main.c: 232: _delay((unsigned long)((250)*(20000000/4000.0)));
  4852  053E  3007               	movlw	7
  4853  053F  27D8               	call	PL26	;select bank 0
  4854  0540  00A2               	movwf	??_tastaApasata+2
  4855  0541  3058               	movlw	88
  4856  0542  00A1               	movwf	??_tastaApasata+1
  4857  0543  305E               	movlw	94
  4858  0544  00A0               	movwf	??_tastaApasata
  4859  0545                     u2337:	
  4860  0545  0BA0               	decfsz	??_tastaApasata,f
  4861  0546  2D45               	goto	u2337
  4862  0547  0BA1               	decfsz	??_tastaApasata+1,f
  4863  0548  2D45               	goto	u2337
  4864  0549  0BA2               	decfsz	??_tastaApasata+2,f
  4865  054A  2D45               	goto	u2337
  4866  054B  2D4C               	nop2
  4867                           
  4868                           ;Main.c: 234: m2 = GetChar2() ;
  4869  054C  267B  120A  118A   	fcall	_GetChar2
  4870  054F  0874               	movf	?_GetChar2+1,w
  4871  0550  27D8               	call	PL26	;select bank 0
  4872  0551  00C0               	movwf	tastaApasata@m2_2842+1
  4873  0552  0873               	movf	?_GetChar2,w
  4874  0553  00BF               	movwf	tastaApasata@m2_2842
  4875                           
  4876                           ;Main.c: 235: writeChar(m2);
  4877  0554  083F               	movf	tastaApasata@m2_2842,w
  4878  0555  26D5  120A  118A   	fcall	_writeChar
  4879                           
  4880                           ;Main.c: 236: _delay((unsigned long)((250)*(20000000/4000.0)));
  4881  0558  3007               	movlw	7
  4882  0559  27D8               	call	PL26	;select bank 0
  4883  055A  00A2               	movwf	??_tastaApasata+2
  4884  055B  3058               	movlw	88
  4885  055C  00A1               	movwf	??_tastaApasata+1
  4886  055D  305E               	movlw	94
  4887  055E  00A0               	movwf	??_tastaApasata
  4888  055F                     u2347:	
  4889  055F  0BA0               	decfsz	??_tastaApasata,f
  4890  0560  2D5F               	goto	u2347
  4891  0561  0BA1               	decfsz	??_tastaApasata+1,f
  4892  0562  2D5F               	goto	u2347
  4893  0563  0BA2               	decfsz	??_tastaApasata+2,f
  4894  0564  2D5F               	goto	u2347
  4895  0565  2D66               	nop2
  4896                           
  4897                           ;Main.c: 238: clearScreen();
  4898  0566  26EB  120A  118A   	fcall	_clearScreen
  4899                           
  4900                           ;Main.c: 242: int s1;
  4901                           ;Main.c: 243: int s2;
  4902                           ;Main.c: 245: writeString("Set year");
  4903  0569  3065               	movlw	(STR_16-__stringbase)& (0+255)
  4904  056A  26FB  120A  118A   	fcall	_writeString
  4905                           
  4906                           ;Main.c: 247: s1 = GetChar2();
  4907  056D  267B  120A  118A   	fcall	_GetChar2
  4908  0570  0874               	movf	?_GetChar2+1,w
  4909  0571  27D8               	call	PL26	;select bank 0
  4910  0572  00C2               	movwf	tastaApasata@s1_2845+1
  4911  0573  0873               	movf	?_GetChar2,w
  4912  0574  00C1               	movwf	tastaApasata@s1_2845
  4913                           
  4914                           ;Main.c: 248: writeChar(s1);
  4915  0575  0841               	movf	tastaApasata@s1_2845,w
  4916  0576  26D5  120A  118A   	fcall	_writeChar
  4917                           
  4918                           ;Main.c: 249: _delay((unsigned long)((250)*(20000000/4000.0)));
  4919  0579  3007               	movlw	7
  4920  057A  27D8               	call	PL26	;select bank 0
  4921  057B  00A2               	movwf	??_tastaApasata+2
  4922  057C  3058               	movlw	88
  4923  057D  00A1               	movwf	??_tastaApasata+1
  4924  057E  305E               	movlw	94
  4925  057F  00A0               	movwf	??_tastaApasata
  4926  0580                     u2357:	
  4927  0580  0BA0               	decfsz	??_tastaApasata,f
  4928  0581  2D80               	goto	u2357
  4929  0582  0BA1               	decfsz	??_tastaApasata+1,f
  4930  0583  2D80               	goto	u2357
  4931  0584  0BA2               	decfsz	??_tastaApasata+2,f
  4932  0585  2D80               	goto	u2357
  4933  0586  2D87               	nop2
  4934                           
  4935                           ;Main.c: 251: s2 = GetChar2();
  4936  0587  267B  120A  118A   	fcall	_GetChar2
  4937  058A  0874               	movf	?_GetChar2+1,w
  4938  058B  27D8               	call	PL26	;select bank 0
  4939  058C  00C4               	movwf	tastaApasata@s2_2846+1
  4940  058D  0873               	movf	?_GetChar2,w
  4941  058E  00C3               	movwf	tastaApasata@s2_2846
  4942                           
  4943                           ;Main.c: 252: writeChar(s2);
  4944  058F  0843               	movf	tastaApasata@s2_2846,w
  4945  0590  26D5  120A  118A   	fcall	_writeChar
  4946                           
  4947                           ;Main.c: 253: _delay((unsigned long)((250)*(20000000/4000.0)));
  4948  0593  3007               	movlw	7
  4949  0594  27D8               	call	PL26	;select bank 0
  4950  0595  00A2               	movwf	??_tastaApasata+2
  4951  0596  3058               	movlw	88
  4952  0597  00A1               	movwf	??_tastaApasata+1
  4953  0598  305E               	movlw	94
  4954  0599  00A0               	movwf	??_tastaApasata
  4955  059A                     u2367:	
  4956  059A  0BA0               	decfsz	??_tastaApasata,f
  4957  059B  2D9A               	goto	u2367
  4958  059C  0BA1               	decfsz	??_tastaApasata+1,f
  4959  059D  2D9A               	goto	u2367
  4960  059E  0BA2               	decfsz	??_tastaApasata+2,f
  4961  059F  2D9A               	goto	u2367
  4962  05A0  2DA1               	nop2
  4963  05A1  27D8               	call	PL26	;select bank 0
  4964                           
  4965                           ;Main.c: 255: day = ch1*10+ch2;
  4966  05A2  083A               	movf	tastaApasata@ch1_2837+1,w
  4967  05A3  00F1               	movwf	?___wmul+1
  4968  05A4  0839               	movf	tastaApasata@ch1_2837,w
  4969  05A5  00F0               	movwf	?___wmul
  4970  05A6  300A               	movlw	10
  4971  05A7  00F2               	movwf	?___wmul+2
  4972  05A8  01F3               	clrf	?___wmul+3
  4973  05A9  23B9  120A  118A   	fcall	___wmul
  4974  05AC  0871               	movf	?___wmul+1,w
  4975  05AD  00CC               	movwf	tastaApasata@day+1
  4976  05AE  0870               	movf	?___wmul,w
  4977  05AF  00CB               	movwf	tastaApasata@day
  4978  05B0  083B               	movf	tastaApasata@ch2_2838,w
  4979  05B1  07CB               	addwf	tastaApasata@day,f
  4980  05B2  1803               	skipnc
  4981  05B3  0ACC               	incf	tastaApasata@day+1,f
  4982  05B4  083C               	movf	tastaApasata@ch2_2838+1,w
  4983  05B5  07CC               	addwf	tastaApasata@day+1,f
  4984                           
  4985                           ;Main.c: 256: month = m1*10+m2;
  4986  05B6  083E               	movf	tastaApasata@m1_2841+1,w
  4987  05B7  00F1               	movwf	?___wmul+1
  4988  05B8  083D               	movf	tastaApasata@m1_2841,w
  4989  05B9  00F0               	movwf	?___wmul
  4990  05BA  300A               	movlw	10
  4991  05BB  00F2               	movwf	?___wmul+2
  4992  05BC  01F3               	clrf	?___wmul+3
  4993  05BD  23B9  120A  118A   	fcall	___wmul
  4994  05C0  0871               	movf	?___wmul+1,w
  4995  05C1  00CE               	movwf	tastaApasata@month+1
  4996  05C2  0870               	movf	?___wmul,w
  4997  05C3  00CD               	movwf	tastaApasata@month
  4998  05C4  083F               	movf	tastaApasata@m2_2842,w
  4999  05C5  07CD               	addwf	tastaApasata@month,f
  5000  05C6  1803               	skipnc
  5001  05C7  0ACE               	incf	tastaApasata@month+1,f
  5002  05C8  0840               	movf	tastaApasata@m2_2842+1,w
  5003  05C9  07CE               	addwf	tastaApasata@month+1,f
  5004                           
  5005                           ;Main.c: 257: year = s1*10+s2;
  5006  05CA  0842               	movf	tastaApasata@s1_2845+1,w
  5007  05CB  00F1               	movwf	?___wmul+1
  5008  05CC  0841               	movf	tastaApasata@s1_2845,w
  5009  05CD  00F0               	movwf	?___wmul
  5010  05CE  300A               	movlw	10
  5011  05CF  00F2               	movwf	?___wmul+2
  5012  05D0  01F3               	clrf	?___wmul+3
  5013  05D1  23B9  120A  118A   	fcall	___wmul
  5014  05D4  0871               	movf	?___wmul+1,w
  5015  05D5  00AC               	movwf	tastaApasata@year+1
  5016  05D6  0870               	movf	?___wmul,w
  5017  05D7  00AB               	movwf	tastaApasata@year
  5018  05D8  0843               	movf	tastaApasata@s2_2846,w
  5019  05D9  07AB               	addwf	tastaApasata@year,f
  5020  05DA  1803               	skipnc
  5021  05DB  0AAC               	incf	tastaApasata@year+1,f
  5022  05DC  0844               	movf	tastaApasata@s2_2846+1,w
  5023  05DD  07AC               	addwf	tastaApasata@year+1,f
  5024                           
  5025                           ;Main.c: 259: if(day < 31 && month <12)
  5026  05DE  084C               	movf	tastaApasata@day+1,w
  5027  05DF  3A80               	xorlw	128
  5028  05E0  00FF               	movwf	127
  5029  05E1  3080               	movlw	128
  5030  05E2  027F               	subwf	127,w
  5031  05E3  1D03               	skipz
  5032  05E4  2DE7               	goto	u2095
  5033  05E5  301F               	movlw	31
  5034  05E6  024B               	subwf	tastaApasata@day,w
  5035  05E7                     u2095:	
  5036  05E7  1803               	skipnc
  5037  05E8  2E02               	goto	l8567
  5038  05E9  27D8               	call	PL26	;select bank 0
  5039  05EA  084E               	movf	tastaApasata@month+1,w
  5040  05EB  3A80               	xorlw	128
  5041  05EC  00FF               	movwf	127
  5042  05ED  3080               	movlw	128
  5043  05EE  027F               	subwf	127,w
  5044  05EF  1D03               	skipz
  5045  05F0  2DF3               	goto	u2105
  5046  05F1  300C               	movlw	12
  5047  05F2  024D               	subwf	tastaApasata@month,w
  5048  05F3                     u2105:	
  5049  05F3  1803               	skipnc
  5050  05F4  2E02               	goto	l8567
  5051  05F5  27D8               	call	PL26	;select bank 0
  5052                           
  5053                           ;Main.c: 260: SetDate_RTC(day, month, year, 2);
  5054  05F6  084D               	movf	tastaApasata@month,w
  5055  05F7  00F8               	movwf	?_SetDate_RTC
  5056  05F8  082B               	movf	tastaApasata@year,w
  5057  05F9  00F9               	movwf	?_SetDate_RTC+1
  5058  05FA  3002               	movlw	2
  5059  05FB  00FA               	movwf	?_SetDate_RTC+2
  5060  05FC  084B               	movf	tastaApasata@day,w
  5061  05FD  120A  158A  272F   	fcall	_SetDate_RTC
      +       120A  118A         
  5062  0602                     l8567:	
  5063                           
  5064                           ;Main.c: 262: clearScreen();
  5065  0602  26EB  120A  118A   	fcall	_clearScreen
  5066  0605                     l8569:	
  5067  0605  27D8               	call	PL26	;select bank 0
  5068                           
  5069                           ;Main.c: 265: }
  5070                           ;Main.c: 268: if(tasta == '+')
  5071  0606  0853               	movf	tastaApasata@tasta,w
  5072  0607  3A2B               	xorlw	43
  5073  0608  1D03               	skipz
  5074  0609  2E3F               	goto	l8589
  5075                           
  5076                           ;Main.c: 269: {
  5077                           ;Main.c: 270: clearScreen();
  5078  060A  26EB  120A  118A   	fcall	_clearScreen
  5079                           
  5080                           ;Main.c: 272: if(intervalSonerie <60)
  5081  060D  3000               	movlw	0
  5082  060E  27D8               	call	PL26	;select bank 0
  5083  060F  0269               	subwf	_intervalSonerie+1,w
  5084  0610  303C               	movlw	60
  5085  0611  1903               	skipnz
  5086  0612  0268               	subwf	_intervalSonerie,w
  5087  0613  1803               	skipnc
  5088  0614  2E18               	goto	l8577
  5089                           
  5090                           ;Main.c: 273: intervalSonerie++;
  5091  0615  0AE8               	incf	_intervalSonerie,f
  5092  0616  1903               	skipnz
  5093  0617  0AE9               	incf	_intervalSonerie+1,f
  5094  0618                     l8577:	
  5095                           
  5096                           ;Main.c: 275: writeString("Interval ");
  5097  0618  3051               	movlw	(STR_17-__stringbase)& (0+255)
  5098  0619  26FB  120A  118A   	fcall	_writeString
  5099                           
  5100                           ;Main.c: 276: disp_num(intervalSonerie);
  5101  061C  27AC               	fcall	PL19	;call to abstracted procedure
  5102  061D  120A  158A  260F   	fcall	_disp_num
      +       120A  118A         
  5103                           
  5104                           ;Main.c: 278: unsigned int count = 10000;
  5105  0622  3010               	movlw	16
  5106  0623  27D8               	call	PL26	;select bank 0
  5107  0624  00A3               	movwf	tastaApasata@count
  5108  0625  3027               	movlw	39
  5109  0626  00A4               	movwf	tastaApasata@count+1
  5110  0627                     l8587:	
  5111                           ;Main.c: 279: while(count--)
  5112                           
  5113  0627  3001               	movlw	1
  5114  0628  02A3               	subwf	tastaApasata@count,f
  5115  0629  3000               	movlw	0
  5116  062A  1C03               	skipc
  5117  062B  03A4               	decf	tastaApasata@count+1,f
  5118  062C  02A4               	subwf	tastaApasata@count+1,f
  5119  062D  0A23               	incf	tastaApasata@count,w
  5120  062E  1903               	skipnz
  5121  062F  0A24               	incf	tastaApasata@count+1,w
  5122  0630  1903               	btfsc	3,2
  5123  0631  2E3F               	goto	l8589
  5124                           
  5125                           ;Main.c: 280: {
  5126                           ;Main.c: 281: unsigned int count2 = 10;
  5127  0632  300A               	movlw	10
  5128  0633  00A5               	movwf	tastaApasata@count2
  5129  0634  01A6               	clrf	tastaApasata@count2+1
  5130  0635                     l8585:	
  5131                           ;Main.c: 282: while(count2--);
  5132                           
  5133  0635  3001               	movlw	1
  5134  0636  02A5               	subwf	tastaApasata@count2,f
  5135  0637  1C03               	skipc
  5136  0638  03A6               	decf	tastaApasata@count2+1,f
  5137  0639  0A25               	incf	tastaApasata@count2,w
  5138  063A  1903               	skipnz
  5139  063B  0A26               	incf	tastaApasata@count2+1,w
  5140  063C  1903               	btfsc	3,2
  5141  063D  2E27               	goto	l8587
  5142  063E  2E35               	goto	l8585
  5143  063F                     l8589:	
  5144                           
  5145                           ;Main.c: 283: }
  5146                           ;Main.c: 286: }
  5147                           ;Main.c: 288: if(tasta == '-')
  5148  063F  0853               	movf	tastaApasata@tasta,w
  5149  0640  3A2D               	xorlw	45
  5150  0641  1D03               	skipz
  5151  0642  0008               	return
  5152                           
  5153                           ;Main.c: 289: {
  5154                           ;Main.c: 290: clearScreen();
  5155  0643  26EB  120A  118A   	fcall	_clearScreen
  5156                           
  5157                           ;Main.c: 292: if(intervalSonerie >3)
  5158  0646  3000               	movlw	0
  5159  0647  27D8               	call	PL26	;select bank 0
  5160  0648  0269               	subwf	_intervalSonerie+1,w
  5161  0649  3004               	movlw	4
  5162  064A  1903               	skipnz
  5163  064B  0268               	subwf	_intervalSonerie,w
  5164  064C  1C03               	skipc
  5165  064D  2E54               	goto	l8597
  5166                           
  5167                           ;Main.c: 293: intervalSonerie--;
  5168  064E  3001               	movlw	1
  5169  064F  02E8               	subwf	_intervalSonerie,f
  5170  0650  3000               	movlw	0
  5171  0651  1C03               	skipc
  5172  0652  03E9               	decf	_intervalSonerie+1,f
  5173  0653  02E9               	subwf	_intervalSonerie+1,f
  5174  0654                     l8597:	
  5175                           
  5176                           ;Main.c: 295: writeString("Interval ");
  5177  0654  3051               	movlw	(STR_17-__stringbase)& (0+255)
  5178  0655  26FB  120A  118A   	fcall	_writeString
  5179                           
  5180                           ;Main.c: 296: disp_num(intervalSonerie);
  5181  0658  27AC               	fcall	PL19	;call to abstracted procedure
  5182  0659  120A  158A  260F   	fcall	_disp_num
      +       120A  118A         
  5183                           
  5184                           ;Main.c: 298: unsigned int count = 10000;
  5185  065E  3010               	movlw	16
  5186  065F  27D8               	call	PL26	;select bank 0
  5187  0660  00A7               	movwf	tastaApasata@count_2852
  5188  0661  3027               	movlw	39
  5189  0662  00A8               	movwf	tastaApasata@count_2852+1
  5190  0663                     l8607:	
  5191                           ;Main.c: 299: while(count--)
  5192                           
  5193  0663  3001               	movlw	1
  5194  0664  02A7               	subwf	tastaApasata@count_2852,f
  5195  0665  3000               	movlw	0
  5196  0666  1C03               	skipc
  5197  0667  03A8               	decf	tastaApasata@count_2852+1,f
  5198  0668  02A8               	subwf	tastaApasata@count_2852+1,f
  5199  0669  0A27               	incf	tastaApasata@count_2852,w
  5200  066A  1903               	skipnz
  5201  066B  0A28               	incf	tastaApasata@count_2852+1,w
  5202  066C  1903               	btfsc	3,2
  5203  066D  0008               	return
  5204                           
  5205                           ;Main.c: 300: {
  5206                           ;Main.c: 301: unsigned int count2 = 10;
  5207  066E  300A               	movlw	10
  5208  066F  00A9               	movwf	tastaApasata@count2_2853
  5209  0670  01AA               	clrf	tastaApasata@count2_2853+1
  5210  0671                     l8605:	
  5211                           ;Main.c: 302: while(count2--);
  5212                           
  5213  0671  3001               	movlw	1
  5214  0672  02A9               	subwf	tastaApasata@count2_2853,f
  5215  0673  1C03               	skipc
  5216  0674  03AA               	decf	tastaApasata@count2_2853+1,f
  5217  0675  0A29               	incf	tastaApasata@count2_2853,w
  5218  0676  1903               	skipnz
  5219  0677  0A2A               	incf	tastaApasata@count2_2853+1,w
  5220  0678  1903               	btfsc	3,2
  5221  0679  2E63               	goto	l8607
  5222  067A  2E71               	goto	l8605
  5223  067B                     __end_of_tastaApasata:	
  5224  067B                     __ptext874:	
  5225 ;; =============== function _writeCommand ends ============
  5226                           
  5227                           
  5228 ;; *************** function _GetChar2 *****************
  5229 ;; Defined at:
  5230 ;;		line 125 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\Keypad.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;		None
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;  key             1    5[COMMON] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;                  2    3[COMMON] int 
  5237 ;; Registers used:
  5238 ;;		wreg, status,2, status,0, pclath, cstack
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5244 ;;      Params:         2       0       0       0       0
  5245 ;;      Locals:         1       0       0       0       0
  5246 ;;      Temps:          0       0       0       0       0
  5247 ;;      Totals:         3       0       0       0       0
  5248 ;;Total ram usage:        3 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    1
  5251 ;; This function calls:
  5252 ;;		_readSwitches
  5253 ;; This function is called by:
  5254 ;;		_tastaApasata
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257  067B                     _GetChar2:	
  5258                           
  5259                           ;Keypad.c: 126: char key = 'x';
  5260                           
  5261                           ; Regs used in _GetChar2: [wreg+status,2+status,0+pclath+cstack]
  5262  067B  3078               	movlw	120
  5263  067C                     L1:	
  5264  067C  00F5               	movwf	GetChar2@key
  5265  067D  3A78               	xorlw	120
  5266  067E  1D03               	btfss	3,2
  5267  067F  2E86               	goto	l8133
  5268                           
  5269                           ;Keypad.c: 130: key = readSwitches();
  5270                           
  5271                           ;Keypad.c: 129: while(key == 'x'){
  5272  0680  120A  158A  2429   	fcall	_readSwitches
      +       120A  118A         
  5273  0685  2E7C               	goto	L1
  5274  0686                     l8133:	
  5275                           
  5276                           ;Keypad.c: 131: }
  5277                           ;Keypad.c: 133: if(key == '0')
  5278  0686  0875               	movf	GetChar2@key,w
  5279  0687  3A30               	xorlw	48
  5280  0688  1D03               	skipz
  5281  0689  2E8D               	goto	l8139
  5282  068A                     l8135:	
  5283                           
  5284                           ;Keypad.c: 134: return 0;
  5285  068A  01F3               	clrf	?_GetChar2
  5286  068B  01F4               	clrf	?_GetChar2+1
  5287  068C  0008               	return
  5288  068D                     l8139:	
  5289                           
  5290                           ;Keypad.c: 135: if(key == '1')
  5291  068D  0875               	movf	GetChar2@key,w
  5292  068E  3A31               	xorlw	49
  5293  068F  1D03               	skipz
  5294  0690  2E95               	goto	l8145
  5295                           
  5296                           ;Keypad.c: 136: return 1;
  5297  0691  01F3               	clrf	?_GetChar2
  5298  0692  0AF3               	incf	?_GetChar2,f
  5299  0693  01F4               	clrf	?_GetChar2+1
  5300  0694  0008               	return
  5301  0695                     l8145:	
  5302                           
  5303                           ;Keypad.c: 137: if(key == '2')
  5304  0695  0875               	movf	GetChar2@key,w
  5305  0696  3A32               	xorlw	50
  5306  0697  1D03               	skipz
  5307  0698  2E9D               	goto	l8151
  5308                           
  5309                           ;Keypad.c: 138: return 2;
  5310  0699  3002               	movlw	2
  5311  069A  00F3               	movwf	?_GetChar2
  5312  069B  01F4               	clrf	?_GetChar2+1
  5313  069C  0008               	return
  5314  069D                     l8151:	
  5315                           
  5316                           ;Keypad.c: 139: if(key == '3')
  5317  069D  0875               	movf	GetChar2@key,w
  5318  069E  3A33               	xorlw	51
  5319  069F  1D03               	skipz
  5320  06A0  2EA5               	goto	l8157
  5321                           
  5322                           ;Keypad.c: 140: return 3;
  5323  06A1  3003               	movlw	3
  5324  06A2  00F3               	movwf	?_GetChar2
  5325  06A3  01F4               	clrf	?_GetChar2+1
  5326  06A4  0008               	return
  5327  06A5                     l8157:	
  5328                           
  5329                           ;Keypad.c: 141: if(key == '4')
  5330  06A5  0875               	movf	GetChar2@key,w
  5331  06A6  3A34               	xorlw	52
  5332  06A7  1D03               	skipz
  5333  06A8  2EAD               	goto	l8163
  5334                           
  5335                           ;Keypad.c: 142: return 4;
  5336  06A9  3004               	movlw	4
  5337  06AA  00F3               	movwf	?_GetChar2
  5338  06AB  01F4               	clrf	?_GetChar2+1
  5339  06AC  0008               	return
  5340  06AD                     l8163:	
  5341                           
  5342                           ;Keypad.c: 143: if(key == '5')
  5343  06AD  0875               	movf	GetChar2@key,w
  5344  06AE  3A35               	xorlw	53
  5345  06AF  1D03               	skipz
  5346  06B0  2EB5               	goto	l8169
  5347                           
  5348                           ;Keypad.c: 144: return 5;
  5349  06B1  3005               	movlw	5
  5350  06B2  00F3               	movwf	?_GetChar2
  5351  06B3  01F4               	clrf	?_GetChar2+1
  5352  06B4  0008               	return
  5353  06B5                     l8169:	
  5354                           
  5355                           ;Keypad.c: 145: if(key == '6')
  5356  06B5  0875               	movf	GetChar2@key,w
  5357  06B6  3A36               	xorlw	54
  5358  06B7  1D03               	skipz
  5359  06B8  2EBD               	goto	l8175
  5360                           
  5361                           ;Keypad.c: 146: return 6;
  5362  06B9  3006               	movlw	6
  5363  06BA  00F3               	movwf	?_GetChar2
  5364  06BB  01F4               	clrf	?_GetChar2+1
  5365  06BC  0008               	return
  5366  06BD                     l8175:	
  5367                           
  5368                           ;Keypad.c: 147: if(key == '7')
  5369  06BD  0875               	movf	GetChar2@key,w
  5370  06BE  3A37               	xorlw	55
  5371  06BF  1D03               	skipz
  5372  06C0  2EC5               	goto	l8181
  5373                           
  5374                           ;Keypad.c: 148: return 7;
  5375  06C1  3007               	movlw	7
  5376  06C2  00F3               	movwf	?_GetChar2
  5377  06C3  01F4               	clrf	?_GetChar2+1
  5378  06C4  0008               	return
  5379  06C5                     l8181:	
  5380                           
  5381                           ;Keypad.c: 149: if(key == '8')
  5382  06C5  0875               	movf	GetChar2@key,w
  5383  06C6  3A38               	xorlw	56
  5384  06C7  1D03               	skipz
  5385  06C8  2ECD               	goto	l8187
  5386                           
  5387                           ;Keypad.c: 150: return 8;
  5388  06C9  3008               	movlw	8
  5389  06CA  00F3               	movwf	?_GetChar2
  5390  06CB  01F4               	clrf	?_GetChar2+1
  5391  06CC  0008               	return
  5392  06CD                     l8187:	
  5393                           
  5394                           ;Keypad.c: 151: if(key == '9')
  5395  06CD  0875               	movf	GetChar2@key,w
  5396  06CE  3A39               	xorlw	57
  5397  06CF  1D03               	skipz
  5398  06D0  2E8A               	goto	l8135
  5399                           
  5400                           ;Keypad.c: 152: return 9;
  5401  06D1  3009               	movlw	9
  5402  06D2  00F3               	movwf	?_GetChar2
  5403  06D3  01F4               	clrf	?_GetChar2+1
  5404  06D4  0008               	return
  5405  06D5                     __end_of_GetChar2:	
  5406  06D5                     __ptext872:	
  5407 ;; =============== function _GetTime_RTC ends ============
  5408                           
  5409                           
  5410 ;; *************** function _writeChar *****************
  5411 ;; Defined at:
  5412 ;;		line 28 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\LCD.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  LCDChar         1    wreg     unsigned char 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  LCDChar         1    2[COMMON] unsigned char 
  5417 ;; Return value:  Size  Location     Type
  5418 ;;		None               void
  5419 ;; Registers used:
  5420 ;;		wreg, status,2, status,0, pclath, cstack
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5426 ;;      Params:         0       0       0       0       0
  5427 ;;      Locals:         1       0       0       0       0
  5428 ;;      Temps:          0       0       0       0       0
  5429 ;;      Totals:         1       0       0       0       0
  5430 ;;Total ram usage:        1 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; Hardware stack levels required when called:    1
  5433 ;; This function calls:
  5434 ;;		_pulseEpin
  5435 ;; This function is called by:
  5436 ;;		_writeString
  5437 ;;		_DisplayTimeToLCD
  5438 ;;		_DisplayDateOnLCD
  5439 ;;		_tastaApasata
  5440 ;;		_disp_num
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443  06D5                     _writeChar:	
  5444                           
  5445                           ; Regs used in _writeChar: [wreg+status,2+status,0+pclath+cstack]
  5446                           ;writeChar@LCDChar stored from wreg
  5447  06D5  00F2               	movwf	writeChar@LCDChar
  5448  06D6  27D8               	call	PL26	;select bank 0
  5449                           
  5450                           ;LCD.c: 29: RD1 = 1;
  5451  06D7  300F               	movlw	15
  5452  06D8  1488               	bsf	8,1
  5453                           
  5454                           ;LCD.c: 31: PORTD &= 0x0F;
  5455  06D9  0588               	andwf	8,f	;volatile
  5456                           
  5457                           ;LCD.c: 32: PORTD |= (LCDChar&0xF0);
  5458  06DA  0872               	movf	writeChar@LCDChar,w
  5459  06DB  39F0               	andlw	240
  5460  06DC  0488               	iorwf	8,f	;volatile
  5461                           
  5462                           ;LCD.c: 33: pulseEpin();
  5463  06DD  120A  158A  23D7   	fcall	_pulseEpin
      +       120A  118A         
  5464                           
  5465                           ;LCD.c: 35: PORTD &= 0x0F;
  5466  06E2  300F               	movlw	15
  5467  06E3  27D8               	call	PL26	;select bank 0
  5468  06E4  0588               	andwf	8,f	;volatile
  5469                           
  5470                           ;LCD.c: 36: PORTD |= ((LCDChar<<4)&0xF0);
  5471  06E5  0E72               	swapf	writeChar@LCDChar,w
  5472  06E6  39F0               	andlw	240
  5473  06E7  0488               	iorwf	8,f	;volatile
  5474                           
  5475                           ;LCD.c: 37: pulseEpin();
  5476  06E8  120A  158A  2BD7   	ljmp	l8051
  5477  06EB                     __end_of_writeChar:	
  5478  06EB                     __ptext865:	
  5479 ;; =============== function _disp_num ends ============
  5480                           
  5481                           
  5482 ;; *************** function _clearScreen *****************
  5483 ;; Defined at:
  5484 ;;		line 99 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\LCD.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;		None
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;		None
  5489 ;; Return value:  Size  Location     Type
  5490 ;;		None               void
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0, pclath, cstack
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5498 ;;      Params:         0       0       0       0       0
  5499 ;;      Locals:         0       0       0       0       0
  5500 ;;      Temps:          2       0       0       0       0
  5501 ;;      Totals:         2       0       0       0       0
  5502 ;;Total ram usage:        2 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    2
  5505 ;; This function calls:
  5506 ;;		_writeCommand
  5507 ;; This function is called by:
  5508 ;;		_DisplayTimeToLCD
  5509 ;;		_main
  5510 ;;		_test
  5511 ;;		_tastaApasata
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514  06EB                     _clearScreen:	
  5515                           
  5516                           ;LCD.c: 100: writeCommand(0x01);
  5517                           
  5518                           ; Regs used in _clearScreen: [wreg+status,2+status,0+pclath+cstack]
  5519  06EB  3001               	movlw	1
  5520  06EC  120A  158A  23ED   	fcall	_writeCommand
      +       120A  118A         
  5521                           
  5522                           ;LCD.c: 101: _delay((unsigned long)((2)*(20000000/4000.0)));
  5523  06F1  300D               	movlw	13
  5524  06F2  00F4               	movwf	??_clearScreen+1
  5525  06F3  30FB               	movlw	251
  5526  06F4  00F3               	movwf	??_clearScreen
  5527  06F5                     u2377:	
  5528  06F5  0BF3               	decfsz	??_clearScreen,f
  5529  06F6  2EF5               	goto	u2377
  5530  06F7  0BF4               	decfsz	??_clearScreen+1,f
  5531  06F8  2EF5               	goto	u2377
  5532  06F9  2EFA               	nop2
  5533  06FA  0008               	return
  5534  06FB                     __end_of_clearScreen:	
  5535  06FB                     __ptext866:	
  5536 ;; =============== function _clearScreen ends ============
  5537                           
  5538                           
  5539 ;; *************** function _writeString *****************
  5540 ;; Defined at:
  5541 ;;		line 92 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\LCD.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;  s               1    wreg     PTR const unsigned char 
  5544 ;;		 -> STR_25(12), STR_24(15), STR_23(12), STR_22(7), 
  5545 ;;		 -> STR_21(8), STR_20(11), STR_19(19), STR_18(10), 
  5546 ;;		 -> STR_17(10), STR_16(9), STR_15(10), STR_14(8), 
  5547 ;;		 -> STR_13(12), STR_12(11), STR_11(9), STR_10(4), 
  5548 ;;		 -> STR_9(4), STR_8(4), STR_7(4), STR_6(4), 
  5549 ;;		 -> STR_5(4), STR_4(4), STR_3(4), STR_2(3), 
  5550 ;;		 -> STR_1(3), 
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;  s               1    3[COMMON] PTR const unsigned char 
  5553 ;;		 -> STR_25(12), STR_24(15), STR_23(12), STR_22(7), 
  5554 ;;		 -> STR_21(8), STR_20(11), STR_19(19), STR_18(10), 
  5555 ;;		 -> STR_17(10), STR_16(9), STR_15(10), STR_14(8), 
  5556 ;;		 -> STR_13(12), STR_12(11), STR_11(9), STR_10(4), 
  5557 ;;		 -> STR_9(4), STR_8(4), STR_7(4), STR_6(4), 
  5558 ;;		 -> STR_5(4), STR_4(4), STR_3(4), STR_2(3), 
  5559 ;;		 -> STR_1(3), 
  5560 ;; Return value:  Size  Location     Type
  5561 ;;		None               void
  5562 ;; Registers used:
  5563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5569 ;;      Params:         0       0       0       0       0
  5570 ;;      Locals:         1       0       0       0       0
  5571 ;;      Temps:          0       0       0       0       0
  5572 ;;      Totals:         1       0       0       0       0
  5573 ;;Total ram usage:        1 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:    2
  5576 ;; This function calls:
  5577 ;;		_writeChar
  5578 ;; This function is called by:
  5579 ;;		_DisplayTimeToLCD
  5580 ;;		_DisplayDateOnLCD
  5581 ;;		_test
  5582 ;;		_tastaApasata
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585  06FB                     _writeString:	
  5586                           
  5587                           ; Regs used in _writeString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5588                           ;writeString@s stored from wreg
  5589  06FB  00F3               	movwf	writeString@s
  5590  06FC                     l8331:	
  5591                           ;LCD.c: 93: while(*s)
  5592                           
  5593  06FC  0873               	movf	writeString@s,w
  5594  06FD  0084               	movwf	4
  5595  06FE  120A  158A  2000   	fcall	stringdir
      +       120A  118A         
  5596  0703  3800               	iorlw	0
  5597  0704  1903               	btfsc	3,2
  5598  0705  0008               	return
  5599                           
  5600                           ;LCD.c: 94: writeChar(*s++);
  5601  0706  0873               	movf	writeString@s,w
  5602  0707  0084               	movwf	4
  5603  0708  120A  158A  2000   	fcall	stringdir
      +       120A  118A         
  5604  070D  26D5  120A  118A   	fcall	_writeChar
  5605  0710  0AF3               	incf	writeString@s,f
  5606  0711  2EFC               	goto	l8331
  5607  0712                     __end_of_writeString:	
  5608  0712                     __ptext884:	
  5609 ;; =============== function ___lbdiv ends ============
  5610                           
  5611                           
  5612 ;; *************** function ___lwdiv *****************
  5613 ;; Defined at:
  5614 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwdiv.c"
  5615 ;; Parameters:    Size  Location     Type
  5616 ;;  divisor         2    6[COMMON] unsigned int 
  5617 ;;  dividend        2    8[COMMON] unsigned int 
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;  quotient        2   10[COMMON] unsigned int 
  5620 ;;  counter         1   12[COMMON] unsigned char 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  2    6[COMMON] unsigned int 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0
  5625 ;; Tracked objects:
  5626 ;;		On entry : 60/0
  5627 ;;		On exit  : 60/0
  5628 ;;		Unchanged: FFF9F/0
  5629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5630 ;;      Params:         4       0       0       0       0
  5631 ;;      Locals:         3       0       0       0       0
  5632 ;;      Temps:          0       0       0       0       0
  5633 ;;      Totals:         7       0       0       0       0
  5634 ;;Total ram usage:        7 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; This function calls:
  5637 ;;		Nothing
  5638 ;; This function is called by:
  5639 ;;		_detectieIncendiu
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642  0712                     ___lwdiv:	
  5643                           
  5644                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5645  0712  01FA               	clrf	___lwdiv@quotient
  5646  0713  01FB               	clrf	___lwdiv@quotient+1
  5647  0714  0877               	movf	___lwdiv@divisor+1,w
  5648  0715  0476               	iorwf	___lwdiv@divisor,w
  5649  0716  1903               	skipnz
  5650  0717  2F37               	goto	l7859
  5651  0718  01FC               	clrf	___lwdiv@counter
  5652  0719                     L6:	
  5653  0719  0AFC               	incf	___lwdiv@counter,f
  5654  071A  1BF7               	btfsc	___lwdiv@divisor+1,7
  5655  071B  2F20               	goto	l7847
  5656  071C  1003               	clrc
  5657  071D  0DF6               	rlf	___lwdiv@divisor,f
  5658  071E  0DF7               	rlf	___lwdiv@divisor+1,f
  5659  071F  2F19               	goto	L6
  5660  0720                     l7847:	
  5661  0720  1003               	clrc
  5662  0721  0DFA               	rlf	___lwdiv@quotient,f
  5663  0722  0DFB               	rlf	___lwdiv@quotient+1,f
  5664  0723  0877               	movf	___lwdiv@divisor+1,w
  5665  0724  0279               	subwf	___lwdiv@dividend+1,w
  5666  0725  1D03               	skipz
  5667  0726  2F29               	goto	u1305
  5668  0727  0876               	movf	___lwdiv@divisor,w
  5669  0728  0278               	subwf	___lwdiv@dividend,w
  5670  0729                     u1305:	
  5671  0729  1C03               	skipc
  5672  072A  2F33               	goto	L7
  5673  072B  0876               	movf	___lwdiv@divisor,w
  5674  072C  02F8               	subwf	___lwdiv@dividend,f
  5675  072D  0877               	movf	___lwdiv@divisor+1,w
  5676  072E  1C03               	skipc
  5677  072F  03F9               	decf	___lwdiv@dividend+1,f
  5678  0730  02F9               	subwf	___lwdiv@dividend+1,f
  5679  0731  147A               	bsf	___lwdiv@quotient,0
  5680  0732  1003               	clrc
  5681  0733                     L7:	
  5682  0733  0CF7               	rrf	___lwdiv@divisor+1,f
  5683  0734  0CF6               	rrf	___lwdiv@divisor,f
  5684  0735  0BFC               	decfsz	___lwdiv@counter,f
  5685  0736  2F20               	goto	l7847
  5686  0737                     l7859:	
  5687  0737  087B               	movf	___lwdiv@quotient+1,w
  5688  0738  00F7               	movwf	?___lwdiv+1
  5689  0739  087A               	movf	___lwdiv@quotient,w
  5690  073A  00F6               	movwf	?___lwdiv
  5691  073B  0008               	return
  5692  073C                     __end_of___lwdiv:	
  5693  073C                     PL2:	
  5694  073C  0837               	movf	detectieIncendiu@digit1+1,w
  5695  073D  00F1               	movwf	?___wmul+1
  5696  073E  0836               	movf	detectieIncendiu@digit1,w
  5697  073F  00F0               	movwf	?___wmul
  5698  0740  3018               	movlw	24
  5699  0741  00F2               	movwf	?___wmul+2
  5700  0742  30FC               	movlw	252
  5701  0743  00F3               	movwf	?___wmul+3
  5702  0744  0008               	return
  5703  0745                     PL3:	
  5704  0745  0877               	movf	?___lwdiv+1,w
  5705  0746  00B5               	movwf	detectieIncendiu@digit2+1
  5706  0747  0876               	movf	?___lwdiv,w
  5707  0748  00B4               	movwf	detectieIncendiu@digit2
  5708  0749  300A               	movlw	10
  5709  074A  00F6               	movwf	?___lwdiv
  5710  074B  01F7               	clrf	?___lwdiv+1
  5711  074C  0008               	return
  5712  074D                     PL4:	
  5713  074D  0835               	movf	detectieIncendiu@digit2+1,w
  5714  074E  00F1               	movwf	?___wmul+1
  5715  074F  0834               	movf	detectieIncendiu@digit2,w
  5716  0750  00F0               	movwf	?___wmul
  5717  0751  309C               	movlw	156
  5718  0752  00F2               	movwf	?___wmul+2
  5719  0753  30FF               	movlw	255
  5720  0754  00F3               	movwf	?___wmul+3
  5721  0755  0008               	return
  5722  0756                     PL5:	
  5723  0756  0877               	movf	?___lwdiv+1,w
  5724  0757  00B7               	movwf	detectieIncendiu@digit1+1
  5725  0758  0876               	movf	?___lwdiv,w
  5726  0759  00B6               	movwf	detectieIncendiu@digit1
  5727  075A  3064               	movlw	100
  5728  075B  00F6               	movwf	?___lwdiv
  5729  075C  01F7               	clrf	?___lwdiv+1
  5730  075D  0008               	return
  5731  075E                     PL6:	
  5732  075E  07AC               	addwf	detectieIncendiu@digit4,f
  5733  075F  1803               	skipnc
  5734  0760  0AAD               	incf	detectieIncendiu@digit4+1,f
  5735  0761  0871               	movf	?___wmul+1,w
  5736  0762  07AD               	addwf	detectieIncendiu@digit4+1,f
  5737  0763  0008               	return
  5738  0764                     PL7:	
  5739  0764  0877               	movf	?___lwdiv+1,w
  5740  0765  00B3               	movwf	detectieIncendiu@digit3+1
  5741  0766  0876               	movf	?___lwdiv,w
  5742  0767  00B2               	movwf	detectieIncendiu@digit3
  5743  0768  0833               	movf	detectieIncendiu@digit3+1,w
  5744  0769  00F1               	movwf	?___wmul+1
  5745  076A  0832               	movf	detectieIncendiu@digit3,w
  5746  076B  00F0               	movwf	?___wmul
  5747  076C  30F6               	movlw	246
  5748  076D  00F2               	movwf	?___wmul+2
  5749  076E  30FF               	movlw	255
  5750  076F  00F3               	movwf	?___wmul+3
  5751  0770  0008               	return
  5752  0771                     PL8:	
  5753  0771  0870               	movf	?___wmul,w
  5754  0772  07AC               	addwf	detectieIncendiu@digit4,f
  5755  0773  1803               	skipnc
  5756  0774  0AAD               	incf	detectieIncendiu@digit4+1,f
  5757  0775  0871               	movf	?___wmul+1,w
  5758  0776  07AD               	addwf	detectieIncendiu@digit4+1,f
  5759  0777  0008               	return
  5760  0778                     PL9:	
  5761  0778  00B5               	movwf	verificareOreSonerie@dif+1
  5762  0779  0832               	movf	verificareOreSonerie@newSecond,w
  5763  077A  00B4               	movwf	verificareOreSonerie@dif
  5764  077B  0830               	movf	verificareOreSonerie@prevSecond,w
  5765  077C  02B4               	subwf	verificareOreSonerie@dif,f
  5766  077D  0831               	movf	verificareOreSonerie@prevSecond+1,w
  5767  077E  1C03               	skipc
  5768  077F  03B5               	decf	verificareOreSonerie@dif+1,f
  5769  0780  02B5               	subwf	verificareOreSonerie@dif+1,f
  5770  0781  0008               	return
  5771  0782                     PL10:	
  5772  0782  07AD               	addwf	detectieIncendiu@digit4+1,f
  5773  0783  0837               	movf	detectieIncendiu@digit1+1,w
  5774  0784  00F1               	movwf	?___wmul+1
  5775  0785  0836               	movf	detectieIncendiu@digit1,w
  5776  0786  00F0               	movwf	?___wmul
  5777  0787  30E8               	movlw	232
  5778  0788  00F2               	movwf	?___wmul+2
  5779  0789  3003               	movlw	3
  5780  078A  00F3               	movwf	?___wmul+3
  5781  078B  0008               	return
  5782  078C                     PL11:	
  5783  078C  0870               	movf	?___wmul,w
  5784  078D  0720               	addwf	??_detectieIncendiu,w
  5785  078E  00A2               	movwf	??_detectieIncendiu+2
  5786  078F  0871               	movf	?___wmul+1,w
  5787  0790  1803               	skipnc
  5788  0791  0A71               	incf	?___wmul+1,w
  5789  0792  0721               	addwf	??_detectieIncendiu+1,w
  5790  0793  00A3               	movwf	??_detectieIncendiu+3
  5791  0794  0008               	return
  5792  0795                     PL13:	
  5793  0795  0835               	movf	detectieIncendiu@digit2+1,w
  5794  0796  00F1               	movwf	?___wmul+1
  5795  0797  0834               	movf	detectieIncendiu@digit2,w
  5796  0798  00F0               	movwf	?___wmul
  5797  0799  3064               	movlw	100
  5798  079A  00F2               	movwf	?___wmul+2
  5799  079B  01F3               	clrf	?___wmul+3
  5800  079C  0008               	return
  5801  079D                     PL14:	
  5802  079D  0833               	movf	detectieIncendiu@digit3+1,w
  5803  079E  00F1               	movwf	?___wmul+1
  5804  079F  0832               	movf	detectieIncendiu@digit3,w
  5805  07A0  00F0               	movwf	?___wmul
  5806  07A1  300A               	movlw	10
  5807  07A2  00F2               	movwf	?___wmul+2
  5808  07A3  01F3               	clrf	?___wmul+3
  5809  07A4  0008               	return
  5810  07A5                     PL18:	
  5811  07A5  0870               	movf	?___wmul,w
  5812  07A6  07A8               	addwf	detectieIncendiu@temperatura,f
  5813  07A7  1803               	skipnc
  5814  07A8  0AA9               	incf	detectieIncendiu@temperatura+1,f
  5815  07A9  0871               	movf	?___wmul+1,w
  5816  07AA  07A9               	addwf	detectieIncendiu@temperatura+1,f
  5817  07AB  0008               	return
  5818  07AC                     PL19:	
  5819  07AC  1283               	bcf	3,5	;RP0=0, select bank0
  5820  07AD  1303               	bcf	3,6	;RP1=0, select bank0
  5821  07AE  0869               	movf	_intervalSonerie+1,w
  5822  07AF  00F9               	movwf	?_disp_num+1
  5823  07B0  0868               	movf	_intervalSonerie,w
  5824  07B1  00F8               	movwf	?_disp_num
  5825  07B2  0008               	return
  5826  07B3                     PL20:	
  5827  07B3  0870               	movf	?___wmul,w
  5828  07B4  07AA               	addwf	detectieIncendiu@fum,f
  5829  07B5  1803               	skipnc
  5830  07B6  0AAB               	incf	detectieIncendiu@fum+1,f
  5831  07B7  0871               	movf	?___wmul+1,w
  5832  07B8  07AB               	addwf	detectieIncendiu@fum+1,f
  5833  07B9  0008               	return
  5834  07BA                     PL21:	
  5835  07BA  0875               	movf	DisplayTimeToLCD@pTimeArray,w
  5836  07BB  3E02               	addlw	2
  5837  07BC  0084               	movwf	4
  5838  07BD  1383               	bcf	3,7	;select IRP bank0
  5839  07BE  0800               	movf	0,w
  5840  07BF  0008               	return
  5841  07C0                     PL22:	
  5842  07C0  0875               	movf	DisplayTimeToLCD@pTimeArray,w
  5843  07C1  3E01               	addlw	1
  5844  07C2  0084               	movwf	4
  5845  07C3  1383               	bcf	3,7	;select IRP bank0
  5846  07C4  0800               	movf	0,w
  5847  07C5  0008               	return
  5848  07C6                     PL23:	
  5849  07C6  0875               	movf	DisplayDateOnLCD@pDateArray,w
  5850  07C7  3E03               	addlw	3
  5851  07C8  0084               	movwf	4
  5852  07C9  1383               	bcf	3,7	;select IRP bank0
  5853  07CA  0800               	movf	0,w
  5854  07CB  0008               	return
  5855  07CC                     PL24:	
  5856  07CC  0875               	movf	DisplayDateOnLCD@pDateArray,w
  5857  07CD  3E02               	addlw	2
  5858  07CE  0084               	movwf	4
  5859  07CF  1383               	bcf	3,7	;select IRP bank0
  5860  07D0  0800               	movf	0,w
  5861  07D1  0008               	return
  5862  07D2                     PL25:	
  5863  07D2  0875               	movf	DisplayDateOnLCD@pDateArray,w
  5864  07D3  3E01               	addlw	1
  5865  07D4  0084               	movwf	4
  5866  07D5  1383               	bcf	3,7	;select IRP bank0
  5867  07D6  0800               	movf	0,w
  5868  07D7  0008               	return
  5869  07D8                     PL26:	
  5870  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  5871  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  5872  07DA  0008               	return
  5873  07DB                     __ptext878:	
  5874 ;; =============== function _WriteBTo_RTC ends ============
  5875                           
  5876                           
  5877 ;; *************** function _GetADCValue *****************
  5878 ;; Defined at:
  5879 ;;		line 15 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\ADC.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;  Channel         1    wreg     unsigned char 
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;  Channel         1    4[COMMON] unsigned char 
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  2    0[COMMON] unsigned int 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 60/20
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5893 ;;      Params:         2       0       0       0       0
  5894 ;;      Locals:         1       0       0       0       0
  5895 ;;      Temps:          2       0       0       0       0
  5896 ;;      Totals:         5       0       0       0       0
  5897 ;;Total ram usage:        5 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; This function calls:
  5900 ;;		Nothing
  5901 ;; This function is called by:
  5902 ;;		_detectieIncendiu
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905  07DB                     _GetADCValue:	
  5906                           
  5907                           ; Regs used in _GetADCValue: [wreg+status,2+status,0]
  5908                           ;GetADCValue@Channel stored from wreg
  5909  07DB  00F4               	movwf	GetADCValue@Channel
  5910                           
  5911                           ;ADC.c: 16: ADCON0 &= 0xc7;
  5912  07DC  30C7               	movlw	199
  5913  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  5914  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  5915  07DF  059F               	andwf	31,f	;volatile
  5916                           
  5917                           ;ADC.c: 17: ADCON0 |= (Channel<<3);
  5918  07E0  0874               	movf	GetADCValue@Channel,w
  5919  07E1  00F2               	movwf	??_GetADCValue
  5920  07E2  1003               	clrc
  5921  07E3  0DF2               	rlf	??_GetADCValue,f
  5922  07E4  1003               	clrc
  5923  07E5  0DF2               	rlf	??_GetADCValue,f
  5924  07E6  1003               	clrc
  5925  07E7  0D72               	rlf	??_GetADCValue,w
  5926  07E8  049F               	iorwf	31,f	;volatile
  5927                           
  5928                           ;ADC.c: 19: _delay((unsigned long)((10)*(20000000/4000.0)));
  5929  07E9  3041               	movlw	65
  5930  07EA  00F3               	movwf	??_GetADCValue+1
  5931  07EB  30EE               	movlw	238
  5932  07EC  00F2               	movwf	??_GetADCValue
  5933  07ED                     u2437:	
  5934  07ED  0BF2               	decfsz	??_GetADCValue,f
  5935  07EE  2FED               	goto	u2437
  5936  07EF  0BF3               	decfsz	??_GetADCValue+1,f
  5937  07F0  2FED               	goto	u2437
  5938  07F1  0064               	clrwdt
  5939                           
  5940                           ;ADC.c: 21: GO_nDONE = 1;
  5941  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  5942  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  5943  07F4  151F               	bsf	31,2
  5944  07F5                     l4273:	
  5945                           ;ADC.c: 23: while(GO_nDONE);
  5946                           
  5947  07F5  191F               	btfsc	31,2
  5948  07F6  2FF5               	goto	l4273
  5949                           
  5950                           ;ADC.c: 25: return ((ADRESH<<8)+ADRESL);
  5951  07F7  081E               	movf	30,w	;volatile
  5952  07F8  00F1               	movwf	?_GetADCValue+1
  5953  07F9  01F0               	clrf	?_GetADCValue
  5954  07FA  1683               	bsf	3,5	;RP0=1, select bank1
  5955  07FB  081E               	movf	30,w	;volatile
  5956  07FC  07F0               	addwf	?_GetADCValue,f
  5957  07FD  1803               	skipnc
  5958  07FE  0AF1               	incf	?_GetADCValue+1,f
  5959  07FF  0008               	return
  5960  0800                     __end_of_GetADCValue:	
  5961                           
  5962                           	psect	text867
  5963  0B79                     __ptext867:	
  5964 ;; =============== function _writeString ends ============
  5965                           
  5966                           
  5967 ;; *************** function _initLCD *****************
  5968 ;; Defined at:
  5969 ;;		line 42 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\LCD.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;		None
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;		None
  5974 ;; Return value:  Size  Location     Type
  5975 ;;		None               void
  5976 ;; Registers used:
  5977 ;;		wreg, status,2, status,0, pclath, cstack
  5978 ;; Tracked objects:
  5979 ;;		On entry : 17F/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5983 ;;      Params:         0       0       0       0       0
  5984 ;;      Locals:         0       0       0       0       0
  5985 ;;      Temps:          3       0       0       0       0
  5986 ;;      Totals:         3       0       0       0       0
  5987 ;;Total ram usage:        3 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    2
  5990 ;; This function calls:
  5991 ;;		_pulseEpin
  5992 ;;		_writeCommand
  5993 ;; This function is called by:
  5994 ;;		_main
  5995 ;; This function uses a non-reentrant model
  5996 ;;
  5997  0B79                     _initLCD:	
  5998                           
  5999                           ;LCD.c: 44: RD0 = 0;
  6000                           
  6001                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
  6002                           
  6003                           ;LCD.c: 45: RD1 = 0;
  6004                           
  6005                           ;LCD.c: 46: RD4 = 0;
  6006                           
  6007                           ;LCD.c: 47: RD5 = 0;
  6008                           
  6009                           ;LCD.c: 48: RD6 = 0;
  6010                           
  6011                           ;LCD.c: 49: RD7 = 0;
  6012  0B79  23FF  120A  158A   	fcall	PL16	;call to abstracted procedure
  6013                           
  6014                           ;LCD.c: 50: TRISD0 = 0;
  6015  0B7C  1683               	bsf	3,5	;RP0=1, select bank1
  6016  0B7D  3002               	movlw	2
  6017                           
  6018                           ;LCD.c: 51: TRISD1 = 0;
  6019                           
  6020                           ;LCD.c: 52: TRISD4 = 0;
  6021                           
  6022                           ;LCD.c: 53: TRISD5 = 0;
  6023                           
  6024                           ;LCD.c: 54: TRISD6 = 0;
  6025                           
  6026                           ;LCD.c: 55: TRISD7 = 0;
  6027  0B7E  23FF  120A  158A   	fcall	PL16	;call to abstracted procedure
  6028                           
  6029                           ;LCD.c: 58: _delay((unsigned long)((40)*(20000000/4000.0)));
  6030  0B81  00F5               	movwf	??_initLCD+2
  6031  0B82  3004               	movlw	4
  6032  0B83  00F4               	movwf	??_initLCD+1
  6033  0B84  30BA               	movlw	186
  6034  0B85  00F3               	movwf	??_initLCD
  6035  0B86                     u2387:	
  6036  0B86  0BF3               	decfsz	??_initLCD,f
  6037  0B87  2B86               	goto	u2387
  6038  0B88  0BF4               	decfsz	??_initLCD+1,f
  6039  0B89  2B86               	goto	u2387
  6040  0B8A  0BF5               	decfsz	??_initLCD+2,f
  6041  0B8B  2B86               	goto	u2387
  6042  0B8C  0064               	clrwdt
  6043                           
  6044                           ;LCD.c: 60: PORTD &= 0x0F;
  6045                           
  6046                           ;LCD.c: 61: PORTD |= 0x30;
  6047  0B8D  2406  120A  158A   	fcall	PL17	;call to abstracted procedure
  6048                           
  6049                           ;LCD.c: 62: pulseEpin();
  6050  0B90  23D7  120A  158A   	fcall	_pulseEpin
  6051                           
  6052                           ;LCD.c: 64: _delay((unsigned long)((6)*(20000000/4000.0)));
  6053  0B93  3027               	movlw	39
  6054  0B94  00F4               	movwf	??_initLCD+1
  6055  0B95  30F5               	movlw	245
  6056  0B96  00F3               	movwf	??_initLCD
  6057  0B97                     u2397:	
  6058  0B97  0BF3               	decfsz	??_initLCD,f
  6059  0B98  2B97               	goto	u2397
  6060  0B99  0BF4               	decfsz	??_initLCD+1,f
  6061  0B9A  2B97               	goto	u2397
  6062                           
  6063                           ;LCD.c: 66: PORTD &= 0x0F;
  6064  0B9B  300F               	movlw	15
  6065  0B9C  240D               	call	PL27	;select bank 0
  6066  0B9D  0588               	andwf	8,f	;volatile
  6067                           
  6068                           ;LCD.c: 67: PORTD |= 0x30;
  6069  0B9E  3030               	movlw	48
  6070  0B9F  0488               	iorwf	8,f	;volatile
  6071                           
  6072                           ;LCD.c: 68: pulseEpin();
  6073  0BA0  23D7  120A  158A   	fcall	_pulseEpin
  6074                           
  6075                           ;LCD.c: 70: _delay((unsigned long)((300)*(20000000/4000000.0)));
  6076  0BA3  30D6               	movlw	214
  6077  0BA4  00F3               	movwf	??_initLCD
  6078  0BA5                     u2407:	
  6079  0BA5  2BA6               	nop2
  6080  0BA6  2BA7               	nop2
  6081  0BA7  0BF3               	decfsz	??_initLCD,f
  6082  0BA8  2BA5               	goto	u2407
  6083  0BA9  0064               	clrwdt
  6084                           
  6085                           ;LCD.c: 72: PORTD &= 0x0F;
  6086                           
  6087                           ;LCD.c: 73: PORTD |= 0x30;
  6088  0BAA  2406  120A  158A   	fcall	PL17	;call to abstracted procedure
  6089                           
  6090                           ;LCD.c: 74: pulseEpin();
  6091  0BAD  23D7  120A  158A   	fcall	_pulseEpin
  6092                           
  6093                           ;LCD.c: 76: _delay((unsigned long)((2)*(20000000/4000.0)));
  6094  0BB0  300D               	movlw	13
  6095  0BB1  00F4               	movwf	??_initLCD+1
  6096  0BB2  30FB               	movlw	251
  6097  0BB3  00F3               	movwf	??_initLCD
  6098  0BB4                     u2417:	
  6099  0BB4  0BF3               	decfsz	??_initLCD,f
  6100  0BB5  2BB4               	goto	u2417
  6101  0BB6  0BF4               	decfsz	??_initLCD+1,f
  6102  0BB7  2BB4               	goto	u2417
  6103  0BB8  2BB9               	nop2
  6104                           
  6105                           ;LCD.c: 78: PORTD &= 0x0F;
  6106  0BB9  300F               	movlw	15
  6107  0BBA  240D               	call	PL27	;select bank 0
  6108  0BBB  0588               	andwf	8,f	;volatile
  6109                           
  6110                           ;LCD.c: 79: PORTD |= 0x20;
  6111  0BBC  1688               	bsf	8,5	;volatile
  6112                           
  6113                           ;LCD.c: 80: pulseEpin();
  6114  0BBD  23D7  120A  158A   	fcall	_pulseEpin
  6115                           
  6116                           ;LCD.c: 82: _delay((unsigned long)((2)*(20000000/4000.0)));
  6117  0BC0  300D               	movlw	13
  6118  0BC1  00F4               	movwf	??_initLCD+1
  6119  0BC2  30FB               	movlw	251
  6120  0BC3  00F3               	movwf	??_initLCD
  6121  0BC4                     u2427:	
  6122  0BC4  0BF3               	decfsz	??_initLCD,f
  6123  0BC5  2BC4               	goto	u2427
  6124  0BC6  0BF4               	decfsz	??_initLCD+1,f
  6125  0BC7  2BC4               	goto	u2427
  6126  0BC8  2BC9               	nop2
  6127                           
  6128                           ;LCD.c: 84: writeCommand(0x28);
  6129  0BC9  3028               	movlw	40
  6130  0BCA  23ED  120A  158A   	fcall	_writeCommand
  6131                           
  6132                           ;LCD.c: 85: writeCommand(0x0c);
  6133  0BCD  300C               	movlw	12
  6134  0BCE  23ED  120A  158A   	fcall	_writeCommand
  6135                           
  6136                           ;LCD.c: 86: writeCommand(0x01);
  6137  0BD1  3001               	movlw	1
  6138  0BD2  23ED  120A  158A   	fcall	_writeCommand
  6139                           
  6140                           ;LCD.c: 87: writeCommand(0x06);
  6141  0BD5  3006               	movlw	6
  6142  0BD6  2BED               	ljmp	_writeCommand
  6143  0BD7                     __end_of_initLCD:	
  6144  0BD7                     __ptext879:	
  6145 ;; =============== function _GetADCValue ends ============
  6146                           
  6147                           
  6148 ;; *************** function _pulseEpin *****************
  6149 ;; Defined at:
  6150 ;;		line 5 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\LCD.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;		None
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;		None
  6155 ;; Return value:  Size  Location     Type
  6156 ;;		None               void
  6157 ;; Registers used:
  6158 ;;		wreg
  6159 ;; Tracked objects:
  6160 ;;		On entry : 60/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6164 ;;      Params:         0       0       0       0       0
  6165 ;;      Locals:         0       0       0       0       0
  6166 ;;      Temps:          2       0       0       0       0
  6167 ;;      Totals:         2       0       0       0       0
  6168 ;;Total ram usage:        2 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; This function calls:
  6171 ;;		Nothing
  6172 ;; This function is called by:
  6173 ;;		_writeCommand
  6174 ;;		_writeChar
  6175 ;;		_initLCD
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178  0BD7                     _pulseEpin:	
  6179  0BD7                     l8051:	
  6180                           ; Regs used in _pulseEpin: [wreg]
  6181                           
  6182  0BD7  3004               	movlw	4
  6183                           
  6184                           ;LCD.c: 6: RD0 = 1;
  6185  0BD8  1408               	bsf	8,0
  6186                           
  6187                           ;LCD.c: 7: _delay((unsigned long)((500)*(20000000/4000000.0)));
  6188  0BD9  00F1               	movwf	??_pulseEpin+1
  6189  0BDA  303D               	movlw	61
  6190  0BDB  00F0               	movwf	??_pulseEpin
  6191  0BDC                     u2447:	
  6192  0BDC  0BF0               	decfsz	??_pulseEpin,f
  6193  0BDD  2BDC               	goto	u2447
  6194  0BDE  0BF1               	decfsz	??_pulseEpin+1,f
  6195  0BDF  2BDC               	goto	u2447
  6196  0BE0  2BE1               	nop2
  6197  0BE1  240D               	call	PL27	;select bank 0
  6198                           
  6199                           ;LCD.c: 8: RD0 = 0;
  6200  0BE2  3004               	movlw	4
  6201  0BE3  1008               	bcf	8,0
  6202                           
  6203                           ;LCD.c: 9: _delay((unsigned long)((500)*(20000000/4000000.0)));
  6204  0BE4  00F1               	movwf	??_pulseEpin+1
  6205  0BE5  303D               	movlw	61
  6206  0BE6  00F0               	movwf	??_pulseEpin
  6207  0BE7                     u2457:	
  6208  0BE7  0BF0               	decfsz	??_pulseEpin,f
  6209  0BE8  2BE7               	goto	u2457
  6210  0BE9  0BF1               	decfsz	??_pulseEpin+1,f
  6211  0BEA  2BE7               	goto	u2457
  6212  0BEB  2BEC               	nop2
  6213  0BEC  0008               	return
  6214  0BED                     __end_of_pulseEpin:	
  6215  0BED                     __ptext873:	
  6216 ;; =============== function _writeChar ends ============
  6217                           
  6218                           
  6219 ;; *************** function _writeCommand *****************
  6220 ;; Defined at:
  6221 ;;		line 14 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\LCD.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;  Command         1    wreg     unsigned char 
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;  Command         1    2[COMMON] unsigned char 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;		None               void
  6228 ;; Registers used:
  6229 ;;		wreg, status,2, status,0, pclath, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6235 ;;      Params:         0       0       0       0       0
  6236 ;;      Locals:         1       0       0       0       0
  6237 ;;      Temps:          0       0       0       0       0
  6238 ;;      Totals:         1       0       0       0       0
  6239 ;;Total ram usage:        1 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:    1
  6242 ;; This function calls:
  6243 ;;		_pulseEpin
  6244 ;; This function is called by:
  6245 ;;		_initLCD
  6246 ;;		_clearScreen
  6247 ;;		_DisplayDateOnLCD
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250  0BED                     _writeCommand:	
  6251                           
  6252                           ; Regs used in _writeCommand: [wreg+status,2+status,0+pclath+cstack]
  6253                           ;writeCommand@Command stored from wreg
  6254  0BED  00F2               	movwf	writeCommand@Command
  6255  0BEE  240D               	call	PL27	;select bank 0
  6256                           
  6257                           ;LCD.c: 15: RD1 = 0;
  6258  0BEF  300F               	movlw	15
  6259  0BF0  1088               	bcf	8,1
  6260                           
  6261                           ;LCD.c: 17: PORTD &= 0x0F;
  6262  0BF1  0588               	andwf	8,f	;volatile
  6263                           
  6264                           ;LCD.c: 18: PORTD |= (Command&0xF0);
  6265  0BF2  0872               	movf	writeCommand@Command,w
  6266  0BF3  39F0               	andlw	240
  6267  0BF4  0488               	iorwf	8,f	;volatile
  6268                           
  6269                           ;LCD.c: 19: pulseEpin();
  6270  0BF5  23D7  120A  158A   	fcall	_pulseEpin
  6271                           
  6272                           ;LCD.c: 21: PORTD &= 0x0F;
  6273  0BF8  300F               	movlw	15
  6274  0BF9  240D               	call	PL27	;select bank 0
  6275  0BFA  0588               	andwf	8,f	;volatile
  6276                           
  6277                           ;LCD.c: 22: PORTD |= ((Command<<4)&0xF0);
  6278  0BFB  0E72               	swapf	writeCommand@Command,w
  6279  0BFC  39F0               	andlw	240
  6280  0BFD  0488               	iorwf	8,f	;volatile
  6281                           
  6282                           ;LCD.c: 23: pulseEpin();
  6283  0BFE  2BD7               	ljmp	l8051
  6284  0BFF                     __end_of_writeCommand:	
  6285  0BFF                     PL16:	
  6286  0BFF  1008               	bcf	8,0
  6287  0C00  1088               	bcf	8,1
  6288  0C01  1208               	bcf	8,4
  6289  0C02  1288               	bcf	8,5
  6290  0C03  1308               	bcf	8,6
  6291  0C04  1388               	bcf	8,7
  6292  0C05  0008               	return
  6293  0C06                     PL17:	
  6294  0C06  300F               	movlw	15
  6295  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  6296  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  6297  0C09  0588               	andwf	8,f	;volatile
  6298  0C0A  3030               	movlw	48
  6299  0C0B  0488               	iorwf	8,f	;volatile
  6300  0C0C  0008               	return
  6301  0C0D                     PL27:	
  6302  0C0D  1283               	bcf	3,5	;RP0=0, select bank0
  6303  0C0E  1303               	bcf	3,6	;RP1=0, select bank0
  6304  0C0F  0008               	return
  6305                           
  6306                           	psect	text875
  6307  0C10                     __ptext875:	
  6308 ;; =============== function _GetChar2 ends ============
  6309                           
  6310                           
  6311 ;; *************** function _GetChar *****************
  6312 ;; Defined at:
  6313 ;;		line 106 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\Keypad.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;		None
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;  contor          2    3[COMMON] unsigned int 
  6318 ;;  key             1    5[COMMON] unsigned char 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  1    wreg      unsigned char 
  6321 ;; Registers used:
  6322 ;;		wreg, status,2, status,0, pclath, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 60/0
  6325 ;;		On exit  : 60/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6328 ;;      Params:         0       0       0       0       0
  6329 ;;      Locals:         3       0       0       0       0
  6330 ;;      Temps:          0       0       0       0       0
  6331 ;;      Totals:         3       0       0       0       0
  6332 ;;Total ram usage:        3 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    1
  6335 ;; This function calls:
  6336 ;;		_readSwitches
  6337 ;; This function is called by:
  6338 ;;		_main
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341  0C10                     _GetChar:	
  6342                           
  6343                           ;Keypad.c: 107: char key = 'x';
  6344                           
  6345                           ; Regs used in _GetChar: [wreg+status,2+status,0+pclath+cstack]
  6346  0C10  3078               	movlw	120
  6347  0C11  00F5               	movwf	GetChar@key
  6348                           
  6349                           ;Keypad.c: 108: unsigned int contor = 100;
  6350  0C12  3064               	movlw	100
  6351  0C13  00F3               	movwf	GetChar@contor
  6352  0C14  01F4               	clrf	GetChar@contor+1
  6353  0C15                     l8121:	
  6354                           ;Keypad.c: 111: while(key == 'x'){
  6355                           
  6356  0C15  0875               	movf	GetChar@key,w
  6357  0C16  3A78               	xorlw	120
  6358  0C17  1D03               	btfss	3,2
  6359  0C18  2C27               	goto	l8123
  6360                           
  6361                           ;Keypad.c: 113: key = readSwitches();
  6362  0C19  2429  120A  158A   	fcall	_readSwitches
  6363  0C1C  00F5               	movwf	GetChar@key
  6364                           
  6365                           ;Keypad.c: 114: contor--;
  6366  0C1D  3001               	movlw	1
  6367  0C1E  02F3               	subwf	GetChar@contor,f
  6368  0C1F  3000               	movlw	0
  6369  0C20  1C03               	skipc
  6370  0C21  03F4               	decf	GetChar@contor+1,f
  6371  0C22  02F4               	subwf	GetChar@contor+1,f
  6372                           
  6373                           ;Keypad.c: 116: if(!contor)
  6374  0C23  0874               	movf	GetChar@contor+1,w
  6375  0C24  0473               	iorwf	GetChar@contor,w
  6376  0C25  1D03               	skipz
  6377  0C26  2C15               	goto	l8121
  6378  0C27                     l8123:	
  6379                           
  6380                           ;Keypad.c: 118: }
  6381                           ;Keypad.c: 120: return key;
  6382  0C27  0875               	movf	GetChar@key,w
  6383  0C28  0008               	return
  6384  0C29                     __end_of_GetChar:	
  6385  0C29                     __ptext880:	
  6386 ;; =============== function _pulseEpin ends ============
  6387                           
  6388                           
  6389 ;; *************** function _readSwitches *****************
  6390 ;; Defined at:
  6391 ;;		line 18 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\Keypad.c"
  6392 ;; Parameters:    Size  Location     Type
  6393 ;;		None
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;		None
  6396 ;; Return value:  Size  Location     Type
  6397 ;;                  1    wreg      unsigned char 
  6398 ;; Registers used:
  6399 ;;		wreg
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 60/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6405 ;;      Params:         0       0       0       0       0
  6406 ;;      Locals:         0       0       0       0       0
  6407 ;;      Temps:          3       0       0       0       0
  6408 ;;      Totals:         3       0       0       0       0
  6409 ;;Total ram usage:        3 bytes
  6410 ;; Hardware stack levels used:    1
  6411 ;; This function calls:
  6412 ;;		Nothing
  6413 ;; This function is called by:
  6414 ;;		_GetChar
  6415 ;;		_GetChar2
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418  0C29                     _readSwitches:	
  6419  0C29  256A               	call	PL28	;select bank 0
  6420                           
  6421                           ;Keypad.c: 19: RB0 = 0; RB1 = 1;
  6422                           
  6423                           ; Regs used in _readSwitches: [wreg]
  6424  0C2A  1006               	bcf	6,0
  6425  0C2B  1486               	bsf	6,1
  6426                           
  6427                           ;Keypad.c: 20: RB2 = 1; RB3 = 1;
  6428  0C2C  1506               	bsf	6,2
  6429  0C2D  1586               	bsf	6,3
  6430                           
  6431                           ;Keypad.c: 22: if (RB4 == 0) {
  6432  0C2E  1A06               	btfsc	6,4
  6433  0C2F  2C41               	goto	l646
  6434                           
  6435                           ;Keypad.c: 23: _delay((unsigned long)((250)*(20000000/4000.0)));
  6436  0C30  3007               	movlw	7
  6437  0C31  00F2               	movwf	??_readSwitches+2
  6438  0C32  3058               	movlw	88
  6439  0C33  00F1               	movwf	??_readSwitches+1
  6440  0C34  305E               	movlw	94
  6441  0C35  00F0               	movwf	??_readSwitches
  6442  0C36                     u2467:	
  6443  0C36  0BF0               	decfsz	??_readSwitches,f
  6444  0C37  2C36               	goto	u2467
  6445  0C38  0BF1               	decfsz	??_readSwitches+1,f
  6446  0C39  2C36               	goto	u2467
  6447  0C3A  0BF2               	decfsz	??_readSwitches+2,f
  6448  0C3B  2C36               	goto	u2467
  6449  0C3C  2C3D               	nop2
  6450  0C3D                     l647:	
  6451                           ;Keypad.c: 24: while (RB4==0);
  6452                           
  6453  0C3D  256A               	call	PL28	;select bank 0
  6454  0C3E  1A06               	btfsc	6,4
  6455                           
  6456                           ;Keypad.c: 25: return '7';
  6457  0C3F  3437               	retlw	55
  6458  0C40  2C3D               	goto	l647
  6459  0C41                     l646:	
  6460                           
  6461                           ;Keypad.c: 26: }
  6462                           ;Keypad.c: 27: if (RB5 == 0) {
  6463  0C41  1A86               	btfsc	6,5
  6464  0C42  2C54               	goto	l651
  6465                           
  6466                           ;Keypad.c: 28: _delay((unsigned long)((250)*(20000000/4000.0)));
  6467  0C43  3007               	movlw	7
  6468  0C44  00F2               	movwf	??_readSwitches+2
  6469  0C45  3058               	movlw	88
  6470  0C46  00F1               	movwf	??_readSwitches+1
  6471  0C47  305E               	movlw	94
  6472  0C48  00F0               	movwf	??_readSwitches
  6473  0C49                     u2477:	
  6474  0C49  0BF0               	decfsz	??_readSwitches,f
  6475  0C4A  2C49               	goto	u2477
  6476  0C4B  0BF1               	decfsz	??_readSwitches+1,f
  6477  0C4C  2C49               	goto	u2477
  6478  0C4D  0BF2               	decfsz	??_readSwitches+2,f
  6479  0C4E  2C49               	goto	u2477
  6480  0C4F  2C50               	nop2
  6481  0C50                     l652:	
  6482                           ;Keypad.c: 29: while (RB5==0);
  6483                           
  6484  0C50  256A               	call	PL28	;select bank 0
  6485  0C51  1A86               	btfsc	6,5
  6486                           
  6487                           ;Keypad.c: 30: return '8'; }
  6488  0C52  3438               	retlw	56
  6489  0C53  2C50               	goto	l652
  6490  0C54                     l651:	
  6491                           
  6492                           ;Keypad.c: 31: if (RB6 == 0) {
  6493  0C54  1B06               	btfsc	6,6
  6494  0C55  2C67               	goto	l655
  6495                           
  6496                           ;Keypad.c: 32: _delay((unsigned long)((250)*(20000000/4000.0)));
  6497  0C56  3007               	movlw	7
  6498  0C57  00F2               	movwf	??_readSwitches+2
  6499  0C58  3058               	movlw	88
  6500  0C59  00F1               	movwf	??_readSwitches+1
  6501  0C5A  305E               	movlw	94
  6502  0C5B  00F0               	movwf	??_readSwitches
  6503  0C5C                     u2487:	
  6504  0C5C  0BF0               	decfsz	??_readSwitches,f
  6505  0C5D  2C5C               	goto	u2487
  6506  0C5E  0BF1               	decfsz	??_readSwitches+1,f
  6507  0C5F  2C5C               	goto	u2487
  6508  0C60  0BF2               	decfsz	??_readSwitches+2,f
  6509  0C61  2C5C               	goto	u2487
  6510  0C62  2C63               	nop2
  6511  0C63                     l656:	
  6512                           ;Keypad.c: 33: while (RB6==0);
  6513                           
  6514  0C63  256A               	call	PL28	;select bank 0
  6515  0C64  1B06               	btfsc	6,6
  6516                           
  6517                           ;Keypad.c: 34: return '9'; }
  6518  0C65  3439               	retlw	57
  6519  0C66  2C63               	goto	l656
  6520  0C67                     l655:	
  6521                           
  6522                           ;Keypad.c: 35: if (RB7 == 0) {
  6523  0C67  1B86               	btfsc	6,7
  6524  0C68  2C7A               	goto	l659
  6525                           
  6526                           ;Keypad.c: 36: _delay((unsigned long)((250)*(20000000/4000.0)));
  6527  0C69  3007               	movlw	7
  6528  0C6A  00F2               	movwf	??_readSwitches+2
  6529  0C6B  3058               	movlw	88
  6530  0C6C  00F1               	movwf	??_readSwitches+1
  6531  0C6D  305E               	movlw	94
  6532  0C6E  00F0               	movwf	??_readSwitches
  6533  0C6F                     u2497:	
  6534  0C6F  0BF0               	decfsz	??_readSwitches,f
  6535  0C70  2C6F               	goto	u2497
  6536  0C71  0BF1               	decfsz	??_readSwitches+1,f
  6537  0C72  2C6F               	goto	u2497
  6538  0C73  0BF2               	decfsz	??_readSwitches+2,f
  6539  0C74  2C6F               	goto	u2497
  6540  0C75  2C76               	nop2
  6541  0C76                     l660:	
  6542                           ;Keypad.c: 37: while (RB7==0);
  6543                           
  6544  0C76  256A               	call	PL28	;select bank 0
  6545  0C77  1B86               	btfsc	6,7
  6546                           
  6547                           ;Keypad.c: 38: return '/'; }
  6548  0C78  342F               	retlw	47
  6549  0C79  2C76               	goto	l660
  6550  0C7A                     l659:	
  6551                           
  6552                           ;Keypad.c: 40: RB0 = 1; RB1 = 0;
  6553  0C7A  1406               	bsf	6,0
  6554  0C7B  1086               	bcf	6,1
  6555                           
  6556                           ;Keypad.c: 41: RB2 = 1; RB3 = 1;
  6557  0C7C  1506               	bsf	6,2
  6558  0C7D  1586               	bsf	6,3
  6559                           
  6560                           ;Keypad.c: 43: if (RB4 == 0) {
  6561  0C7E  1A06               	btfsc	6,4
  6562  0C7F  2C91               	goto	l663
  6563                           
  6564                           ;Keypad.c: 44: _delay((unsigned long)((250)*(20000000/4000.0)));
  6565  0C80  3007               	movlw	7
  6566  0C81  00F2               	movwf	??_readSwitches+2
  6567  0C82  3058               	movlw	88
  6568  0C83  00F1               	movwf	??_readSwitches+1
  6569  0C84  305E               	movlw	94
  6570  0C85  00F0               	movwf	??_readSwitches
  6571  0C86                     u2507:	
  6572  0C86  0BF0               	decfsz	??_readSwitches,f
  6573  0C87  2C86               	goto	u2507
  6574  0C88  0BF1               	decfsz	??_readSwitches+1,f
  6575  0C89  2C86               	goto	u2507
  6576  0C8A  0BF2               	decfsz	??_readSwitches+2,f
  6577  0C8B  2C86               	goto	u2507
  6578  0C8C  2C8D               	nop2
  6579  0C8D                     l664:	
  6580                           ;Keypad.c: 45: while (RB4==0);
  6581                           
  6582  0C8D  256A               	call	PL28	;select bank 0
  6583  0C8E  1A06               	btfsc	6,4
  6584                           
  6585                           ;Keypad.c: 46: return '4'; }
  6586  0C8F  3434               	retlw	52
  6587  0C90  2C8D               	goto	l664
  6588  0C91                     l663:	
  6589                           
  6590                           ;Keypad.c: 47: if (RB5 == 0) {
  6591  0C91  1A86               	btfsc	6,5
  6592  0C92  2CA4               	goto	l667
  6593                           
  6594                           ;Keypad.c: 48: _delay((unsigned long)((250)*(20000000/4000.0)));
  6595  0C93  3007               	movlw	7
  6596  0C94  00F2               	movwf	??_readSwitches+2
  6597  0C95  3058               	movlw	88
  6598  0C96  00F1               	movwf	??_readSwitches+1
  6599  0C97  305E               	movlw	94
  6600  0C98  00F0               	movwf	??_readSwitches
  6601  0C99                     u2517:	
  6602  0C99  0BF0               	decfsz	??_readSwitches,f
  6603  0C9A  2C99               	goto	u2517
  6604  0C9B  0BF1               	decfsz	??_readSwitches+1,f
  6605  0C9C  2C99               	goto	u2517
  6606  0C9D  0BF2               	decfsz	??_readSwitches+2,f
  6607  0C9E  2C99               	goto	u2517
  6608  0C9F  2CA0               	nop2
  6609  0CA0                     l668:	
  6610                           ;Keypad.c: 49: while (RB5==0);
  6611                           
  6612  0CA0  256A               	call	PL28	;select bank 0
  6613  0CA1  1A86               	btfsc	6,5
  6614                           
  6615                           ;Keypad.c: 50: return '5'; }
  6616  0CA2  3435               	retlw	53
  6617  0CA3  2CA0               	goto	l668
  6618  0CA4                     l667:	
  6619                           
  6620                           ;Keypad.c: 51: if (RB6 == 0) {
  6621  0CA4  1B06               	btfsc	6,6
  6622  0CA5  2CB7               	goto	l671
  6623                           
  6624                           ;Keypad.c: 52: _delay((unsigned long)((250)*(20000000/4000.0)));
  6625  0CA6  3007               	movlw	7
  6626  0CA7  00F2               	movwf	??_readSwitches+2
  6627  0CA8  3058               	movlw	88
  6628  0CA9  00F1               	movwf	??_readSwitches+1
  6629  0CAA  305E               	movlw	94
  6630  0CAB  00F0               	movwf	??_readSwitches
  6631  0CAC                     u2527:	
  6632  0CAC  0BF0               	decfsz	??_readSwitches,f
  6633  0CAD  2CAC               	goto	u2527
  6634  0CAE  0BF1               	decfsz	??_readSwitches+1,f
  6635  0CAF  2CAC               	goto	u2527
  6636  0CB0  0BF2               	decfsz	??_readSwitches+2,f
  6637  0CB1  2CAC               	goto	u2527
  6638  0CB2  2CB3               	nop2
  6639  0CB3                     l672:	
  6640                           ;Keypad.c: 53: while (RB6==0);
  6641                           
  6642  0CB3  256A               	call	PL28	;select bank 0
  6643  0CB4  1B06               	btfsc	6,6
  6644                           
  6645                           ;Keypad.c: 54: return '6'; }
  6646  0CB5  3436               	retlw	54
  6647  0CB6  2CB3               	goto	l672
  6648  0CB7                     l671:	
  6649                           
  6650                           ;Keypad.c: 55: if (RB7 == 0) {
  6651  0CB7  1B86               	btfsc	6,7
  6652  0CB8  2CCA               	goto	l675
  6653                           
  6654                           ;Keypad.c: 56: _delay((unsigned long)((250)*(20000000/4000.0)));
  6655  0CB9  3007               	movlw	7
  6656  0CBA  00F2               	movwf	??_readSwitches+2
  6657  0CBB  3058               	movlw	88
  6658  0CBC  00F1               	movwf	??_readSwitches+1
  6659  0CBD  305E               	movlw	94
  6660  0CBE  00F0               	movwf	??_readSwitches
  6661  0CBF                     u2537:	
  6662  0CBF  0BF0               	decfsz	??_readSwitches,f
  6663  0CC0  2CBF               	goto	u2537
  6664  0CC1  0BF1               	decfsz	??_readSwitches+1,f
  6665  0CC2  2CBF               	goto	u2537
  6666  0CC3  0BF2               	decfsz	??_readSwitches+2,f
  6667  0CC4  2CBF               	goto	u2537
  6668  0CC5  2CC6               	nop2
  6669  0CC6                     l676:	
  6670                           ;Keypad.c: 57: while (RB7==0);
  6671                           
  6672  0CC6  256A               	call	PL28	;select bank 0
  6673  0CC7  1B86               	btfsc	6,7
  6674                           
  6675                           ;Keypad.c: 58: return '*'; }
  6676  0CC8  342A               	retlw	42
  6677  0CC9  2CC6               	goto	l676
  6678  0CCA                     l675:	
  6679                           
  6680                           ;Keypad.c: 60: RB0 = 1; RB1 = 1;
  6681  0CCA  1406               	bsf	6,0
  6682  0CCB  1486               	bsf	6,1
  6683                           
  6684                           ;Keypad.c: 61: RB2 = 0; RB3 = 1;
  6685  0CCC  1106               	bcf	6,2
  6686  0CCD  1586               	bsf	6,3
  6687                           
  6688                           ;Keypad.c: 63: if (RB4 == 0) {
  6689  0CCE  1A06               	btfsc	6,4
  6690  0CCF  2CE1               	goto	l679
  6691                           
  6692                           ;Keypad.c: 64: _delay((unsigned long)((250)*(20000000/4000.0)));
  6693  0CD0  3007               	movlw	7
  6694  0CD1  00F2               	movwf	??_readSwitches+2
  6695  0CD2  3058               	movlw	88
  6696  0CD3  00F1               	movwf	??_readSwitches+1
  6697  0CD4  305E               	movlw	94
  6698  0CD5  00F0               	movwf	??_readSwitches
  6699  0CD6                     u2547:	
  6700  0CD6  0BF0               	decfsz	??_readSwitches,f
  6701  0CD7  2CD6               	goto	u2547
  6702  0CD8  0BF1               	decfsz	??_readSwitches+1,f
  6703  0CD9  2CD6               	goto	u2547
  6704  0CDA  0BF2               	decfsz	??_readSwitches+2,f
  6705  0CDB  2CD6               	goto	u2547
  6706  0CDC  2CDD               	nop2
  6707  0CDD                     l680:	
  6708                           ;Keypad.c: 65: while (RB4==0);
  6709                           
  6710  0CDD  256A               	call	PL28	;select bank 0
  6711  0CDE  1A06               	btfsc	6,4
  6712                           
  6713                           ;Keypad.c: 66: return '1'; }
  6714  0CDF  3431               	retlw	49
  6715  0CE0  2CDD               	goto	l680
  6716  0CE1                     l679:	
  6717                           
  6718                           ;Keypad.c: 67: if (RB5 == 0) {
  6719  0CE1  1A86               	btfsc	6,5
  6720  0CE2  2CF4               	goto	l683
  6721                           
  6722                           ;Keypad.c: 68: _delay((unsigned long)((250)*(20000000/4000.0)));
  6723  0CE3  3007               	movlw	7
  6724  0CE4  00F2               	movwf	??_readSwitches+2
  6725  0CE5  3058               	movlw	88
  6726  0CE6  00F1               	movwf	??_readSwitches+1
  6727  0CE7  305E               	movlw	94
  6728  0CE8  00F0               	movwf	??_readSwitches
  6729  0CE9                     u2557:	
  6730  0CE9  0BF0               	decfsz	??_readSwitches,f
  6731  0CEA  2CE9               	goto	u2557
  6732  0CEB  0BF1               	decfsz	??_readSwitches+1,f
  6733  0CEC  2CE9               	goto	u2557
  6734  0CED  0BF2               	decfsz	??_readSwitches+2,f
  6735  0CEE  2CE9               	goto	u2557
  6736  0CEF  2CF0               	nop2
  6737  0CF0                     l684:	
  6738                           ;Keypad.c: 69: while (RB5==0);
  6739                           
  6740  0CF0  256A               	call	PL28	;select bank 0
  6741  0CF1  1A86               	btfsc	6,5
  6742                           
  6743                           ;Keypad.c: 70: return '2'; }
  6744  0CF2  3432               	retlw	50
  6745  0CF3  2CF0               	goto	l684
  6746  0CF4                     l683:	
  6747                           
  6748                           ;Keypad.c: 71: if (RB6 == 0) {
  6749  0CF4  1B06               	btfsc	6,6
  6750  0CF5  2D07               	goto	l687
  6751                           
  6752                           ;Keypad.c: 72: _delay((unsigned long)((250)*(20000000/4000.0)));
  6753  0CF6  3007               	movlw	7
  6754  0CF7  00F2               	movwf	??_readSwitches+2
  6755  0CF8  3058               	movlw	88
  6756  0CF9  00F1               	movwf	??_readSwitches+1
  6757  0CFA  305E               	movlw	94
  6758  0CFB  00F0               	movwf	??_readSwitches
  6759  0CFC                     u2567:	
  6760  0CFC  0BF0               	decfsz	??_readSwitches,f
  6761  0CFD  2CFC               	goto	u2567
  6762  0CFE  0BF1               	decfsz	??_readSwitches+1,f
  6763  0CFF  2CFC               	goto	u2567
  6764  0D00  0BF2               	decfsz	??_readSwitches+2,f
  6765  0D01  2CFC               	goto	u2567
  6766  0D02  2D03               	nop2
  6767  0D03                     l688:	
  6768                           ;Keypad.c: 73: while (RB6==0);
  6769                           
  6770  0D03  256A               	call	PL28	;select bank 0
  6771  0D04  1B06               	btfsc	6,6
  6772                           
  6773                           ;Keypad.c: 74: return '3'; }
  6774  0D05  3433               	retlw	51
  6775  0D06  2D03               	goto	l688
  6776  0D07                     l687:	
  6777                           
  6778                           ;Keypad.c: 75: if (RB7 == 0) {
  6779  0D07  1B86               	btfsc	6,7
  6780  0D08  2D1A               	goto	l691
  6781                           
  6782                           ;Keypad.c: 76: _delay((unsigned long)((250)*(20000000/4000.0)));
  6783  0D09  3007               	movlw	7
  6784  0D0A  00F2               	movwf	??_readSwitches+2
  6785  0D0B  3058               	movlw	88
  6786  0D0C  00F1               	movwf	??_readSwitches+1
  6787  0D0D  305E               	movlw	94
  6788  0D0E  00F0               	movwf	??_readSwitches
  6789  0D0F                     u2577:	
  6790  0D0F  0BF0               	decfsz	??_readSwitches,f
  6791  0D10  2D0F               	goto	u2577
  6792  0D11  0BF1               	decfsz	??_readSwitches+1,f
  6793  0D12  2D0F               	goto	u2577
  6794  0D13  0BF2               	decfsz	??_readSwitches+2,f
  6795  0D14  2D0F               	goto	u2577
  6796  0D15  2D16               	nop2
  6797  0D16                     l692:	
  6798                           ;Keypad.c: 77: while (RB7==0);
  6799                           
  6800  0D16  256A               	call	PL28	;select bank 0
  6801  0D17  1B86               	btfsc	6,7
  6802                           
  6803                           ;Keypad.c: 78: return '-'; }
  6804  0D18  342D               	retlw	45
  6805  0D19  2D16               	goto	l692
  6806  0D1A                     l691:	
  6807                           
  6808                           ;Keypad.c: 80: RB0 = 1; RB1 = 1;
  6809  0D1A  1406               	bsf	6,0
  6810  0D1B  1486               	bsf	6,1
  6811                           
  6812                           ;Keypad.c: 81: RB2 = 1; RB3 = 0;
  6813  0D1C  1506               	bsf	6,2
  6814  0D1D  1186               	bcf	6,3
  6815                           
  6816                           ;Keypad.c: 83: if (RB4 == 0) {
  6817  0D1E  1A06               	btfsc	6,4
  6818  0D1F  2D31               	goto	l695
  6819                           
  6820                           ;Keypad.c: 84: _delay((unsigned long)((250)*(20000000/4000.0)));
  6821  0D20  3007               	movlw	7
  6822  0D21  00F2               	movwf	??_readSwitches+2
  6823  0D22  3058               	movlw	88
  6824  0D23  00F1               	movwf	??_readSwitches+1
  6825  0D24  305E               	movlw	94
  6826  0D25  00F0               	movwf	??_readSwitches
  6827  0D26                     u2587:	
  6828  0D26  0BF0               	decfsz	??_readSwitches,f
  6829  0D27  2D26               	goto	u2587
  6830  0D28  0BF1               	decfsz	??_readSwitches+1,f
  6831  0D29  2D26               	goto	u2587
  6832  0D2A  0BF2               	decfsz	??_readSwitches+2,f
  6833  0D2B  2D26               	goto	u2587
  6834  0D2C  2D2D               	nop2
  6835  0D2D                     l696:	
  6836                           ;Keypad.c: 85: while (RB4==0);
  6837                           
  6838  0D2D  256A               	call	PL28	;select bank 0
  6839  0D2E  1A06               	btfsc	6,4
  6840                           
  6841                           ;Keypad.c: 86: return 'C'; }
  6842  0D2F  3443               	retlw	67
  6843  0D30  2D2D               	goto	l696
  6844  0D31                     l695:	
  6845                           
  6846                           ;Keypad.c: 87: if (RB5 == 0) {
  6847  0D31  1A86               	btfsc	6,5
  6848  0D32  2D44               	goto	l699
  6849                           
  6850                           ;Keypad.c: 88: _delay((unsigned long)((250)*(20000000/4000.0)));
  6851  0D33  3007               	movlw	7
  6852  0D34  00F2               	movwf	??_readSwitches+2
  6853  0D35  3058               	movlw	88
  6854  0D36  00F1               	movwf	??_readSwitches+1
  6855  0D37  305E               	movlw	94
  6856  0D38  00F0               	movwf	??_readSwitches
  6857  0D39                     u2597:	
  6858  0D39  0BF0               	decfsz	??_readSwitches,f
  6859  0D3A  2D39               	goto	u2597
  6860  0D3B  0BF1               	decfsz	??_readSwitches+1,f
  6861  0D3C  2D39               	goto	u2597
  6862  0D3D  0BF2               	decfsz	??_readSwitches+2,f
  6863  0D3E  2D39               	goto	u2597
  6864  0D3F  2D40               	nop2
  6865  0D40                     l700:	
  6866                           ;Keypad.c: 89: while (RB5==0);
  6867                           
  6868  0D40  256A               	call	PL28	;select bank 0
  6869  0D41  1A86               	btfsc	6,5
  6870                           
  6871                           ;Keypad.c: 90: return '0'; }
  6872  0D42  3430               	retlw	48
  6873  0D43  2D40               	goto	l700
  6874  0D44                     l699:	
  6875                           
  6876                           ;Keypad.c: 91: if (RB6 == 0) {
  6877  0D44  1B06               	btfsc	6,6
  6878  0D45  2D57               	goto	l703
  6879                           
  6880                           ;Keypad.c: 92: _delay((unsigned long)((250)*(20000000/4000.0)));
  6881  0D46  3007               	movlw	7
  6882  0D47  00F2               	movwf	??_readSwitches+2
  6883  0D48  3058               	movlw	88
  6884  0D49  00F1               	movwf	??_readSwitches+1
  6885  0D4A  305E               	movlw	94
  6886  0D4B  00F0               	movwf	??_readSwitches
  6887  0D4C                     u2607:	
  6888  0D4C  0BF0               	decfsz	??_readSwitches,f
  6889  0D4D  2D4C               	goto	u2607
  6890  0D4E  0BF1               	decfsz	??_readSwitches+1,f
  6891  0D4F  2D4C               	goto	u2607
  6892  0D50  0BF2               	decfsz	??_readSwitches+2,f
  6893  0D51  2D4C               	goto	u2607
  6894  0D52  2D53               	nop2
  6895  0D53                     l704:	
  6896                           ;Keypad.c: 93: while (RB6==0);
  6897                           
  6898  0D53  256A               	call	PL28	;select bank 0
  6899  0D54  1B06               	btfsc	6,6
  6900                           
  6901                           ;Keypad.c: 94: return '='; }
  6902  0D55  343D               	retlw	61
  6903  0D56  2D53               	goto	l704
  6904  0D57                     l703:	
  6905                           
  6906                           ;Keypad.c: 95: if (RB7 == 0) {
  6907  0D57  1B86               	btfsc	6,7
  6908  0D58  3478               	retlw	120
  6909                           
  6910                           ;Keypad.c: 96: _delay((unsigned long)((250)*(20000000/4000.0)));
  6911  0D59  3007               	movlw	7
  6912  0D5A  00F2               	movwf	??_readSwitches+2
  6913  0D5B  3058               	movlw	88
  6914  0D5C  00F1               	movwf	??_readSwitches+1
  6915  0D5D  305E               	movlw	94
  6916  0D5E  00F0               	movwf	??_readSwitches
  6917  0D5F                     u2617:	
  6918  0D5F  0BF0               	decfsz	??_readSwitches,f
  6919  0D60  2D5F               	goto	u2617
  6920  0D61  0BF1               	decfsz	??_readSwitches+1,f
  6921  0D62  2D5F               	goto	u2617
  6922  0D63  0BF2               	decfsz	??_readSwitches+2,f
  6923  0D64  2D5F               	goto	u2617
  6924  0D65  2D66               	nop2
  6925  0D66                     l708:	
  6926                           ;Keypad.c: 97: while (RB7==0);
  6927                           
  6928  0D66  256A               	call	PL28	;select bank 0
  6929  0D67  1B86               	btfsc	6,7
  6930                           
  6931                           ;Keypad.c: 98: return '+'; }
  6932  0D68  342B               	retlw	43
  6933  0D69  2D66               	goto	l708
  6934  0D6A                     __end_of_readSwitches:	
  6935                           ;Keypad.c: 101: return 'x';
  6936                           
  6937  0D6A                     PL28:	
  6938  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
  6939  0D6B  1303               	bcf	3,6	;RP1=0, select bank0
  6940  0D6C  0008               	return
  6941                           
  6942                           	psect	text894
  6943  0004                     __ptext894:	
  6944 ;; =============== function _Start_I2C ends ============
  6945                           
  6946                           
  6947 ;; *************** function _Init_I2C *****************
  6948 ;; Defined at:
  6949 ;;		line 8 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\I2C.c"
  6950 ;; Parameters:    Size  Location     Type
  6951 ;;		None
  6952 ;; Auto vars:     Size  Location     Type
  6953 ;;		None
  6954 ;; Return value:  Size  Location     Type
  6955 ;;		None               void
  6956 ;; Registers used:
  6957 ;;		wreg
  6958 ;; Tracked objects:
  6959 ;;		On entry : 0/0
  6960 ;;		On exit  : 60/0
  6961 ;;		Unchanged: FFF9F/0
  6962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6963 ;;      Params:         0       0       0       0       0
  6964 ;;      Locals:         0       0       0       0       0
  6965 ;;      Temps:          0       0       0       0       0
  6966 ;;      Totals:         0       0       0       0       0
  6967 ;;Total ram usage:        0 bytes
  6968 ;; Hardware stack levels used:    1
  6969 ;; This function calls:
  6970 ;;		Nothing
  6971 ;; This function is called by:
  6972 ;;		_main
  6973 ;; This function uses a non-reentrant model
  6974 ;;
  6975  0004                     _Init_I2C:	
  6976                           
  6977                           ;I2C.c: 9: TRISC4 = 1;
  6978                           
  6979                           ; Regs used in _Init_I2C: [wreg]
  6980  0004  1683               	bsf	3,5	;RP0=1, select bank1
  6981  0005  1303               	bcf	3,6	;RP1=0, select bank1
  6982  0006  3031               	movlw	49
  6983  0007  1607               	bsf	7,4
  6984                           
  6985                           ;I2C.c: 10: TRISC3 = 1;
  6986  0008  1587               	bsf	7,3
  6987                           
  6988                           ;I2C.c: 12: SSPADD = ((20000000/4000)/100) - 1;
  6989  0009  0093               	movwf	19	;volatile
  6990                           
  6991                           ;I2C.c: 13: SSPSTAT = 0x80;
  6992  000A  3080               	movlw	128
  6993  000B  0094               	movwf	20	;volatile
  6994                           
  6995                           ;I2C.c: 14: SSPCON = 0x28;
  6996  000C  3028               	movlw	40
  6997  000D  1283               	bcf	3,5	;RP0=0, select bank0
  6998  000E  0094               	movwf	20	;volatile
  6999  000F  0008               	return
  7000  0010                     __end_of_Init_I2C:	
  7001                           
  7002                           	psect	text895
  7003  0AB5                     __ptext895:	
  7004 ;; =============== function _Init_I2C ends ============
  7005                           
  7006                           
  7007 ;; *************** function _InitADC *****************
  7008 ;; Defined at:
  7009 ;;		line 5 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\ADC.c"
  7010 ;; Parameters:    Size  Location     Type
  7011 ;;		None
  7012 ;; Auto vars:     Size  Location     Type
  7013 ;;		None
  7014 ;; Return value:  Size  Location     Type
  7015 ;;		None               void
  7016 ;; Registers used:
  7017 ;;		wreg
  7018 ;; Tracked objects:
  7019 ;;		On entry : 17F/0
  7020 ;;		On exit  : 17F/0
  7021 ;;		Unchanged: FFE80/0
  7022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7023 ;;      Params:         0       0       0       0       0
  7024 ;;      Locals:         0       0       0       0       0
  7025 ;;      Temps:          0       0       0       0       0
  7026 ;;      Totals:         0       0       0       0       0
  7027 ;;Total ram usage:        0 bytes
  7028 ;; Hardware stack levels used:    1
  7029 ;; This function calls:
  7030 ;;		Nothing
  7031 ;; This function is called by:
  7032 ;;		_main
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035  0AB5                     _InitADC:	
  7036                           
  7037                           ;ADC.c: 6: ADCON1 = 0x80;
  7038                           
  7039                           ; Regs used in _InitADC: [wreg]
  7040  0AB5  3080               	movlw	128
  7041  0AB6  1683               	bsf	3,5	;RP0=1, select bank1
  7042  0AB7  009F               	movwf	31	;volatile
  7043                           
  7044                           ;ADC.c: 8: TRISA = 0x2f;
  7045  0AB8  302F               	movlw	47
  7046  0AB9  0085               	movwf	5	;volatile
  7047                           
  7048                           ;ADC.c: 9: TRISE = 0x07;
  7049  0ABA  3007               	movlw	7
  7050  0ABB  0089               	movwf	9	;volatile
  7051                           
  7052                           ;ADC.c: 10: ADCON0 = 0x81;
  7053  0ABC  3081               	movlw	129
  7054  0ABD  1283               	bcf	3,5	;RP0=0, select bank0
  7055  0ABE  009F               	movwf	31	;volatile
  7056  0ABF  0008               	return
  7057  0AC0                     __end_of_InitADC:	
  7058                           
  7059                           	psect	text896
  7060  0AA7                     __ptext896:	
  7061 ;; =============== function _InitADC ends ============
  7062                           
  7063                           
  7064 ;; *************** function _InitKeypad *****************
  7065 ;; Defined at:
  7066 ;;		line 8 in file "C:\Users\nicolae\MPLABXProjects\SchoolBell2.X\Keypad.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;		None
  7069 ;; Auto vars:     Size  Location     Type
  7070 ;;		None
  7071 ;; Return value:  Size  Location     Type
  7072 ;;		None               void
  7073 ;; Registers used:
  7074 ;;		wreg, status,2
  7075 ;; Tracked objects:
  7076 ;;		On entry : 60/0
  7077 ;;		On exit  : 60/20
  7078 ;;		Unchanged: FFF9F/0
  7079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7080 ;;      Params:         0       0       0       0       0
  7081 ;;      Locals:         0       0       0       0       0
  7082 ;;      Temps:          0       0       0       0       0
  7083 ;;      Totals:         0       0       0       0       0
  7084 ;;Total ram usage:        0 bytes
  7085 ;; Hardware stack levels used:    1
  7086 ;; This function calls:
  7087 ;;		Nothing
  7088 ;; This function is called by:
  7089 ;;		_main
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092  0AA7                     _InitKeypad:	
  7093                           
  7094                           ;Keypad.c: 9: PORTB = 0x00;
  7095                           
  7096                           ; Regs used in _InitKeypad: [wreg+status,2]
  7097  0AA7  0186               	clrf	6	;volatile
  7098                           
  7099                           ;Keypad.c: 10: TRISB = 0xF0;
  7100  0AA8  30F0               	movlw	240
  7101  0AA9  1683               	bsf	3,5	;RP0=1, select bank1
  7102  0AAA  0086               	movwf	6	;volatile
  7103                           
  7104                           ;Keypad.c: 14: OPTION_REG &= 0x7F;
  7105  0AAB  1381               	bcf	1,7	;volatile
  7106  0AAC  0008               	return
  7107  0AAD                     __end_of_InitKeypad:	
  7108                           
  7109                           	psect	text897
  7110  0000                     __ptext897:	
  7111 ;; =============== function _InitKeypad ends ============
  7112                           
  7113  007E                     btemp	set	126	;btemp
  7114  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Fri May 09 09:15:54 2014

           __end_of_GetDate_RTC 0DCC                               pc 0002                  ___bmul@product 0071  
       verificareOreSonerie@dif 0034                    ___awdiv@sign 0075                              fsr 0004  
           ___wmul@multiplicand 0072           __size_of_WriteBTo_RTC 0029                             l700 0D40  
                           l703 0D57                             l704 0D53                             l643 0000  
                           l651 0C54                             l708 0D66                             l660 0C76  
                           l652 0C50                             l717 0000                             l646 0C41  
                           l671 0CB7                             l663 0C91                             l655 0C67  
                           l647 0C3D                             l680 0CDD                             l672 0CB3  
                           l664 0C8D                             l656 0C63                             l691 0D1A  
                           l683 0CF4                             l675 0CCA                             l667 0CA4  
                           l659 0C7A                             l692 0D16                             l684 0CF0  
                           l676 0CC6                             l668 0CA0                             l695 0D31  
                           l687 0D07                             l679 0CE1                             l696 0D2D  
                           l688 0D03                             l699 0D44                             _RB0 0030  
                           _RB1 0031                             _RB2 0032                             _RB3 0033  
                           _RD0 0040                             _RB4 0034                             _RD1 0041  
                           _RB5 0035                             _RB6 0036                             _RB7 0037  
                           _RD4 0044                             _RD5 0045                             _RD6 0046  
                           _RD7 0047                             _PEN 048A                             _SEN 0488  
            disp_num@TenthDigit 007C                             fsr0 0004                             indf 0000  
                          l2202 0000                            l2141 0000                            l2235 0E28  
                          l2236 0E3E                            l2237 0000                            l1382 0000  
                          l1391 0000                            l1376 0000                            l2184 0168  
                          l1385 0000                            l1394 0000                            l1379 0000  
           __end_of_GetTime_RTC 0E0F                            l3600 0FCF                            l3603 0000  
                          l3612 0FE5                            l4270 0000                            l3606 0FEE  
                          l3615 0000                            l3624 0FD6                            l3609 0000  
                          l4273 07F5                            l3618 0FBB                            l2914 0000  
                          l3627 0000                            l2923 0000                            l2931 0000  
                          l4276 0000                            l5069 0000                            l2941 0000  
                          l3591 0000                            l2927 0F1C                            l2944 0000  
                          l3585 0000                            l3594 0FDD                            l2938 0000  
                          l3588 0FC8                            l3597 0000                            l8103 0000  
                          l8111 0000                            l8105 0000                            l8121 0C15  
                          l8201 0000                            l4922 0000                            l8051 0BD7  
                          l8107 0EBC                            l8123 0C27                            l8115 0000  
                          l8203 0000                            l8211 0000                            l4916 0000  
                          l4932 0000                            l8053 0000                            l8061 0000  
                          l8109 0ED4                            l8117 0000                            l8133 0686  
                          l8205 0000                            l8213 0000                            l8221 0000  
                          l8301 0000                            l8055 0000                            l8071 0000  
                          l8151 069D                            l8135 068A                            l8127 0000  
                          l8207 0000                            l8215 0000                            l8231 0000  
                          l8223 0000                            l8311 0000                            l8303 0000  
                          l4952 0000                            l8057 0000                            l8081 0F9E  
                          l8145 0695                            l8217 0000                            l8209 0000  
                          l8241 0000                            l8225 0000                            l8321 0000  
                          l8313 0000                            l8305 0000                            l8059 0000  
                          l8083 0FB6                            l8075 0000                            l8067 0F8F  
                          l8163 06AD                            l8139 068D                            l8219 0000  
                          l8243 0E03                            l8227 0000                            l8323 0000  
                          l8315 0000                            l8307 0000                            l8331 06FC  
                          l4949 0232                            l8093 0000                            l8085 0E9E  
                          l8181 06C5                            l8157 06A5                            l8245 0000  
                          l8237 0DF7                            l8229 0000                            l8261 0F29  
                          l8253 0000                            l8317 0000                            l8309 0000  
                          l8325 0000                            l8333 0000                            l8501 0000  
                          l8421 03F0                            l8405 0000                            l4958 0000  
                          l8079 0000                            l8095 0000                            l8175 06BD  
                          l8247 0000                            l8239 0DF8                            l8255 0F1E  
                          l8263 0000                            l8271 0000                            l8319 0000  
                          l8335 0000                            l8343 0000                            l8351 0000  
                          l8511 0000                            l8503 0000                            l8423 0000  
                          l8415 03ED                            l8431 041D                            l7801 0000  
                          l8097 0000                            l8089 0000                            l8169 06B5  
                          l8265 0000                            l8281 0000                            l8273 0000  
                          l8329 0000                            l8345 0000                            l8337 0000  
                          l8361 0220                            l8353 0000                            l8601 0000  
                          l8521 0000                            l8513 0000                            l8505 0000  
                          l8441 0000                            l8433 0000                            l8425 0000  
                          l8409 0000                            l7803 0000                            l8099 0000  
                          l8187 06CD                            l8259 0F21                            l8275 0000  
                          l8267 0000                            l8291 0000                            l8339 0000  
                          l8363 0222                            l8355 0000                            l8347 0000  
                          l8371 0000                            l8531 0000                            l8523 0000  
                          l8515 0000                            l8507 0000                            l8451 0000  
                          l8443 0000                            l8611 0000                            l7813 0000  
                          l7805 0000                            l7821 0000                            l7901 0000  
                          l8197 0000                            l8277 0000                            l8269 0000  
                          l8293 0000                            l8285 0000                            l8365 0224  
                          l8357 0000                            l8349 0000                            l8381 0000  
                          l8373 0000                            l8605 0671                            l8541 0000  
                          l8533 0000                            l8525 0000                            l8517 0000  
                          l8509 0000                            l8461 0000                            l8453 0000  
                          l8445 0000                            l8437 0000                            l8429 0000  
                          l8621 0AD3                            l8613 0000                            l8701 0000  
                          l7815 0000                            l7807 0E91                            l7831 0000  
                          l7823 03BB                            l7911 0000                            l8199 0000  
                          l8279 0000                            l8295 0000                            l8287 0000  
                          l8359 0000                            l8391 00A6                            l8383 0000  
                          l8375 0000                            l8607 0663                            l8551 0000  
                          l8543 0000                            l8535 0000                            l8527 0000  
                          l8519 0000                            l8471 0000                            l8463 0000  
                          l8455 0000                            l8447 0000                            l8439 0000  
                          l8615 0000                            l8631 0000                            l8623 0000  
                          l8711 0000                            l8703 0000                            l7921 0000  
                          l7913 0E54                            l7905 0000                            l8297 0000  
                          l8289 0000                            l8393 00A8                            l8385 00A0  
                          l8377 0000                            l8561 0000                            l8553 0000  
                          l8545 0000                            l8537 0000                            l8529 0000  
                          l8481 0000                            l8473 0000                            l8465 0000  
                          l8457 0000                            l8449 0000                            l8609 0000  
                          l8641 0000                            l8633 0000                            l8625 0000  
                          l8721 0000                            l8713 0000                            l8705 0000  
                          l7771 0000                            l7827 03C3                            l7931 0000  
                          l7907 0000                            l8299 0000                            l8395 00AA  
                          l8387 00A2                            l8379 0000                            l8555 0000  
                          l8547 0000                            l8539 0000                            l8483 0000  
                          l8475 0000                            l8467 0000                            l8459 0000  
                          l8619 0AE1                            l8651 0000                            l8643 0000  
                          l8635 0000                            l8627 0000                            l8715 0000  
                          l8707 0000                            l7773 0000                            l7781 0000  
                          l7829 0000                            l7853 0000                            l7837 0000  
                          l7941 0E82                            l7917 0000                            l8397 00AC  
                          l8389 00A4                            l8581 0000                            l8573 0000  
                          l8557 0000                            l8549 0000                            l8493 04E8  
                          l8485 0000                            l8477 0000                            l8469 0000  
                          l8661 0000                            l8653 0000                            l8645 0000  
                          l8637 0000                            l8629 0000                            l8725 0164  
                          l8717 0000                            l8709 0000                            l8741 0D97  
                          l8733 0000                            l7775 0000                            l7783 0000  
                          l7791 0FCD                            l7847 0720                            l7839 0000  
                          l7863 0000                            l7943 0000                            l7935 0000  
                          l7919 0E5D                            l8399 00AE                            l8567 0602  
                          l8559 0000                            l8479 0000                            l8495 04EB  
                          l8671 0000                            l8663 0000                            l8647 0000  
                          l8639 0000                            l8719 0000                            l8743 0D9C  
                          l8751 0000                            l7769 0000                            l7777 0000  
                          l7793 0000                            l7857 0000                            l7849 0000  
                          l7881 0000                            l7873 0000                            l7865 0000  
                          l7945 0E8A                            l7929 0E6B                            l8593 0000  
                          l8585 0635                            l8577 0618                            l8497 0000  
                          l8569 0605                            l8681 0000                            l8673 0000  
                          l8665 0000                            l8657 0302                            l8649 0000  
                          l8737 0D8D                            l8729 0000                            l8761 0000  
                          l8753 0000                            l8745 0000                            l7779 0000  
                          l7787 0FC3                            l7795 0000                            l7859 0737  
                          l7867 0000                            l7883 023F                            l7891 0245  
                          l7939 0000                            l8587 0627                            l8579 0000  
                          l8691 03A1                            l8675 0000                            l8667 0000  
                          l8659 0000                            l8739 0D81                            l8771 0B54  
                          l8763 0000                            l8755 0000                            l8747 0000  
                          l7797 0000                            l7877 0000                            l7869 022C  
                          l7893 0000                            l7949 0000                            l8597 0654  
                          l8589 063F                            l8685 0000                            l8677 0000  
                          l8669 0000                            l8693 0000                            l8781 0000  
                          l8773 0000                            l8765 0000                            l8757 0000  
                          l8749 0000                            l7895 0000                            l7887 0000  
                          l8599 0000                            l8679 0000                            l8695 0000  
                          l8767 0000                            l8759 0000                            l7889 0000  
                          l8689 03AF                            l8697 0000                            l8777 0B68  
                          l8769 0000                            l7899 0259                            l8699 0000  
                          l8779 0000                            STR_1 08B3                            STR_2 08B6  
                          STR_3 08A3                            STR_4 089B                            STR_5 0897  
                          STR_6 08AF                            STR_7 089F                            STR_8 08AB  
                          STR_9 08A7                            u1305 0729                            u2105 05F3  
                          u2025 040C                            u2035 041B                            u2055 04C1  
                          u2065 04CD                            u1435 0E74                            u2075 04D9  
                          u2317 050A                            u2407 0BA5                            u2095 05E7  
                          u2327 0524                            u2255 0159                            u2417 0BB4  
                          u2337 0545                            u2265 016E                            u2507 0C86  
                          u2427 0BC4                            u2347 055F                            u2517 0C99  
                          u2437 07ED                            u1805 0FA7                            u2357 0580  
                          u2607 0D4C                            u2527 0CAC                            u2447 0BDC  
                          u2367 059A                            u2617 0D5F                            u2537 0CBF  
                          u2457 0BE7                            u1825 0EC2                            u2377 06F5  
                          u2547 0CD6                            u2467 0C36                            u2387 0B86  
                          u2557 0CE9                            u2477 0C49                            u2397 0B97  
                          u2567 0CFC                            u2487 0C5C                            u2577 0D0F  
                          u2497 0C6F                            u2587 0D26                            u2597 0D39  
                          _RCEN 048B                            _RSEN 0489                  ?_ReadBFrom_RTC 0071  
                          _Temp 005F                            _main 0AEB                            _test 0AC0  
                          btemp 007E                     _GetADCValue 07DB                            start 0000  
               __end_of_GetChar 0C29               ___bmul@multiplier 0072                    _WriteBTo_RTC 0F8E  
               __end_of_InitADC 0AC0                    disp_num@numb 0078                           ?_main 0070  
                         _ACKEN 048C                           _ACKDT 048D                 __end_of___awdiv 0E8F  
               __end_of___lbdiv 0241                           STR_10 0893                           STR_11 0873  
                         STR_20 084B                           STR_12 0840                           STR_21 087C  
                         STR_13 0828                           STR_22 088C                           STR_14 0884  
                         STR_15 0860                           STR_23 0834                           STR_16 086A  
                         STR_24 0819                           STR_17 0856                           STR_18 0856  
                         STR_19 0806                 __end_of___lbmod 025D                           ?_test 0070  
               ___awdiv@divisor 0070                 __end_of___lwdiv 073C                 ___awdiv@counter 0074  
                         _PORTB 0006                           _PORTD 0008                           _TRISA 0085  
                         _TRISB 0086                           _TRISE 0089                           _SSPIF 0063  
                   _writeString 06FB                   ??_SendACK_I2C 0070                 __end_of_initLCD 0BD7  
                         pclath 000A                           status 0003                           wtemp0 007E  
         __size_of_writeCommand 0012           detectieIncendiu@count 0024                     _GetDate_RTC 0DA1  
                 ??_SetDate_RTC 007B                 ___lbdiv@divisor 0070                __end_of_GetChar2 06D5  
               ___lbdiv@counter 0072     detectieIncendiu@ADC_value_2 0030                      _InitKeypad 0AA7  
          __size_of_clearScreen 0010                    __end_of_main 0B79                    __end_of_test 0AEB  
              __end_of_Init_I2C 0010                __end_of_Read_I2C 0FDC                   ?_SendNACK_I2C 0070  
                        ??_main 007E                          ??_test 0075                     _GetTime_RTC 0DCC  
                 ??_SetTime_RTC 007B                    _writeCommand 0BED                __end_of_Stop_I2C 0FD4  
                        _ADCON0 001F                          _ADCON1 009F                 ??_ReadBFrom_RTC 0074  
                        _ADRESH 001E                          _ADRESL 009E                ___awdiv@dividend 0072  
           __end_of_SendACK_I2C 0FF3                       ??_GetChar 0073   __size_of_verificareOreSonerie 0109  
                        _SSPADD 0093                          _TRISD0 0440                          _TRISD1 0441  
                        _TRISC3 043B                          _TRISC4 043C                          _TRISD4 0444  
                        _TRISD5 0445                          _TRISD6 0446                          _TRISD7 0447  
                        _SSPCON 0014                          _SSPBUF 0013       __size_of_DisplayDateOnLCD 0086  
                     ??_InitADC 0070                   ?_readSwitches 0070                __end_of_disp_num 0E4A  
                        ___bmul 0E8F                   ??_Restart_I2C 0070                          ___wmul 03B9  
                     ??___awdiv 0074                       ??___lbdiv 0071                       ??___lbmod 0071  
           __end_of_SetDate_RTC 0F8E                          _apasat 0066                       ??___lwdiv 007A  
                ??_SendNACK_I2C 0070                ___awdiv@quotient 0076                          _prevH1 0055  
                        _prevM1 0057                          _prevM2 0059                          _prevS1 005B  
                        _prevS2 005D                          clrloop 0AAE                       ??_initLCD 0073  
                 GetChar@contor 0073        __end_of_detectieIncendiu 03B9              __size_of_Start_I2C 0008  
     detectieIncendiu@ADC_value 002E          detectieIncendiu@digit1 0036          detectieIncendiu@digit2 0034  
        detectieIncendiu@digit3 0032          detectieIncendiu@digit4 002C          detectieIncendiu@count2 0026  
              ___lbdiv@dividend 0071             __end_of_SetTime_RTC 0F2F                 ___lbmod@divisor 0070  
               ___lbmod@counter 0073              __size_of_Write_I2C 000E                  ??_readSwitches 0070  
        __size_of_afiareDefault 0034             ___bmul@multiplicand 0070                     ?_InitKeypad 0070  
     __size_of_DisplayTimeToLCD 006D                  __pcstackCOMMON 0070                    __pidataBANK0 0000  
           detectieIncendiu@fum 002A                writeChar@LCDChar 0072                ___lbdiv@quotient 0073  
           __end_of_Restart_I2C 0FE2                       ?_GetChar2 0073                     _SendACK_I2C 0FEA  
                    __pbssBANK0 0055                      __pbssBANK1 00A0                       ?_Init_I2C 0070  
                     ?_Read_I2C 0070                    ?_GetADCValue 0070                     _SetDate_RTC 0F2F  
                    __pmaintext 0AEB                         ?___bmul 0070               __end_of_Start_I2C 0FCD  
                       ?___wmul 0070                       ?_Stop_I2C 0070                         _ACKSTAT 048E  
             __end_of_Write_I2C 0FC5                   _afiareDefault 0D6D                    ?_writeString 0070  
                   _SetTime_RTC 0ED8                      ??_GetChar2 0075                  tastaApasata@m1 0031  
                tastaApasata@m2 0033                  tastaApasata@s1 0035                  tastaApasata@s2 0037  
          ReadBFrom_RTC@NOBytes 0072              __size_of_pulseEpin 0016             __size_of_InitKeypad 0006  
          ReadBFrom_RTC@Address 0075                       ?_disp_num 0078                         _SSPSTAT 0094  
                    ??_Init_I2C 0070                      ??_Read_I2C 0070            __end_of_SendNACK_I2C 0FEA  
          tastaApasata@ch1_2837 0039                         _GetChar 0C10            tastaApasata@ch2_2838 003B  
                 ?_tastaApasata 0070                _DisplayDateOnLCD 002A                    ?_GetDate_RTC 0070  
                       _InitADC 0AB5              __size_of_writeChar 0016                 __size_of___bmul 000E  
                   _Restart_I2C 0FDC                         ___awdiv 0E4A                         ___lbdiv 0226  
                       ___lbmod 0241                 __size_of___wmul 0019                         ___lwdiv 0712  
                    ??_Stop_I2C 0070                SetTime_RTC@Hours 0078             afiareDefault@count2 007B  
                       _initLCD 0B79                  ?_afiareDefault 0070            __end_of_readSwitches 0D6A  
                  ?_GetTime_RTC 0070                         _oraNext 0060                         _oraPrev 0061  
                    ??_disp_num 007A      DisplayDateOnLCD@pDateArray 0075            end_of_initialization 0026  
                    _oreSonerie 00A0                  ??_tastaApasata 0020                   ??_clearScreen 0073  
                   test@message 0079                _DisplayTimeToLCD 01B9                tastaApasata@hour 0045  
              tastaApasata@year 002B                 SetDate_RTC@Date 007D               __end_of_pulseEpin 0BED  
               SetDate_RTC@Year 0079                  ReadBFrom_RTC@i 0076     detectieIncendiu@temperatura 0028  
  __end_of_verificareOreSonerie 01B9               __end_of_writeChar 06EB                ___lbmod@dividend 0072  
             ?_detectieIncendiu 0070         tastaApasata@count2_2853 0029              ??_detectieIncendiu 0020  
         __end_of_ReadBFrom_RTC 0ED8                     ___lbmod@rem 0074                    writeString@s 0073  
             disp_num@UnitDigit 007B                    ??_InitKeypad 0070            __size_of_GetADCValue 0025  
           __end_of_clearScreen 06FB                   WriteBTo_RTC@i 0076                  __end_of___bmul 0E9D  
                __end_of___wmul 03D2                 ??_afiareDefault 0079              GetADCValue@Channel 0074  
                 Write_I2C@Byte 0070             start_initialization 0010                    ?_SendACK_I2C 0070  
 verificareOreSonerie@newMinute 002E   verificareOreSonerie@newSecond 0032           __size_of_SendNACK_I2C 0008  
          __size_of_writeString 0017              __end_of_InitKeypad 0AAD               __size_of_GetChar2 005A  
             __size_of_Init_I2C 000C                    ?_SetDate_RTC 0078               __size_of_Read_I2C 0008  
           WriteBTo_RTC@NOBytes 0072            __size_of_GetDate_RTC 002B                   ?_WriteBTo_RTC 0071  
            ReadBFrom_RTC@pData 0071             WriteBTo_RTC@Address 0075                        ??___bmul 0071  
                      ??___wmul 0074                     __pdataBANK0 0066           __size_of_readSwitches 0141  
                     _Start_I2C 0FC5                    _SendNACK_I2C 0FE2            __end_of_tastaApasata 067B  
             __size_of_Stop_I2C 0007        __end_of_DisplayDateOnLCD 00B0       verificareOreSonerie@newH1 0022  
     verificareOreSonerie@newM1 0024       verificareOreSonerie@newM2 0026       verificareOreSonerie@newS1 0028  
     verificareOreSonerie@newS2 002A                    ?_SetTime_RTC 0078                   __pcstackBANK0 0020  
                     _Write_I2C 0FB7            __size_of_GetTime_RTC 0043                        ?_GetChar 0070  
             __size_of_disp_num 003B            _verificareOreSonerie 00B0                        ?_InitADC 0070  
            SetTime_RTC@Minutes 0079              SetTime_RTC@Seconds 007A                     _clearScreen 06EB  
             WriteBTo_RTC@pData 0071                    _readSwitches 0C29                  ??_WriteBTo_RTC 0073  
              ___lwdiv@dividend 0078      DisplayTimeToLCD@pTimeArray 0075                    ?_Restart_I2C 0070  
                      ?___awdiv 0070                        ?___lbdiv 0070                        ?___lbmod 0070  
                     __ptext860 0AC0                       __ptext861 03D2                       __ptext870 0ED8  
                     __ptext862 002A                       __ptext871 0DCC                       __ptext863 01B9  
                     __ptext880 0C29                       __ptext872 06D5                       __ptext864 0E0F  
                     __ptext881 0E4A                       __ptext873 0BED                       __ptext865 06EB  
                     __ptext857 0D6D                       __ptext890 0FDC                       __ptext882 0241  
                     __ptext874 067B                       __ptext866 06FB                       __ptext858 00B0  
                     __ptext891 0FCD                       __ptext883 0226                       __ptext875 0C10  
                     __ptext867 0B79                       __ptext859 025D                       __ptext892 0FB7  
                     __ptext884 0712                       __ptext876 0E9D                       __ptext868 0DA1  
                     __ptext893 0FC5                       __ptext885 03B9                       __ptext877 0F8E  
                     __ptext869 0F2F                       __ptext894 0004                       __ptext886 0E8F  
                     __ptext878 07DB                       __ptext895 0AB5                       __ptext887 0FEA  
                     __ptext879 0BD7                       __ptext896 0AA7                       __ptext888 0FE2  
                     __ptext897 0000                       __ptext889 0FD4                        ?___lwdiv 0076  
           tastaApasata@m1_2841 003D             tastaApasata@m2_2842 003F                      ?_Start_I2C 0070  
                 tastaApasata@i 004F                   tastaApasata@k 0051                       __pstrings 0800  
           tastaApasata@s1_2845 0041             tastaApasata@s2_2846 0043                        ?_initLCD 0070  
      __end_of_DisplayTimeToLCD 0226                      ?_Write_I2C 0070                   ?_writeCommand 0070  
              ___lwdiv@quotient 007A                 SetTime_RTC@Mode 007D              afiareDefault@count 0079  
         ?_verificareOreSonerie 0070                  ___wmul@product 0074                      test@count2 0077  
               tastaApasata@ch1 002D                 tastaApasata@ch2 002F  verificareOreSonerie@oraCurenta 0036  
               tastaApasata@day 004B                        _GO_nDONE 00FA                  SetDate_RTC@Day 007A  
                      _RTCArray 0062                       _pulseEpin 0BD7                     __stringbase 0805  
             ___wmul@multiplier 0070          tastaApasata@count_2852 0027                       main@tasta 0054  
                      _GetChar2 067B                  ??_writeCommand 0072                       _writeChar 06D5  
          __size_of_SendACK_I2C 0009  verificareOreSonerie@prevMinute 002C  verificareOreSonerie@prevSecond 0030  
                      _Init_I2C 0004                        _Read_I2C 0FD4                __size_of_GetChar 0019  
              __size_of_InitADC 000B                     GetChar2@key 0075            __size_of_SetDate_RTC 005F  
     __size_of_detectieIncendiu 015C           __size_of_tastaApasata 02A9                        _Stop_I2C 0FCD  
              __size_of___awdiv 0045                __size_of___lbdiv 001B                __size_of___lbmod 001C  
              __size_of___lwdiv 002A                     ??_Start_I2C 0070                      ?_pulseEpin 0070  
              __size_of_initLCD 005E             writeCommand@Command 0072            __end_of_WriteBTo_RTC 0FB7  
               ___lwdiv@divisor 0076                     ??_Write_I2C 0070                 ___lwdiv@counter 007C  
                    ?_writeChar 0070                 _intervalSonerie 0068            __size_of_SetTime_RTC 0057  
                      _disp_num 0E0F          ??_verificareOreSonerie 007A                   __size_of_main 008E  
                  _tastaApasata 03D2                   __size_of_test 002B                   ??_GetADCValue 0072  
            tastaApasata@count2 0025                        clear_ram 0AAD              tastaApasata@minute 0047  
            tastaApasata@second 0049                       test@count 0075            __size_of_Restart_I2C 0006  
        __size_of_ReadBFrom_RTC 003B           __end_of_afiareDefault 0DA1               ?_DisplayDateOnLCD 0070  
                 ??_writeString 0073              ??_DisplayDateOnLCD 0075                      GetChar@key 0075  
                 ??_GetDate_RTC 0078                    ?_clearScreen 0070                       stringcode 0800  
             tastaApasata@count 0023               tastaApasata@month 004D               tastaApasata@tasta 0053  
          __end_of_writeCommand 0BFF             __end_of_GetADCValue 0800                SetDate_RTC@Month 0078  
                   ??_pulseEpin 0070                      _OPTION_REG 0081                   ??_GetTime_RTC 0078  
                      stringdir 0800                        stringtab 0800               ?_DisplayTimeToLCD 0070  
                   ??_writeChar 0072              ??_DisplayTimeToLCD 0075             __end_of_writeString 0712  
                 _ReadBFrom_RTC 0E9D                _detectieIncendiu 025D  
