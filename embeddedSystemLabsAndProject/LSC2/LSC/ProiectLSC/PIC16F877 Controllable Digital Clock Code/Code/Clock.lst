

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sun Dec 16 01:50:32 2012

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	text412,local,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	text413,local,class=CODE,delta=2
    13                           	psect	text418,local,class=CODE,delta=2
    14                           	psect	text423,local,class=CODE,delta=2
    15                           	psect	text424,local,class=CODE,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text425,local,class=CODE,delta=2
    18                           	psect	pa_nodes,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  000A                     	;#
    21                           
    22                           	psect	config
    23  2007  FF72               	dw	65394	;#
    24                           
    25                           	psect	text412
    26  0000                     __ptext412:	
    27  0006                     _PORTB	set	6
    28  0001                     _TMR0	set	1
    29  005F                     _GIE	set	95
    30  0030                     _RB0	set	48
    31  0031                     _RB1	set	49
    32  0034                     _RB4	set	52
    33  0035                     _RB5	set	53
    34  0036                     _RB6	set	54
    35  0037                     _RB7	set	55
    36  0048                     _RE0	set	72
    37  0049                     _RE1	set	73
    38  004A                     _RE2	set	74
    39  005D                     _T0IE	set	93
    40  005A                     _T0IF	set	90
    41  009F                     _ADCON1	set	159
    42  0081                     _OPTION_REG	set	129
    43  0089                     _TRISE	set	137
    44  0430                     _TRISB0	set	1072
    45  0431                     _TRISB1	set	1073
    46  0434                     _TRISB4	set	1076
    47  0435                     _TRISB5	set	1077
    48  0436                     _TRISB6	set	1078
    49  0437                     _TRISB7	set	1079
    50                           
    51                           	psect	cinit
    52  02AD                     start_initialization:	
    53                           
    54                           ; Clear objects allocated to COMMON
    55  02AD  01F8               	clrf	__pbssCOMMON& (0+127)
    56  02AE  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
    57  02AF  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
    58  02B0  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
    59                           
    60                           ; Clear objects allocated to BANK0
    61  02B1  01AA               	clrf	__pbssBANK0& (0+127)
    62  02B2  01AB               	clrf	(__pbssBANK0+1)& (0+127)
    63  02B3  01AC               	clrf	(__pbssBANK0+2)& (0+127)
    64  02B4  01AD               	clrf	(__pbssBANK0+3)& (0+127)
    65  02B5                     end_of_initialization:	
    66                           ;End of C runtime variable initialization code
    67                           
    68  02B5  0183               	clrf	3
    69  02B6  120A  118A  298B   	ljmp	_main	;jump to C main() function
    70                           
    71                           	psect	bssCOMMON
    72  0078                     __pbssCOMMON:	
    73  0078                     _hrCounter:	
    74  0078                     	ds	2
    75  007A                     _minCounter:	
    76  007A                     	ds	2
    77                           
    78                           	psect	bssBANK0
    79  002A                     __pbssBANK0:	
    80  002A                     _msCounter:	
    81  002A                     	ds	2
    82  002C                     _secCounter:	
    83  002C                     	ds	2
    84                           
    85                           	psect	cstackCOMMON
    86  0070                     __pcstackCOMMON:	
    87  0070                     ?_Init1msecTimerInterrupt:	
    88  0070                     ?_UpdateTimeCounters:	
    89                           ; 0 bytes @ 0x0
    90                           
    91  0070                     ?_ToggleEpinOfLCD:	
    92                           ; 0 bytes @ 0x0
    93                           
    94  0070                     ?_WriteCommandToLCD:	
    95                           ; 0 bytes @ 0x0
    96                           
    97  0070                     ?_WriteDataToLCD:	
    98                           ; 0 bytes @ 0x0
    99                           
   100  0070                     ?_InitLCD:	
   101                           ; 0 bytes @ 0x0
   102                           
   103  0070                     ?_ClearLCDScreen:	
   104                           ; 0 bytes @ 0x0
   105                           
   106  0070                     ?_main:	
   107                           ; 0 bytes @ 0x0
   108                           
   109  0070                     ?_InitTimer0:	
   110                           ; 0 bytes @ 0x0
   111                           
   112  0070                     ?_ISR:	
   113                           ; 0 bytes @ 0x0
   114                           
   115  0070                     ??_ISR:	
   116                           ; 0 bytes @ 0x0
   117                           
   118                           
   119                           ; 0 bytes @ 0x0
   120  0070                     	ds	2
   121  0072                     ??_Init1msecTimerInterrupt:	
   122  0072                     ??_UpdateTimeCounters:	
   123                           ; 0 bytes @ 0x2
   124                           
   125  0072                     ??_ToggleEpinOfLCD:	
   126                           ; 0 bytes @ 0x2
   127                           
   128  0072                     ??_InitTimer0:	
   129                           ; 0 bytes @ 0x2
   130                           
   131  0072                     ?___lwdiv:	
   132                           ; 0 bytes @ 0x2
   133                           
   134  0072                     ?___lwmod:	
   135                           ; 2 bytes @ 0x2
   136                           
   137  0072                     UpdateTimeCounters@State:	
   138                           ; 2 bytes @ 0x2
   139                           
   140  0072                     ___lwdiv@divisor:	
   141                           ; 1 bytes @ 0x2
   142                           
   143  0072                     ___lwmod@divisor:	
   144                           ; 2 bytes @ 0x2
   145                           
   146                           
   147                           ; 2 bytes @ 0x2
   148  0072                     	ds	1
   149  0073                     ??_WriteCommandToLCD:	
   150  0073                     ??_WriteDataToLCD:	
   151                           ; 0 bytes @ 0x3
   152                           
   153  0073                     WriteCommandToLCD@Command:	
   154                           ; 0 bytes @ 0x3
   155                           
   156  0073                     WriteDataToLCD@LCDChar:	
   157                           ; 1 bytes @ 0x3
   158                           
   159                           
   160                           ; 1 bytes @ 0x3
   161  0073                     	ds	1
   162  0074                     ??_InitLCD:	
   163  0074                     ??_ClearLCDScreen:	
   164                           ; 0 bytes @ 0x4
   165                           
   166  0074                     ___lwdiv@dividend:	
   167                           ; 0 bytes @ 0x4
   168                           
   169  0074                     ___lwmod@dividend:	
   170                           ; 2 bytes @ 0x4
   171                           
   172                           
   173                           ; 2 bytes @ 0x4
   174  0074                     	ds	2
   175  0076                     ??___lwdiv:	
   176  0076                     ??___lwmod:	
   177                           ; 0 bytes @ 0x6
   178                           
   179  0076                     ___lwmod@counter:	
   180                           ; 0 bytes @ 0x6
   181                           
   182                           
   183                           ; 1 bytes @ 0x6
   184  0076                     	ds	1
   185  0077                     ??_DisplayTimeToLCD:	
   186  0077                     ??_main:	
   187                           ; 0 bytes @ 0x7
   188                           
   189  0077                     main@State:	
   190                           ; 0 bytes @ 0x7
   191                           
   192                           
   193                           ; 1 bytes @ 0x7
   194  0077                     	ds	1
   195                           
   196                           	psect	cstackBANK0
   197  0020                     __pcstackBANK0:	
   198  0020                     ___lwdiv@counter:	
   199                           
   200                           ; 1 bytes @ 0x0
   201  0020                     	ds	1
   202  0021                     ___lwdiv@quotient:	
   203                           
   204                           ; 2 bytes @ 0x1
   205  0021                     	ds	2
   206  0023                     ?_DisplayTimeToLCD:	
   207  0023                     DisplayTimeToLCD@h:	
   208                           ; 0 bytes @ 0x3
   209                           
   210                           
   211                           ; 2 bytes @ 0x3
   212  0023                     	ds	2
   213  0025                     DisplayTimeToLCD@m:	
   214                           
   215                           ; 2 bytes @ 0x5
   216  0025                     	ds	2
   217  0027                     DisplayTimeToLCD@s:	
   218                           
   219                           ; 2 bytes @ 0x7
   220  0027                     	ds	2
   221  0029                     DisplayTimeToLCD@State:	
   222                           
   223                           ; 1 bytes @ 0x9
   224  0029                     	ds	1
   225                           
   226                           	psect	maintext
   227  018B                     __pmaintext:	
   228 ;;Data sizes: Strings 0, constant 0, data 0, bss 8, persistent 0 stack 0
   229 ;;Auto spaces:   Size  Autos    Used
   230 ;; COMMON          14      8      12
   231 ;; BANK0           80     10      14
   232 ;; BANK1           80      0       0
   233 ;; BANK3           96      0       0
   234 ;; BANK2           96      0       0
   235 ;;
   236 ;; Pointer list with targets:
   237 ;; ?___lwmod	unsigned int  size(1) Largest target is 0
   238 ;;
   239 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   240 ;;
   241 ;;
   242 ;; Critical Paths under _main in COMMON
   243 ;;
   244 ;;   _DisplayTimeToLCD->___lwmod
   245 ;;   _ClearLCDScreen->_WriteCommandToLCD
   246 ;;   _InitLCD->_WriteCommandToLCD
   247 ;;   _WriteDataToLCD->_ToggleEpinOfLCD
   248 ;;   _WriteCommandToLCD->_ToggleEpinOfLCD
   249 ;;
   250 ;; Critical Paths under _ISR in COMMON
   251 ;;
   252 ;;   None.
   253 ;;
   254 ;; Critical Paths under _main in BANK0
   255 ;;
   256 ;;   _main->_DisplayTimeToLCD
   257 ;;   _DisplayTimeToLCD->___lwdiv
   258 ;;
   259 ;; Critical Paths under _ISR in BANK0
   260 ;;
   261 ;;   None.
   262 ;;
   263 ;; Critical Paths under _main in BANK1
   264 ;;
   265 ;;   None.
   266 ;;
   267 ;; Critical Paths under _ISR in BANK1
   268 ;;
   269 ;;   None.
   270 ;;
   271 ;; Critical Paths under _main in BANK3
   272 ;;
   273 ;;   None.
   274 ;;
   275 ;; Critical Paths under _ISR in BANK3
   276 ;;
   277 ;;   None.
   278 ;;
   279 ;; Critical Paths under _main in BANK2
   280 ;;
   281 ;;   None.
   282 ;;
   283 ;; Critical Paths under _ISR in BANK2
   284 ;;
   285 ;;   None.
   286 ;;
   287 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   288 ;;
   289 ;;
   290 ;;Call Graph Tables:
   291 ;;
   292 ;; ---------------------------------------------------------------------------------
   293 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   294 ;; ---------------------------------------------------------------------------------
   295 ;; (0) _main                                                 1     1      0    1233
   296 ;;                                              7 COMMON     1     1      0
   297 ;;                            _InitLCD
   298 ;;            _Init1msecTimerInterrupt
   299 ;;                 _UpdateTimeCounters
   300 ;;                   _DisplayTimeToLCD
   301 ;; ---------------------------------------------------------------------------------
   302 ;; (1) _DisplayTimeToLCD                                     7     0      7     767
   303 ;;                                              3 BANK0      7     0      7
   304 ;;                     _ClearLCDScreen
   305 ;;                     _WriteDataToLCD
   306 ;;                            ___lwdiv
   307 ;;                            ___lwmod
   308 ;; ---------------------------------------------------------------------------------
   309 ;; (2) _ClearLCDScreen                                       2     2      0      44
   310 ;;                                              4 COMMON     2     2      0
   311 ;;                  _WriteCommandToLCD
   312 ;; ---------------------------------------------------------------------------------
   313 ;; (1) _InitLCD                                              2     2      0      44
   314 ;;                                              4 COMMON     2     2      0
   315 ;;                    _ToggleEpinOfLCD
   316 ;;                  _WriteCommandToLCD
   317 ;; ---------------------------------------------------------------------------------
   318 ;; (2) _WriteDataToLCD                                       1     1      0      44
   319 ;;                                              3 COMMON     1     1      0
   320 ;;                    _ToggleEpinOfLCD
   321 ;; ---------------------------------------------------------------------------------
   322 ;; (3) _WriteCommandToLCD                                    1     1      0      44
   323 ;;                                              3 COMMON     1     1      0
   324 ;;                    _ToggleEpinOfLCD
   325 ;; ---------------------------------------------------------------------------------
   326 ;; (1) _Init1msecTimerInterrupt                              0     0      0       0
   327 ;;                         _InitTimer0
   328 ;; ---------------------------------------------------------------------------------
   329 ;; (3) _ToggleEpinOfLCD                                      1     1      0       0
   330 ;;                                              2 COMMON     1     1      0
   331 ;; ---------------------------------------------------------------------------------
   332 ;; (2) ___lwmod                                              5     1      4     159
   333 ;;                                              2 COMMON     5     1      4
   334 ;; ---------------------------------------------------------------------------------
   335 ;; (2) ___lwdiv                                              7     3      4     241
   336 ;;                                              2 COMMON     4     0      4
   337 ;;                                              0 BANK0      3     3      0
   338 ;; ---------------------------------------------------------------------------------
   339 ;; (2) _InitTimer0                                           0     0      0       0
   340 ;; ---------------------------------------------------------------------------------
   341 ;; (1) _UpdateTimeCounters                                   1     1      0      66
   342 ;;                                              2 COMMON     1     1      0
   343 ;; ---------------------------------------------------------------------------------
   344 ;; Estimated maximum stack depth 3
   345 ;; ---------------------------------------------------------------------------------
   346 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   347 ;; ---------------------------------------------------------------------------------
   348 ;; (5) _ISR                                                  2     2      0       0
   349 ;;                                              0 COMMON     2     2      0
   350 ;; ---------------------------------------------------------------------------------
   351 ;; Estimated maximum stack depth 5
   352 ;; ---------------------------------------------------------------------------------
   353 ;; Call Graph Graphs:
   354 ;; _main (ROOT)
   355 ;;   _InitLCD
   356 ;;     _ToggleEpinOfLCD
   357 ;;     _WriteCommandToLCD
   358 ;;       _ToggleEpinOfLCD
   359 ;;   _Init1msecTimerInterrupt
   360 ;;     _InitTimer0
   361 ;;   _UpdateTimeCounters
   362 ;;   _DisplayTimeToLCD
   363 ;;     _ClearLCDScreen
   364 ;;       _WriteCommandToLCD
   365 ;;         _ToggleEpinOfLCD
   366 ;;     _WriteDataToLCD
   367 ;;       _ToggleEpinOfLCD
   368 ;;     ___lwdiv
   369 ;;     ___lwmod
   370 ;;
   371 ;; _ISR (ROOT)
   372 ;;
   373 ;; Address spaces:
   374 ;;Name               Size   Autos  Total    Cost      Usage
   375 ;;BITCOMMON            E      0       0       0        0.0%
   376 ;;EEDATA             100      0       0       0        0.0%
   377 ;;NULL                 0      0       0       0        0.0%
   378 ;;CODE                 0      0       0       0        0.0%
   379 ;;COMMON               E      8       C       1       85.7%
   380 ;;BITSFR0              0      0       0       1        0.0%
   381 ;;SFR0                 0      0       0       1        0.0%
   382 ;;BITSFR1              0      0       0       2        0.0%
   383 ;;SFR1                 0      0       0       2        0.0%
   384 ;;STACK                0      0       4       2        0.0%
   385 ;;ABS                  0      0      1A       3        0.0%
   386 ;;BITBANK0            50      0       0       4        0.0%
   387 ;;BITSFR3              0      0       0       4        0.0%
   388 ;;SFR3                 0      0       0       4        0.0%
   389 ;;BANK0               50      A       E       5       17.5%
   390 ;;BITSFR2              0      0       0       5        0.0%
   391 ;;SFR2                 0      0       0       5        0.0%
   392 ;;BITBANK1            50      0       0       6        0.0%
   393 ;;BANK1               50      0       0       7        0.0%
   394 ;;BITBANK3            60      0       0       8        0.0%
   395 ;;BANK3               60      0       0       9        0.0%
   396 ;;BITBANK2            60      0       0      10        0.0%
   397 ;;BANK2               60      0       0      11        0.0%
   398 ;;DATA                 0      0      1E      12        0.0%
   399                           
   400                           
   401 ;; *************** function _main *****************
   402 ;; Defined at:
   403 ;;		line 16 in file "C:\Users\Saeed\Desktop\PIC16F877 Controllable Digital Clock Code\Code\Main.c"
   404 ;; Parameters:    Size  Location     Type
   405 ;;		None
   406 ;; Auto vars:     Size  Location     Type
   407 ;;  State           1    7[COMMON] unsigned char 
   408 ;; Return value:  Size  Location     Type
   409 ;;		None               void
   410 ;; Registers used:
   411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   412 ;; Tracked objects:
   413 ;;		On entry : 17F/0
   414 ;;		On exit  : 0/0
   415 ;;		Unchanged: 0/0
   416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   417 ;;      Params:         0       0       0       0       0
   418 ;;      Locals:         1       0       0       0       0
   419 ;;      Temps:          0       0       0       0       0
   420 ;;      Totals:         1       0       0       0       0
   421 ;;Total ram usage:        1 bytes
   422 ;; Hardware stack levels required when called:    5
   423 ;; This function calls:
   424 ;;		_InitLCD
   425 ;;		_Init1msecTimerInterrupt
   426 ;;		_UpdateTimeCounters
   427 ;;		_DisplayTimeToLCD
   428 ;; This function is called by:
   429 ;;		Startup code after reset
   430 ;; This function uses a non-reentrant model
   431 ;;
   432  018B                     _main:	
   433  018B  3007               	movlw	7
   434                           
   435                           ;Main.c: 17: unsigned char State = 0;
   436                           
   437                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   438  018C  01F7               	clrf	main@State
   439                           
   440                           ;Main.c: 19: TRISE = 0x07;
   441  018D  1683               	bsf	3,5	;RP0=1, select bank1
   442  018E  0089               	movwf	9	;volatile
   443                           
   444                           ;Main.c: 20: ADCON1 = 0x07;
   445  018F  009F               	movwf	31	;volatile
   446                           
   447                           ;Main.c: 23: InitLCD();
   448  0190  120A  118A  20F4   	fcall	_InitLCD
      +       120A  118A         
   449                           
   450                           ;Main.c: 24: Init1msecTimerInterrupt();
   451  0195  120A  118A  22B9   	fcall	_Init1msecTimerInterrupt
      +       120A  118A         
   452  019A                     l4403:	
   453                           
   454                           ;Main.c: 27: {
   455                           ;Main.c: 28: if(State == 0)
   456  019A  08F7               	movf	main@State,f
   457  019B  1D03               	skipz
   458  019C  29AC               	goto	l1328
   459                           
   460                           ;Main.c: 29: {
   461                           ;Main.c: 30: if(!RE0)
   462  019D  1283               	bcf	3,5	;RP0=0, select bank0
   463  019E  1303               	bcf	3,6	;RP1=0, select bank0
   464  019F  1809               	btfsc	9,0
   465  01A0  2A33               	goto	l4473
   466                           
   467                           ;Main.c: 31: {
   468                           ;Main.c: 32: State = 1;
   469  01A1  01F7               	clrf	main@State
   470  01A2  0AF7               	incf	main@State,f
   471  01A3                     l4411:	
   472                           ;Main.c: 34: while(!RE0)
   473                           
   474  01A3  1809               	btfsc	9,0
   475  01A4  2A33               	goto	l4473
   476                           
   477                           ;Main.c: 35: UpdateTimeCounters(State);
   478  01A5  0877               	movf	main@State,w
   479  01A6  120A  118A  226D   	fcall	_UpdateTimeCounters
      +       120A  118A         
   480  01AB  29A3               	goto	l4411
   481  01AC                     l1328:	
   482                           
   483                           ;Main.c: 38: else
   484                           ;Main.c: 39: {
   485                           ;Main.c: 40: if(!RE1)
   486  01AC  1283               	bcf	3,5	;RP0=0, select bank0
   487  01AD  1303               	bcf	3,6	;RP1=0, select bank0
   488  01AE  1C89               	btfss	9,1
   489  01AF  29B7               	goto	l4417
   490  01B0  29D1               	goto	l1334
   491  01B1                     l4415:	
   492                           
   493                           ;Main.c: 43: UpdateTimeCounters(State);
   494  01B1  0877               	movf	main@State,w
   495  01B2  120A  118A  226D   	fcall	_UpdateTimeCounters
      +       120A  118A         
   496  01B7                     l4417:	
   497  01B7  1889               	btfsc	9,1
   498  01B8  29C6               	goto	l4427
   499  01B9  29B1               	goto	l4415
   500  01BA                     l4419:	
   501  01BA  0AF8               	incf	_hrCounter,f
   502  01BB  1903               	skipnz
   503  01BC  0AF9               	incf	_hrCounter+1,f
   504  01BD  2A33               	goto	l4473
   505  01BE                     l4421:	
   506  01BE  0AFA               	incf	_minCounter,f
   507  01BF  1903               	skipnz
   508  01C0  0AFB               	incf	_minCounter+1,f
   509  01C1  2A33               	goto	l4473
   510  01C2                     l4423:	
   511  01C2  0AAC               	incf	_secCounter,f
   512  01C3  1903               	skipnz
   513  01C4  0AAD               	incf	_secCounter+1,f
   514  01C5  2A33               	goto	l4473
   515  01C6                     l4427:	
   516  01C6  0877               	movf	main@State,w
   517                           
   518                           ; Switch size 1, requested type "space"
   519                           ; Number of cases is 3, Range of values is 1 to 3
   520                           ; switch strategies available:
   521                           ; Name         Instructions Cycles
   522                           ; simple_byte           10     6 (average)
   523                           ; direct_byte           20    11 (fixed)
   524                           ; jumptable            263     9 (fixed)
   525                           ;	Chosen strategy is simple_byte
   526  01C7  3A01               	xorlw	1	; case 1
   527  01C8  1903               	skipnz
   528  01C9  29BA               	goto	l4419
   529  01CA  3A03               	xorlw	3	; case 2
   530  01CB  1903               	skipnz
   531  01CC  29BE               	goto	l4421
   532  01CD  3A01               	xorlw	1	; case 3
   533  01CE  1903               	skipnz
   534  01CF  29C2               	goto	l4423
   535  01D0  2A33               	goto	l4473
   536  01D1                     l1334:	
   537                           
   538                           ;Main.c: 52: else if(!RE2)
   539  01D1  1D09               	btfss	9,2
   540  01D2  29DA               	goto	l4433
   541  01D3  2A15               	goto	l1344
   542  01D4                     l4431:	
   543                           
   544                           ;Main.c: 55: UpdateTimeCounters(State);
   545  01D4  0877               	movf	main@State,w
   546  01D5  120A  118A  226D   	fcall	_UpdateTimeCounters
      +       120A  118A         
   547  01DA                     l4433:	
   548  01DA  1909               	btfsc	9,2
   549  01DB  2A0A               	goto	l4455
   550  01DC  29D4               	goto	l4431
   551  01DD                     l4435:	
   552  01DD  082D               	movf	_secCounter+1,w
   553  01DE  042C               	iorwf	_secCounter,w
   554  01DF  1D03               	skipz
   555  01E0  29E5               	goto	l4439
   556                           
   557                           ;Main.c: 60: secCounter = 59;
   558  01E1  303B               	movlw	59
   559  01E2  00AC               	movwf	_secCounter
   560  01E3  01AD               	clrf	_secCounter+1
   561  01E4  2A33               	goto	l4473
   562  01E5                     l4439:	
   563                           
   564                           ;Main.c: 61: else
   565                           ;Main.c: 62: secCounter--;
   566  01E5  3001               	movlw	1
   567  01E6  02AC               	subwf	_secCounter,f
   568  01E7  3000               	movlw	0
   569  01E8  1C03               	skipc
   570  01E9  03AD               	decf	_secCounter+1,f
   571  01EA  02AD               	subwf	_secCounter+1,f
   572  01EB  2A33               	goto	l4473
   573  01EC                     l4441:	
   574  01EC  087B               	movf	_minCounter+1,w
   575  01ED  047A               	iorwf	_minCounter,w
   576  01EE  1D03               	skipz
   577  01EF  29F4               	goto	l4445
   578                           
   579                           ;Main.c: 65: minCounter = 59;
   580  01F0  303B               	movlw	59
   581  01F1  00FA               	movwf	_minCounter
   582  01F2  01FB               	clrf	_minCounter+1
   583  01F3  2A33               	goto	l4473
   584  01F4                     l4445:	
   585                           
   586                           ;Main.c: 66: else
   587                           ;Main.c: 67: minCounter--;
   588  01F4  3001               	movlw	1
   589  01F5  02FA               	subwf	_minCounter,f
   590  01F6  3000               	movlw	0
   591  01F7  1C03               	skipc
   592  01F8  03FB               	decf	_minCounter+1,f
   593  01F9  02FB               	subwf	_minCounter+1,f
   594  01FA  2A33               	goto	l4473
   595  01FB                     l4447:	
   596  01FB  0879               	movf	_hrCounter+1,w
   597  01FC  0478               	iorwf	_hrCounter,w
   598  01FD  1D03               	skipz
   599  01FE  2A03               	goto	l4451
   600                           
   601                           ;Main.c: 70: hrCounter = 23;
   602  01FF  3017               	movlw	23
   603  0200  00F8               	movwf	_hrCounter
   604  0201  01F9               	clrf	_hrCounter+1
   605  0202  2A33               	goto	l4473
   606  0203                     l4451:	
   607                           
   608                           ;Main.c: 71: else
   609                           ;Main.c: 72: hrCounter--;
   610  0203  3001               	movlw	1
   611  0204  02F8               	subwf	_hrCounter,f
   612  0205  3000               	movlw	0
   613  0206  1C03               	skipc
   614  0207  03F9               	decf	_hrCounter+1,f
   615  0208  02F9               	subwf	_hrCounter+1,f
   616  0209  2A33               	goto	l4473
   617  020A                     l4455:	
   618  020A  0877               	movf	main@State,w
   619                           
   620                           ; Switch size 1, requested type "space"
   621                           ; Number of cases is 3, Range of values is 1 to 3
   622                           ; switch strategies available:
   623                           ; Name         Instructions Cycles
   624                           ; simple_byte           10     6 (average)
   625                           ; direct_byte           20    11 (fixed)
   626                           ; jumptable            263     9 (fixed)
   627                           ;	Chosen strategy is simple_byte
   628  020B  3A01               	xorlw	1	; case 1
   629  020C  1903               	skipnz
   630  020D  29FB               	goto	l4447
   631  020E  3A03               	xorlw	3	; case 2
   632  020F  1903               	skipnz
   633  0210  29EC               	goto	l4441
   634  0211  3A01               	xorlw	1	; case 3
   635  0212  1903               	skipnz
   636  0213  29DD               	goto	l4435
   637  0214  2A33               	goto	l4473
   638  0215                     l1344:	
   639                           
   640                           ;Main.c: 76: else if(!RE0)
   641  0215  1C09               	btfss	9,0
   642  0216  2A1E               	goto	l4461
   643  0217  2A33               	goto	l4473
   644  0218                     l4459:	
   645                           
   646                           ;Main.c: 79: UpdateTimeCounters(State);
   647  0218  0877               	movf	main@State,w
   648  0219  120A  118A  226D   	fcall	_UpdateTimeCounters
      +       120A  118A         
   649  021E                     l4461:	
   650  021E  1809               	btfsc	9,0
   651  021F  2A28               	goto	l4471
   652  0220  2A18               	goto	l4459
   653  0221                     l4463:	
   654  0221  3002               	movlw	2
   655  0222  2A24               	goto	L1
   656  0223                     l4465:	
   657  0223  3003               	movlw	3
   658  0224                     L1:	
   659  0224  00F7               	movwf	main@State
   660  0225  2A33               	goto	l4473
   661  0226                     l4467:	
   662  0226  01F7               	clrf	main@State
   663  0227  2A33               	goto	l4473
   664  0228                     l4471:	
   665  0228  0877               	movf	main@State,w
   666                           
   667                           ; Switch size 1, requested type "space"
   668                           ; Number of cases is 3, Range of values is 1 to 3
   669                           ; switch strategies available:
   670                           ; Name         Instructions Cycles
   671                           ; simple_byte           10     6 (average)
   672                           ; direct_byte           20    11 (fixed)
   673                           ; jumptable            263     9 (fixed)
   674                           ;	Chosen strategy is simple_byte
   675  0229  3A01               	xorlw	1	; case 1
   676  022A  1903               	skipnz
   677  022B  2A21               	goto	l4463
   678  022C  3A03               	xorlw	3	; case 2
   679  022D  1903               	skipnz
   680  022E  2A23               	goto	l4465
   681  022F  3A01               	xorlw	1	; case 3
   682  0230  1903               	skipnz
   683  0231  2A26               	goto	l4467
   684  0232  2A33               	goto	l4473
   685  0233                     l4473:	
   686                           
   687                           ;Main.c: 88: }
   688                           ;Main.c: 89: }
   689                           ;Main.c: 91: UpdateTimeCounters(State);
   690  0233  0877               	movf	main@State,w
   691  0234  120A  118A  226D   	fcall	_UpdateTimeCounters
      +       120A  118A         
   692                           
   693                           ;Main.c: 93: if( msCounter == 0 )
   694  0239  082B               	movf	_msCounter+1,w
   695  023A  042A               	iorwf	_msCounter,w
   696  023B  1D03               	skipz
   697  023C  2A50               	goto	l4479
   698                           
   699                           ;Main.c: 94: {
   700                           ;Main.c: 96: DisplayTimeToLCD(hrCounter, minCounter, secCounter, 0);
   701  023D  0879               	movf	_hrCounter+1,w
   702  023E  00A4               	movwf	?_DisplayTimeToLCD+1
   703  023F  0878               	movf	_hrCounter,w
   704  0240  00A3               	movwf	?_DisplayTimeToLCD
   705  0241  087B               	movf	_minCounter+1,w
   706  0242  00A6               	movwf	?_DisplayTimeToLCD+3
   707  0243  087A               	movf	_minCounter,w
   708  0244  00A5               	movwf	?_DisplayTimeToLCD+2
   709  0245  082D               	movf	_secCounter+1,w
   710  0246  00A8               	movwf	?_DisplayTimeToLCD+5
   711  0247  082C               	movf	_secCounter,w
   712  0248  00A7               	movwf	?_DisplayTimeToLCD+4
   713  0249  01A9               	clrf	?_DisplayTimeToLCD+6
   714  024A  120A  118A  200F   	fcall	_DisplayTimeToLCD
      +       120A  118A         
   715                           
   716                           ;Main.c: 97: }
   717  024F  299A               	goto	l4403
   718  0250                     l4479:	
   719                           
   720                           ;Main.c: 98: else if( msCounter == 500 && State != 0 )
   721  0250  032B               	decf	_msCounter+1,w
   722  0251  30F4               	movlw	244
   723  0252  1903               	skipnz
   724  0253  062A               	xorwf	_msCounter,w
   725  0254  1D03               	skipz
   726  0255  299A               	goto	l4403
   727  0256  0877               	movf	main@State,w
   728  0257  1903               	btfsc	3,2
   729  0258  299A               	goto	l4403
   730                           
   731                           ;Main.c: 99: {
   732                           ;Main.c: 102: DisplayTimeToLCD(hrCounter, minCounter, secCounter, State);
   733  0259  0879               	movf	_hrCounter+1,w
   734  025A  00A4               	movwf	?_DisplayTimeToLCD+1
   735  025B  0878               	movf	_hrCounter,w
   736  025C  00A3               	movwf	?_DisplayTimeToLCD
   737  025D  087B               	movf	_minCounter+1,w
   738  025E  00A6               	movwf	?_DisplayTimeToLCD+3
   739  025F  087A               	movf	_minCounter,w
   740  0260  00A5               	movwf	?_DisplayTimeToLCD+2
   741  0261  082D               	movf	_secCounter+1,w
   742  0262  00A8               	movwf	?_DisplayTimeToLCD+5
   743  0263  082C               	movf	_secCounter,w
   744  0264  00A7               	movwf	?_DisplayTimeToLCD+4
   745  0265  0877               	movf	main@State,w
   746  0266  00A9               	movwf	?_DisplayTimeToLCD+6
   747  0267  120A  118A  200F   	fcall	_DisplayTimeToLCD
      +       120A  118A         
   748  026C  299A               	goto	l4403
   749  026D                     __end_of_main:	
   750                           
   751                           	psect	text413
   752  000F                     __ptext413:	
   753 ;; =============== function _main ends ============
   754                           
   755                           
   756 ;; *************** function _DisplayTimeToLCD *****************
   757 ;; Defined at:
   758 ;;		line 107 in file "C:\Users\Saeed\Desktop\PIC16F877 Controllable Digital Clock Code\Code\LCD.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;  h               2    3[BANK0 ] unsigned int 
   761 ;;  m               2    5[BANK0 ] unsigned int 
   762 ;;  s               2    7[BANK0 ] unsigned int 
   763 ;;  State           1    9[BANK0 ] unsigned char 
   764 ;; Auto vars:     Size  Location     Type
   765 ;;		None
   766 ;; Return value:  Size  Location     Type
   767 ;;		None               void
   768 ;; Registers used:
   769 ;;		wreg, status,2, status,0, pclath, cstack
   770 ;; Tracked objects:
   771 ;;		On entry : 60/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   775 ;;      Params:         0       7       0       0       0
   776 ;;      Locals:         0       0       0       0       0
   777 ;;      Temps:          0       0       0       0       0
   778 ;;      Totals:         0       7       0       0       0
   779 ;;Total ram usage:        7 bytes
   780 ;; Hardware stack levels used:    1
   781 ;; Hardware stack levels required when called:    4
   782 ;; This function calls:
   783 ;;		_ClearLCDScreen
   784 ;;		_WriteDataToLCD
   785 ;;		___lwdiv
   786 ;;		___lwmod
   787 ;; This function is called by:
   788 ;;		_main
   789 ;; This function uses a non-reentrant model
   790 ;;
   791  000F                     _DisplayTimeToLCD:	
   792                           
   793                           ;LCD.c: 108: ClearLCDScreen();
   794                           
   795                           ; Regs used in _DisplayTimeToLCD: [wreg+status,2+status,0+pclath+cstack]
   796  000F  216C  120A  118A   	fcall	_ClearLCDScreen
   797  0012  2188               	call	PL4	;select bank 0
   798                           
   799                           ;LCD.c: 110: if(State == 1)
   800  0013  0B29               	decfsz	DisplayTimeToLCD@State,w
   801  0014  281B               	goto	l4379
   802                           
   803                           ;LCD.c: 111: {
   804                           ;LCD.c: 112: WriteDataToLCD( ' ' );
   805  0015  3020               	movlw	32
   806  0016  2094  120A  118A   	fcall	_WriteDataToLCD
   807                           
   808                           ;LCD.c: 113: WriteDataToLCD( ' ' );
   809  0019  3020               	movlw	32
   810  001A  2837               	goto	L2
   811  001B                     l4379:	
   812                           ;LCD.c: 114: }
   813                           
   814                           
   815                           ;LCD.c: 115: else
   816                           ;LCD.c: 116: {
   817                           ;LCD.c: 117: WriteDataToLCD( (h/10)+0x30 );
   818  001B  300A               	movlw	10
   819  001C  00F2               	movwf	?___lwdiv
   820  001D  01F3               	clrf	?___lwdiv+1
   821  001E  0824               	movf	DisplayTimeToLCD@h+1,w
   822  001F  00F5               	movwf	?___lwdiv+3
   823  0020  0823               	movf	DisplayTimeToLCD@h,w
   824  0021  00F4               	movwf	?___lwdiv+2
   825  0022  20A6  120A  118A   	fcall	___lwdiv
   826  0025  0872               	movf	?___lwdiv,w
   827  0026  3E30               	addlw	48
   828  0027  2094  120A  118A   	fcall	_WriteDataToLCD
   829                           
   830                           ;LCD.c: 118: WriteDataToLCD( (h%10)+0x30 );
   831  002A  300A               	movlw	10
   832  002B  00F2               	movwf	?___lwmod
   833  002C  01F3               	clrf	?___lwmod+1
   834  002D  2188               	call	PL4	;select bank 0
   835  002E  0824               	movf	DisplayTimeToLCD@h+1,w
   836  002F  00F5               	movwf	?___lwmod+3
   837  0030  0823               	movf	DisplayTimeToLCD@h,w
   838  0031  00F4               	movwf	?___lwmod+2
   839  0032  20D0  120A  118A   	fcall	___lwmod
   840  0035  0872               	movf	?___lwmod,w
   841  0036  3E30               	addlw	48
   842  0037                     L2:	
   843  0037  2094  120A  118A   	fcall	_WriteDataToLCD
   844                           
   845                           ;LCD.c: 119: }
   846                           ;LCD.c: 122: WriteDataToLCD(':');
   847  003A  303A               	movlw	58
   848  003B  2094  120A  118A   	fcall	_WriteDataToLCD
   849  003E  2188               	call	PL4	;select bank 0
   850                           
   851                           ;LCD.c: 124: if(State == 2)
   852  003F  0829               	movf	DisplayTimeToLCD@State,w
   853  0040  3A02               	xorlw	2
   854  0041  1D03               	skipz
   855  0042  2849               	goto	l4385
   856                           
   857                           ;LCD.c: 125: {
   858                           ;LCD.c: 126: WriteDataToLCD( ' ' );
   859  0043  3020               	movlw	32
   860  0044  2094  120A  118A   	fcall	_WriteDataToLCD
   861                           
   862                           ;LCD.c: 127: WriteDataToLCD( ' ' );
   863  0047  3020               	movlw	32
   864  0048  2865               	goto	L3
   865  0049                     l4385:	
   866                           ;LCD.c: 128: }
   867                           
   868                           
   869                           ;LCD.c: 129: else
   870                           ;LCD.c: 130: {
   871                           ;LCD.c: 131: WriteDataToLCD( (m/10)+0x30 );
   872  0049  300A               	movlw	10
   873  004A  00F2               	movwf	?___lwdiv
   874  004B  01F3               	clrf	?___lwdiv+1
   875  004C  0826               	movf	DisplayTimeToLCD@m+1,w
   876  004D  00F5               	movwf	?___lwdiv+3
   877  004E  0825               	movf	DisplayTimeToLCD@m,w
   878  004F  00F4               	movwf	?___lwdiv+2
   879  0050  20A6  120A  118A   	fcall	___lwdiv
   880  0053  0872               	movf	?___lwdiv,w
   881  0054  3E30               	addlw	48
   882  0055  2094  120A  118A   	fcall	_WriteDataToLCD
   883                           
   884                           ;LCD.c: 132: WriteDataToLCD( (m%10)+0x30 );
   885  0058  300A               	movlw	10
   886  0059  00F2               	movwf	?___lwmod
   887  005A  01F3               	clrf	?___lwmod+1
   888  005B  2188               	call	PL4	;select bank 0
   889  005C  0826               	movf	DisplayTimeToLCD@m+1,w
   890  005D  00F5               	movwf	?___lwmod+3
   891  005E  0825               	movf	DisplayTimeToLCD@m,w
   892  005F  00F4               	movwf	?___lwmod+2
   893  0060  20D0  120A  118A   	fcall	___lwmod
   894  0063  0872               	movf	?___lwmod,w
   895  0064  3E30               	addlw	48
   896  0065                     L3:	
   897  0065  2094  120A  118A   	fcall	_WriteDataToLCD
   898                           
   899                           ;LCD.c: 133: }
   900                           ;LCD.c: 136: WriteDataToLCD(':');
   901  0068  303A               	movlw	58
   902  0069  2094  120A  118A   	fcall	_WriteDataToLCD
   903  006C  2188               	call	PL4	;select bank 0
   904                           
   905                           ;LCD.c: 138: if(State == 3)
   906  006D  0829               	movf	DisplayTimeToLCD@State,w
   907  006E  3A03               	xorlw	3
   908  006F  1D03               	skipz
   909  0070  2877               	goto	l4391
   910                           
   911                           ;LCD.c: 139: {
   912                           ;LCD.c: 140: WriteDataToLCD( ' ' );
   913  0071  3020               	movlw	32
   914  0072  2094  120A  118A   	fcall	_WriteDataToLCD
   915                           
   916                           ;LCD.c: 141: WriteDataToLCD( ' ' );
   917  0075  3020               	movlw	32
   918  0076  2894               	ljmp	_WriteDataToLCD
   919  0077                     l4391:	
   920                           ;LCD.c: 142: }
   921                           
   922                           
   923                           ;LCD.c: 143: else
   924                           ;LCD.c: 144: {
   925                           ;LCD.c: 145: WriteDataToLCD( (s/10)+0x30 );
   926  0077  300A               	movlw	10
   927  0078  00F2               	movwf	?___lwdiv
   928  0079  01F3               	clrf	?___lwdiv+1
   929  007A  0828               	movf	DisplayTimeToLCD@s+1,w
   930  007B  00F5               	movwf	?___lwdiv+3
   931  007C  0827               	movf	DisplayTimeToLCD@s,w
   932  007D  00F4               	movwf	?___lwdiv+2
   933  007E  20A6  120A  118A   	fcall	___lwdiv
   934  0081  0872               	movf	?___lwdiv,w
   935  0082  3E30               	addlw	48
   936  0083  2094  120A  118A   	fcall	_WriteDataToLCD
   937                           
   938                           ;LCD.c: 146: WriteDataToLCD( (s%10)+0x30 );
   939  0086  300A               	movlw	10
   940  0087  00F2               	movwf	?___lwmod
   941  0088  01F3               	clrf	?___lwmod+1
   942  0089  2188               	call	PL4	;select bank 0
   943  008A  0828               	movf	DisplayTimeToLCD@s+1,w
   944  008B  00F5               	movwf	?___lwmod+3
   945  008C  0827               	movf	DisplayTimeToLCD@s,w
   946  008D  00F4               	movwf	?___lwmod+2
   947  008E  20D0  120A  118A   	fcall	___lwmod
   948  0091  0872               	movf	?___lwmod,w
   949  0092  3E30               	addlw	48
   950  0093  2894               	ljmp	_WriteDataToLCD
   951  0094                     __end_of_DisplayTimeToLCD:	
   952  0094                     __ptext416:	
   953 ;; =============== function _InitLCD ends ============
   954                           
   955                           
   956 ;; *************** function _WriteDataToLCD *****************
   957 ;; Defined at:
   958 ;;		line 28 in file "C:\Users\Saeed\Desktop\PIC16F877 Controllable Digital Clock Code\Code\LCD.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;  LCDChar         1    wreg     unsigned char 
   961 ;; Auto vars:     Size  Location     Type
   962 ;;  LCDChar         1    3[COMMON] unsigned char 
   963 ;; Return value:  Size  Location     Type
   964 ;;		None               void
   965 ;; Registers used:
   966 ;;		wreg, status,2, status,0, pclath, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   972 ;;      Params:         0       0       0       0       0
   973 ;;      Locals:         1       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0
   975 ;;      Totals:         1       0       0       0       0
   976 ;;Total ram usage:        1 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    2
   979 ;; This function calls:
   980 ;;		_ToggleEpinOfLCD
   981 ;; This function is called by:
   982 ;;		_DisplayTimeToLCD
   983 ;; This function uses a non-reentrant model
   984 ;;
   985  0094                     _WriteDataToLCD:	
   986                           
   987                           ; Regs used in _WriteDataToLCD: [wreg+status,2+status,0+pclath+cstack]
   988                           ;WriteDataToLCD@LCDChar stored from wreg
   989  0094  00F3               	movwf	WriteDataToLCD@LCDChar
   990  0095  2188               	call	PL4	;select bank 0
   991                           
   992                           ;LCD.c: 29: RB1 = 1;
   993  0096  300F               	movlw	15
   994  0097  1486               	bsf	6,1
   995                           
   996                           ;LCD.c: 31: PORTB &= 0x0F;
   997  0098  0586               	andwf	6,f	;volatile
   998                           
   999                           ;LCD.c: 32: PORTB |= (LCDChar&0xF0);
  1000  0099  0873               	movf	WriteDataToLCD@LCDChar,w
  1001  009A  39F0               	andlw	240
  1002  009B  0486               	iorwf	6,f	;volatile
  1003                           
  1004                           ;LCD.c: 33: ToggleEpinOfLCD();
  1005  009C  214C  120A  118A   	fcall	_ToggleEpinOfLCD
  1006                           
  1007                           ;LCD.c: 35: PORTB &= 0x0F;
  1008  009F  300F               	movlw	15
  1009  00A0  2188               	call	PL4	;select bank 0
  1010  00A1  0586               	andwf	6,f	;volatile
  1011                           
  1012                           ;LCD.c: 36: PORTB |= ((LCDChar<<4)&0xF0);
  1013  00A2  0E73               	swapf	WriteDataToLCD@LCDChar,w
  1014  00A3  39F0               	andlw	240
  1015  00A4  0486               	iorwf	6,f	;volatile
  1016                           
  1017                           ;LCD.c: 37: ToggleEpinOfLCD();
  1018  00A5  294C               	ljmp	l4147
  1019  00A6                     __end_of_WriteDataToLCD:	
  1020  00A6                     __ptext421:	
  1021 ;; =============== function ___lwmod ends ============
  1022                           
  1023                           
  1024 ;; *************** function ___lwdiv *****************
  1025 ;; Defined at:
  1026 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwdiv.c"
  1027 ;; Parameters:    Size  Location     Type
  1028 ;;  divisor         2    2[COMMON] unsigned int 
  1029 ;;  dividend        2    4[COMMON] unsigned int 
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;  quotient        2    1[BANK0 ] unsigned int 
  1032 ;;  counter         1    0[BANK0 ] unsigned char 
  1033 ;; Return value:  Size  Location     Type
  1034 ;;                  2    2[COMMON] unsigned int 
  1035 ;; Registers used:
  1036 ;;		wreg, status,2, status,0
  1037 ;; Tracked objects:
  1038 ;;		On entry : 60/0
  1039 ;;		On exit  : 60/0
  1040 ;;		Unchanged: FFF9F/0
  1041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1042 ;;      Params:         4       0       0       0       0
  1043 ;;      Locals:         0       3       0       0       0
  1044 ;;      Temps:          0       0       0       0       0
  1045 ;;      Totals:         4       3       0       0       0
  1046 ;;Total ram usage:        7 bytes
  1047 ;; Hardware stack levels used:    1
  1048 ;; Hardware stack levels required when called:    1
  1049 ;; This function calls:
  1050 ;;		Nothing
  1051 ;; This function is called by:
  1052 ;;		_DisplayTimeToLCD
  1053 ;; This function uses a non-reentrant model
  1054 ;;
  1055  00A6                     ___lwdiv:	
  1056                           
  1057                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1058  00A6  01A1               	clrf	___lwdiv@quotient
  1059  00A7  01A2               	clrf	___lwdiv@quotient+1
  1060  00A8  0873               	movf	___lwdiv@divisor+1,w
  1061  00A9  0472               	iorwf	___lwdiv@divisor,w
  1062  00AA  1903               	skipnz
  1063  00AB  28CB               	goto	l4369
  1064  00AC  01A0               	clrf	___lwdiv@counter
  1065  00AD                     L6:	
  1066  00AD  0AA0               	incf	___lwdiv@counter,f
  1067  00AE  1BF3               	btfsc	___lwdiv@divisor+1,7
  1068  00AF  28B4               	goto	l4357
  1069  00B0  1003               	clrc
  1070  00B1  0DF2               	rlf	___lwdiv@divisor,f
  1071  00B2  0DF3               	rlf	___lwdiv@divisor+1,f
  1072  00B3  28AD               	goto	L6
  1073  00B4                     l4357:	
  1074  00B4  1003               	clrc
  1075  00B5  0DA1               	rlf	___lwdiv@quotient,f
  1076  00B6  0DA2               	rlf	___lwdiv@quotient+1,f
  1077  00B7  0873               	movf	___lwdiv@divisor+1,w
  1078  00B8  0275               	subwf	___lwdiv@dividend+1,w
  1079  00B9  1D03               	skipz
  1080  00BA  28BD               	goto	u715
  1081  00BB  0872               	movf	___lwdiv@divisor,w
  1082  00BC  0274               	subwf	___lwdiv@dividend,w
  1083  00BD                     u715:	
  1084  00BD  1C03               	skipc
  1085  00BE  28C7               	goto	L7
  1086  00BF  0872               	movf	___lwdiv@divisor,w
  1087  00C0  02F4               	subwf	___lwdiv@dividend,f
  1088  00C1  0873               	movf	___lwdiv@divisor+1,w
  1089  00C2  1C03               	skipc
  1090  00C3  03F5               	decf	___lwdiv@dividend+1,f
  1091  00C4  02F5               	subwf	___lwdiv@dividend+1,f
  1092  00C5  1421               	bsf	___lwdiv@quotient,0
  1093  00C6  1003               	clrc
  1094  00C7                     L7:	
  1095  00C7  0CF3               	rrf	___lwdiv@divisor+1,f
  1096  00C8  0CF2               	rrf	___lwdiv@divisor,f
  1097  00C9  0BA0               	decfsz	___lwdiv@counter,f
  1098  00CA  28B4               	goto	l4357
  1099  00CB                     l4369:	
  1100  00CB  0822               	movf	___lwdiv@quotient+1,w
  1101  00CC  00F3               	movwf	?___lwdiv+1
  1102  00CD  0821               	movf	___lwdiv@quotient,w
  1103  00CE  00F2               	movwf	?___lwdiv
  1104  00CF  0008               	return
  1105  00D0                     __end_of___lwdiv:	
  1106  00D0                     __ptext420:	
  1107 ;; =============== function _ToggleEpinOfLCD ends ============
  1108                           
  1109                           
  1110 ;; *************** function ___lwmod *****************
  1111 ;; Defined at:
  1112 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwmod.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;  divisor         2    2[COMMON] unsigned int 
  1115 ;;  dividend        2    4[COMMON] unsigned int 
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  counter         1    6[COMMON] unsigned char 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  2    2[COMMON] unsigned int 
  1120 ;; Registers used:
  1121 ;;		wreg, status,2, status,0
  1122 ;; Tracked objects:
  1123 ;;		On entry : 60/0
  1124 ;;		On exit  : 60/0
  1125 ;;		Unchanged: FFF9F/0
  1126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1127 ;;      Params:         4       0       0       0       0
  1128 ;;      Locals:         1       0       0       0       0
  1129 ;;      Temps:          0       0       0       0       0
  1130 ;;      Totals:         5       0       0       0       0
  1131 ;;Total ram usage:        5 bytes
  1132 ;; Hardware stack levels used:    1
  1133 ;; Hardware stack levels required when called:    1
  1134 ;; This function calls:
  1135 ;;		Nothing
  1136 ;; This function is called by:
  1137 ;;		_DisplayTimeToLCD
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140  00D0                     ___lwmod:	
  1141                           
  1142                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1143  00D0  0873               	movf	___lwmod@divisor+1,w
  1144  00D1  0472               	iorwf	___lwmod@divisor,w
  1145  00D2  1903               	skipnz
  1146  00D3  28EF               	goto	l4143
  1147  00D4  01F6               	clrf	___lwmod@counter
  1148  00D5                     L4:	
  1149  00D5  0AF6               	incf	___lwmod@counter,f
  1150  00D6  1BF3               	btfsc	___lwmod@divisor+1,7
  1151  00D7  28DC               	goto	l4135
  1152  00D8  1003               	clrc
  1153  00D9  0DF2               	rlf	___lwmod@divisor,f
  1154  00DA  0DF3               	rlf	___lwmod@divisor+1,f
  1155  00DB  28D5               	goto	L4
  1156  00DC                     l4135:	
  1157  00DC  0873               	movf	___lwmod@divisor+1,w
  1158  00DD  0275               	subwf	___lwmod@dividend+1,w
  1159  00DE  1D03               	skipz
  1160  00DF  28E2               	goto	u495
  1161  00E0  0872               	movf	___lwmod@divisor,w
  1162  00E1  0274               	subwf	___lwmod@dividend,w
  1163  00E2                     u495:	
  1164  00E2  1C03               	skipc
  1165  00E3  28EB               	goto	L5
  1166  00E4  0872               	movf	___lwmod@divisor,w
  1167  00E5  02F4               	subwf	___lwmod@dividend,f
  1168  00E6  0873               	movf	___lwmod@divisor+1,w
  1169  00E7  1C03               	skipc
  1170  00E8  03F5               	decf	___lwmod@dividend+1,f
  1171  00E9  02F5               	subwf	___lwmod@dividend+1,f
  1172  00EA  1003               	clrc
  1173  00EB                     L5:	
  1174  00EB  0CF3               	rrf	___lwmod@divisor+1,f
  1175  00EC  0CF2               	rrf	___lwmod@divisor,f
  1176  00ED  0BF6               	decfsz	___lwmod@counter,f
  1177  00EE  28DC               	goto	l4135
  1178  00EF                     l4143:	
  1179  00EF  0875               	movf	___lwmod@dividend+1,w
  1180  00F0  00F3               	movwf	?___lwmod+1
  1181  00F1  0874               	movf	___lwmod@dividend,w
  1182  00F2  00F2               	movwf	?___lwmod
  1183  00F3  0008               	return
  1184  00F4                     __end_of___lwmod:	
  1185  00F4                     __ptext415:	
  1186 ;; =============== function _ClearLCDScreen ends ============
  1187                           
  1188                           
  1189 ;; *************** function _InitLCD *****************
  1190 ;; Defined at:
  1191 ;;		line 42 in file "C:\Users\Saeed\Desktop\PIC16F877 Controllable Digital Clock Code\Code\LCD.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;		None
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;		None
  1196 ;; Return value:  Size  Location     Type
  1197 ;;		None               void
  1198 ;; Registers used:
  1199 ;;		wreg, status,2, status,0, pclath, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 17F/20
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1205 ;;      Params:         0       0       0       0       0
  1206 ;;      Locals:         0       0       0       0       0
  1207 ;;      Temps:          2       0       0       0       0
  1208 ;;      Totals:         2       0       0       0       0
  1209 ;;Total ram usage:        2 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; Hardware stack levels required when called:    3
  1212 ;; This function calls:
  1213 ;;		_ToggleEpinOfLCD
  1214 ;;		_WriteCommandToLCD
  1215 ;; This function is called by:
  1216 ;;		_main
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219  00F4                     _InitLCD:	
  1220                           
  1221                           ;LCD.c: 44: RB0 = 0;
  1222                           
  1223                           ; Regs used in _InitLCD: [wreg+status,2+status,0+pclath+cstack]
  1224  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1225                           
  1226                           ;LCD.c: 45: RB1 = 0;
  1227                           
  1228                           ;LCD.c: 46: RB4 = 0;
  1229                           
  1230                           ;LCD.c: 47: RB5 = 0;
  1231                           
  1232                           ;LCD.c: 48: RB6 = 0;
  1233                           
  1234                           ;LCD.c: 49: RB7 = 0;
  1235  00F5  2181  120A  118A   	fcall	PL3	;call to abstracted procedure
  1236                           
  1237                           ;LCD.c: 50: TRISB0 = 0;
  1238  00F8  1683               	bsf	3,5	;RP0=1, select bank1
  1239  00F9  3034               	movlw	52
  1240                           
  1241                           ;LCD.c: 51: TRISB1 = 0;
  1242                           
  1243                           ;LCD.c: 52: TRISB4 = 0;
  1244                           
  1245                           ;LCD.c: 53: TRISB5 = 0;
  1246                           
  1247                           ;LCD.c: 54: TRISB6 = 0;
  1248                           
  1249                           ;LCD.c: 55: TRISB7 = 0;
  1250  00FA  2181  120A  118A   	fcall	PL3	;call to abstracted procedure
  1251                           
  1252                           ;LCD.c: 58: _delay((unsigned long)((40)*(4000000/4000.0)));
  1253  00FD  00F5               	movwf	??_InitLCD+1
  1254  00FE  30F1               	movlw	241
  1255  00FF  00F4               	movwf	??_InitLCD
  1256  0100                     u927:	
  1257  0100  0BF4               	decfsz	??_InitLCD,f
  1258  0101  2900               	goto	u927
  1259  0102  0BF5               	decfsz	??_InitLCD+1,f
  1260  0103  2900               	goto	u927
  1261  0104  2905               	nop2
  1262                           
  1263                           ;LCD.c: 60: PORTB &= 0x0F;
  1264                           
  1265                           ;LCD.c: 61: PORTB |= 0x30;
  1266  0105  217A  120A  118A   	fcall	PL2	;call to abstracted procedure
  1267                           
  1268                           ;LCD.c: 62: ToggleEpinOfLCD();
  1269  0108  214C  120A  118A   	fcall	_ToggleEpinOfLCD
  1270                           
  1271                           ;LCD.c: 64: _delay((unsigned long)((6)*(4000000/4000.0)));
  1272  010B  3008               	movlw	8
  1273  010C  00F5               	movwf	??_InitLCD+1
  1274  010D  30C9               	movlw	201
  1275  010E  00F4               	movwf	??_InitLCD
  1276  010F                     u937:	
  1277  010F  0BF4               	decfsz	??_InitLCD,f
  1278  0110  290F               	goto	u937
  1279  0111  0BF5               	decfsz	??_InitLCD+1,f
  1280  0112  290F               	goto	u937
  1281  0113  2914               	nop2
  1282                           
  1283                           ;LCD.c: 66: PORTB &= 0x0F;
  1284                           
  1285                           ;LCD.c: 67: PORTB |= 0x30;
  1286  0114  217A  120A  118A   	fcall	PL2	;call to abstracted procedure
  1287                           
  1288                           ;LCD.c: 68: ToggleEpinOfLCD();
  1289  0117  214C  120A  118A   	fcall	_ToggleEpinOfLCD
  1290                           
  1291                           ;LCD.c: 70: _delay((unsigned long)((300)*(4000000/4000000.0)));
  1292  011A  3063               	movlw	99
  1293  011B  00F4               	movwf	??_InitLCD
  1294  011C                     u947:	
  1295  011C  0BF4               	decfsz	??_InitLCD,f
  1296  011D  291C               	goto	u947
  1297  011E  291F               	nop2	;nop
  1298                           
  1299                           ;LCD.c: 72: PORTB &= 0x0F;
  1300                           
  1301                           ;LCD.c: 73: PORTB |= 0x30;
  1302  011F  217A  120A  118A   	fcall	PL2	;call to abstracted procedure
  1303                           
  1304                           ;LCD.c: 74: ToggleEpinOfLCD();
  1305  0122  214C  120A  118A   	fcall	_ToggleEpinOfLCD
  1306                           
  1307                           ;LCD.c: 76: _delay((unsigned long)((2)*(4000000/4000.0)));
  1308  0125  3003               	movlw	3
  1309  0126  00F5               	movwf	??_InitLCD+1
  1310  0127  3097               	movlw	151
  1311  0128  00F4               	movwf	??_InitLCD
  1312  0129                     u957:	
  1313  0129  0BF4               	decfsz	??_InitLCD,f
  1314  012A  2929               	goto	u957
  1315  012B  0BF5               	decfsz	??_InitLCD+1,f
  1316  012C  2929               	goto	u957
  1317  012D  292E               	nop2
  1318                           
  1319                           ;LCD.c: 78: PORTB &= 0x0F;
  1320  012E  300F               	movlw	15
  1321  012F  2188               	call	PL4	;select bank 0
  1322  0130  0586               	andwf	6,f	;volatile
  1323                           
  1324                           ;LCD.c: 79: PORTB |= 0x20;
  1325  0131  1686               	bsf	6,5	;volatile
  1326                           
  1327                           ;LCD.c: 80: ToggleEpinOfLCD();
  1328  0132  214C  120A  118A   	fcall	_ToggleEpinOfLCD
  1329                           
  1330                           ;LCD.c: 82: _delay((unsigned long)((2)*(4000000/4000.0)));
  1331  0135  3003               	movlw	3
  1332  0136  00F5               	movwf	??_InitLCD+1
  1333  0137  3097               	movlw	151
  1334  0138  00F4               	movwf	??_InitLCD
  1335  0139                     u967:	
  1336  0139  0BF4               	decfsz	??_InitLCD,f
  1337  013A  2939               	goto	u967
  1338  013B  0BF5               	decfsz	??_InitLCD+1,f
  1339  013C  2939               	goto	u967
  1340  013D  293E               	nop2
  1341                           
  1342                           ;LCD.c: 84: WriteCommandToLCD(0x28);
  1343  013E  3028               	movlw	40
  1344  013F  215A  120A  118A   	fcall	_WriteCommandToLCD
  1345                           
  1346                           ;LCD.c: 85: WriteCommandToLCD(0x0c);
  1347  0142  300C               	movlw	12
  1348  0143  215A  120A  118A   	fcall	_WriteCommandToLCD
  1349                           
  1350                           ;LCD.c: 86: WriteCommandToLCD(0x01);
  1351  0146  3001               	movlw	1
  1352  0147  215A  120A  118A   	fcall	_WriteCommandToLCD
  1353                           
  1354                           ;LCD.c: 87: WriteCommandToLCD(0x06);
  1355  014A  3006               	movlw	6
  1356  014B  295A               	ljmp	_WriteCommandToLCD
  1357  014C                     __end_of_InitLCD:	
  1358  014C                     __ptext419:	
  1359 ;; =============== function _Init1msecTimerInterrupt ends ============
  1360                           
  1361                           
  1362 ;; *************** function _ToggleEpinOfLCD *****************
  1363 ;; Defined at:
  1364 ;;		line 5 in file "C:\Users\Saeed\Desktop\PIC16F877 Controllable Digital Clock Code\Code\LCD.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;		None
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;		None
  1369 ;; Return value:  Size  Location     Type
  1370 ;;		None               void
  1371 ;; Registers used:
  1372 ;;		wreg
  1373 ;; Tracked objects:
  1374 ;;		On entry : 60/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1378 ;;      Params:         0       0       0       0       0
  1379 ;;      Locals:         0       0       0       0       0
  1380 ;;      Temps:          1       0       0       0       0
  1381 ;;      Totals:         1       0       0       0       0
  1382 ;;Total ram usage:        1 bytes
  1383 ;; Hardware stack levels used:    1
  1384 ;; Hardware stack levels required when called:    1
  1385 ;; This function calls:
  1386 ;;		Nothing
  1387 ;; This function is called by:
  1388 ;;		_WriteCommandToLCD
  1389 ;;		_WriteDataToLCD
  1390 ;;		_InitLCD
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393  014C                     _ToggleEpinOfLCD:	
  1394  014C                     l4147:	
  1395                           ; Regs used in _ToggleEpinOfLCD: [wreg]
  1396                           
  1397  014C  3010               	movlw	16
  1398                           
  1399                           ;LCD.c: 6: RB0 = 1;
  1400  014D  1406               	bsf	6,0
  1401                           
  1402                           ;LCD.c: 7: _delay((unsigned long)((50)*(4000000/4000000.0)));
  1403  014E  00F2               	movwf	??_ToggleEpinOfLCD
  1404  014F                     u977:	
  1405  014F  0BF2               	decfsz	??_ToggleEpinOfLCD,f
  1406  0150  294F               	goto	u977
  1407  0151  0064               	clrwdt
  1408  0152  2188               	call	PL4	;select bank 0
  1409                           
  1410                           ;LCD.c: 8: RB0 = 0;
  1411  0153  3010               	movlw	16
  1412  0154  1006               	bcf	6,0
  1413                           
  1414                           ;LCD.c: 9: _delay((unsigned long)((50)*(4000000/4000000.0)));
  1415  0155  00F2               	movwf	??_ToggleEpinOfLCD
  1416  0156                     u987:	
  1417  0156  0BF2               	decfsz	??_ToggleEpinOfLCD,f
  1418  0157  2956               	goto	u987
  1419  0158  0064               	clrwdt
  1420  0159  0008               	return
  1421  015A                     __end_of_ToggleEpinOfLCD:	
  1422  015A                     __ptext417:	
  1423 ;; =============== function _WriteDataToLCD ends ============
  1424                           
  1425                           
  1426 ;; *************** function _WriteCommandToLCD *****************
  1427 ;; Defined at:
  1428 ;;		line 14 in file "C:\Users\Saeed\Desktop\PIC16F877 Controllable Digital Clock Code\Code\LCD.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  Command         1    wreg     unsigned char 
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;  Command         1    3[COMMON] unsigned char 
  1433 ;; Return value:  Size  Location     Type
  1434 ;;		None               void
  1435 ;; Registers used:
  1436 ;;		wreg, status,2, status,0, pclath, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1442 ;;      Params:         0       0       0       0       0
  1443 ;;      Locals:         1       0       0       0       0
  1444 ;;      Temps:          0       0       0       0       0
  1445 ;;      Totals:         1       0       0       0       0
  1446 ;;Total ram usage:        1 bytes
  1447 ;; Hardware stack levels used:    1
  1448 ;; Hardware stack levels required when called:    2
  1449 ;; This function calls:
  1450 ;;		_ToggleEpinOfLCD
  1451 ;; This function is called by:
  1452 ;;		_InitLCD
  1453 ;;		_ClearLCDScreen
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456  015A                     _WriteCommandToLCD:	
  1457                           
  1458                           ; Regs used in _WriteCommandToLCD: [wreg+status,2+status,0+pclath+cstack]
  1459                           ;WriteCommandToLCD@Command stored from wreg
  1460  015A  00F3               	movwf	WriteCommandToLCD@Command
  1461  015B  2188               	call	PL4	;select bank 0
  1462                           
  1463                           ;LCD.c: 15: RB1 = 0;
  1464  015C  300F               	movlw	15
  1465  015D  1086               	bcf	6,1
  1466                           
  1467                           ;LCD.c: 17: PORTB &= 0x0F;
  1468  015E  0586               	andwf	6,f	;volatile
  1469                           
  1470                           ;LCD.c: 18: PORTB |= (Command&0xF0);
  1471  015F  0873               	movf	WriteCommandToLCD@Command,w
  1472  0160  39F0               	andlw	240
  1473  0161  0486               	iorwf	6,f	;volatile
  1474                           
  1475                           ;LCD.c: 19: ToggleEpinOfLCD();
  1476  0162  214C  120A  118A   	fcall	_ToggleEpinOfLCD
  1477                           
  1478                           ;LCD.c: 21: PORTB &= 0x0F;
  1479  0165  300F               	movlw	15
  1480  0166  2188               	call	PL4	;select bank 0
  1481  0167  0586               	andwf	6,f	;volatile
  1482                           
  1483                           ;LCD.c: 22: PORTB |= ((Command<<4)&0xF0);
  1484  0168  0E73               	swapf	WriteCommandToLCD@Command,w
  1485  0169  39F0               	andlw	240
  1486  016A  0486               	iorwf	6,f	;volatile
  1487                           
  1488                           ;LCD.c: 23: ToggleEpinOfLCD();
  1489  016B  294C               	ljmp	l4147
  1490  016C                     __end_of_WriteCommandToLCD:	
  1491  016C                     __ptext414:	
  1492 ;; =============== function _DisplayTimeToLCD ends ============
  1493                           
  1494                           
  1495 ;; *************** function _ClearLCDScreen *****************
  1496 ;; Defined at:
  1497 ;;		line 99 in file "C:\Users\Saeed\Desktop\PIC16F877 Controllable Digital Clock Code\Code\LCD.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;		None
  1502 ;; Return value:  Size  Location     Type
  1503 ;;		None               void
  1504 ;; Registers used:
  1505 ;;		wreg, status,2, status,0, pclath, cstack
  1506 ;; Tracked objects:
  1507 ;;		On entry : 60/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1511 ;;      Params:         0       0       0       0       0
  1512 ;;      Locals:         0       0       0       0       0
  1513 ;;      Temps:          2       0       0       0       0
  1514 ;;      Totals:         2       0       0       0       0
  1515 ;;Total ram usage:        2 bytes
  1516 ;; Hardware stack levels used:    1
  1517 ;; Hardware stack levels required when called:    3
  1518 ;; This function calls:
  1519 ;;		_WriteCommandToLCD
  1520 ;; This function is called by:
  1521 ;;		_DisplayTimeToLCD
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524  016C                     _ClearLCDScreen:	
  1525                           
  1526                           ;LCD.c: 100: WriteCommandToLCD(0x01);
  1527                           
  1528                           ; Regs used in _ClearLCDScreen: [wreg+status,2+status,0+pclath+cstack]
  1529  016C  3001               	movlw	1
  1530  016D  215A  120A  118A   	fcall	_WriteCommandToLCD
  1531                           
  1532                           ;LCD.c: 101: _delay((unsigned long)((2)*(4000000/4000.0)));
  1533  0170  3003               	movlw	3
  1534  0171  00F5               	movwf	??_ClearLCDScreen+1
  1535  0172  3097               	movlw	151
  1536  0173  00F4               	movwf	??_ClearLCDScreen
  1537  0174                     u917:	
  1538  0174  0BF4               	decfsz	??_ClearLCDScreen,f
  1539  0175  2974               	goto	u917
  1540  0176  0BF5               	decfsz	??_ClearLCDScreen+1,f
  1541  0177  2974               	goto	u917
  1542  0178  2979               	nop2
  1543  0179  0008               	return
  1544  017A                     __end_of_ClearLCDScreen:	
  1545  017A                     PL2:	
  1546  017A  300F               	movlw	15
  1547  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1548  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1549  017D  0586               	andwf	6,f	;volatile
  1550  017E  3030               	movlw	48
  1551  017F  0486               	iorwf	6,f	;volatile
  1552  0180  0008               	return
  1553  0181                     PL3:	
  1554  0181  1006               	bcf	6,0
  1555  0182  1086               	bcf	6,1
  1556  0183  1206               	bcf	6,4
  1557  0184  1286               	bcf	6,5
  1558  0185  1306               	bcf	6,6
  1559  0186  1386               	bcf	6,7
  1560  0187  0008               	return
  1561  0188                     PL4:	
  1562  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1563  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1564  018A  0008               	return
  1565                           
  1566                           	psect	text418
  1567  02B9                     __ptext418:	
  1568 ;; =============== function _WriteCommandToLCD ends ============
  1569                           
  1570                           
  1571 ;; *************** function _Init1msecTimerInterrupt *****************
  1572 ;; Defined at:
  1573 ;;		line 24 in file "C:\Users\Saeed\Desktop\PIC16F877 Controllable Digital Clock Code\Code\Timer.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;		None
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;		None
  1578 ;; Return value:  Size  Location     Type
  1579 ;;		None               void
  1580 ;; Registers used:
  1581 ;;		wreg, status,2, status,0, pclath, cstack
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/20
  1584 ;;		On exit  : 60/20
  1585 ;;		Unchanged: FFF9F/0
  1586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1587 ;;      Params:         0       0       0       0       0
  1588 ;;      Locals:         0       0       0       0       0
  1589 ;;      Temps:          0       0       0       0       0
  1590 ;;      Totals:         0       0       0       0       0
  1591 ;;Total ram usage:        0 bytes
  1592 ;; Hardware stack levels used:    1
  1593 ;; Hardware stack levels required when called:    2
  1594 ;; This function calls:
  1595 ;;		_InitTimer0
  1596 ;; This function is called by:
  1597 ;;		_main
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600  02B9                     _Init1msecTimerInterrupt:	
  1601                           
  1602                           ;Timer.c: 25: InitTimer0();
  1603                           
  1604                           ; Regs used in _Init1msecTimerInterrupt: [wreg+status,2+status,0+pclath+cstack]
  1605  02B9  2ABA               	ljmp	l4087
  1606  02BA                     __end_of_Init1msecTimerInterrupt:	
  1607  02BA                     __ptext422:	
  1608 ;; =============== function ___lwdiv ends ============
  1609                           
  1610                           
  1611 ;; *************** function _InitTimer0 *****************
  1612 ;; Defined at:
  1613 ;;		line 14 in file "C:\Users\Saeed\Desktop\PIC16F877 Controllable Digital Clock Code\Code\Timer.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;		None
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;		None
  1618 ;; Return value:  Size  Location     Type
  1619 ;;		None               void
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/20
  1624 ;;		On exit  : 60/20
  1625 ;;		Unchanged: FFF9F/0
  1626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1627 ;;      Params:         0       0       0       0       0
  1628 ;;      Locals:         0       0       0       0       0
  1629 ;;      Temps:          0       0       0       0       0
  1630 ;;      Totals:         0       0       0       0       0
  1631 ;;Total ram usage:        0 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    1
  1634 ;; This function calls:
  1635 ;;		Nothing
  1636 ;; This function is called by:
  1637 ;;		_Init1msecTimerInterrupt
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640  02BA                     _InitTimer0:	
  1641  02BA                     l4087:	
  1642                           ; Regs used in _InitTimer0: [wreg+status,2+status,0]
  1643                           
  1644                           
  1645                           ;Timer.c: 16: OPTION_REG &= 0xC1;
  1646  02BA  30C1               	movlw	193
  1647  02BB  1683               	bsf	3,5	;RP0=1, select bank1
  1648  02BC  1303               	bcf	3,6	;RP1=0, select bank1
  1649  02BD  0581               	andwf	1,f	;volatile
  1650                           
  1651                           ;Timer.c: 18: T0IE = 1;
  1652  02BE  168B               	bsf	11,5
  1653                           
  1654                           ;Timer.c: 19: GIE = 1;
  1655  02BF  178B               	bsf	11,7
  1656  02C0  0008               	return
  1657  02C1                     __end_of_InitTimer0:	
  1658                           
  1659                           	psect	text423
  1660  026D                     __ptext423:	
  1661 ;; =============== function _InitTimer0 ends ============
  1662                           
  1663                           
  1664 ;; *************** function _UpdateTimeCounters *****************
  1665 ;; Defined at:
  1666 ;;		line 32 in file "C:\Users\Saeed\Desktop\PIC16F877 Controllable Digital Clock Code\Code\Timer.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  State           1    wreg     unsigned char 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;  State           1    2[COMMON] unsigned char 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;		None               void
  1673 ;; Registers used:
  1674 ;;		wreg, status,2, status,0
  1675 ;; Tracked objects:
  1676 ;;		On entry : 60/0
  1677 ;;		On exit  : 60/0
  1678 ;;		Unchanged: FFF9F/0
  1679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1680 ;;      Params:         0       0       0       0       0
  1681 ;;      Locals:         1       0       0       0       0
  1682 ;;      Temps:          0       0       0       0       0
  1683 ;;      Totals:         1       0       0       0       0
  1684 ;;Total ram usage:        1 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    1
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_main
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693  026D                     _UpdateTimeCounters:	
  1694                           
  1695                           ; Regs used in _UpdateTimeCounters: [wreg+status,2+status,0]
  1696                           ;UpdateTimeCounters@State stored from wreg
  1697  026D  00F2               	movwf	UpdateTimeCounters@State
  1698                           
  1699                           ;Timer.c: 33: if (msCounter==1000)
  1700  026E  082B               	movf	_msCounter+1,w
  1701  026F  3A03               	xorlw	3
  1702  0270  30E8               	movlw	232
  1703  0271  1903               	skipnz
  1704  0272  062A               	xorwf	_msCounter,w
  1705  0273  1D03               	skipz
  1706  0274  2A7C               	goto	l4067
  1707                           
  1708                           ;Timer.c: 34: {
  1709                           ;Timer.c: 35: if(State == 0)
  1710  0275  08F2               	movf	UpdateTimeCounters@State,f
  1711  0276  1903               	btfsc	3,2
  1712                           
  1713                           ;Timer.c: 36: secCounter++;
  1714  0277  0AAC               	incf	_secCounter,f
  1715  0278  1903               	skipnz
  1716  0279  0AAD               	incf	_secCounter+1,f
  1717                           
  1718                           ;Timer.c: 37: msCounter=0;
  1719  027A  01AA               	clrf	_msCounter
  1720  027B  01AB               	clrf	_msCounter+1
  1721  027C                     l4067:	
  1722                           
  1723                           ;Timer.c: 38: }
  1724                           ;Timer.c: 40: if(secCounter==60)
  1725  027C  082C               	movf	_secCounter,w
  1726  027D  3A3C               	xorlw	60
  1727  027E  042D               	iorwf	_secCounter+1,w
  1728  027F  1D03               	skipz
  1729  0280  2A88               	goto	l4075
  1730                           
  1731                           ;Timer.c: 41: {
  1732                           ;Timer.c: 42: if(State == 0)
  1733  0281  08F2               	movf	UpdateTimeCounters@State,f
  1734  0282  1903               	btfsc	3,2
  1735                           
  1736                           ;Timer.c: 43: minCounter++;
  1737  0283  0AFA               	incf	_minCounter,f
  1738  0284  1903               	skipnz
  1739  0285  0AFB               	incf	_minCounter+1,f
  1740                           
  1741                           ;Timer.c: 44: secCounter=0;
  1742  0286  01AC               	clrf	_secCounter
  1743  0287  01AD               	clrf	_secCounter+1
  1744  0288                     l4075:	
  1745                           
  1746                           ;Timer.c: 45: }
  1747                           ;Timer.c: 47: if(minCounter==60)
  1748  0288  087A               	movf	_minCounter,w
  1749  0289  3A3C               	xorlw	60
  1750  028A  047B               	iorwf	_minCounter+1,w
  1751  028B  1D03               	skipz
  1752  028C  2A94               	goto	l4083
  1753                           
  1754                           ;Timer.c: 48: {
  1755                           ;Timer.c: 49: if(State == 0)
  1756  028D  08F2               	movf	UpdateTimeCounters@State,f
  1757  028E  1903               	btfsc	3,2
  1758                           
  1759                           ;Timer.c: 50: hrCounter++;
  1760  028F  0AF8               	incf	_hrCounter,f
  1761  0290  1903               	skipnz
  1762  0291  0AF9               	incf	_hrCounter+1,f
  1763                           
  1764                           ;Timer.c: 51: minCounter=0;
  1765  0292  01FA               	clrf	_minCounter
  1766  0293  01FB               	clrf	_minCounter+1
  1767  0294                     l4083:	
  1768                           
  1769                           ;Timer.c: 52: }
  1770                           ;Timer.c: 54: if(hrCounter==24)
  1771  0294  0878               	movf	_hrCounter,w
  1772  0295  3A18               	xorlw	24
  1773  0296  0479               	iorwf	_hrCounter+1,w
  1774  0297  1D03               	skipz
  1775  0298  0008               	return
  1776                           
  1777                           ;Timer.c: 55: {
  1778                           ;Timer.c: 56: hrCounter = 0;
  1779  0299  01F8               	clrf	_hrCounter
  1780  029A  01F9               	clrf	_hrCounter+1
  1781  029B  0008               	return
  1782  029C                     __end_of_UpdateTimeCounters:	
  1783                           
  1784                           	psect	text424
  1785  029C                     __ptext424:	
  1786 ;; =============== function _UpdateTimeCounters ends ============
  1787                           
  1788                           
  1789 ;; *************** function _ISR *****************
  1790 ;; Defined at:
  1791 ;;		line 6 in file "C:\Users\Saeed\Desktop\PIC16F877 Controllable Digital Clock Code\Code\ISR.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;		None
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;		None
  1796 ;; Return value:  Size  Location     Type
  1797 ;;		None               void
  1798 ;; Registers used:
  1799 ;;		wreg, status,2, status,0
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: FFF9F/0
  1804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1805 ;;      Params:         0       0       0       0       0
  1806 ;;      Locals:         0       0       0       0       0
  1807 ;;      Temps:          2       0       0       0       0
  1808 ;;      Totals:         2       0       0       0       0
  1809 ;;Total ram usage:        2 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		Interrupt level 1
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817  029C                     _ISR:	
  1818                           
  1819                           ;ISR.c: 7: if(T0IF)
  1820  029C  1D0B               	btfss	11,2
  1821  029D  2AA6               	goto	i1l2680
  1822                           
  1823                           ;ISR.c: 8: {
  1824                           ;ISR.c: 9: TMR0 = 0x08;
  1825  029E  3008               	movlw	8
  1826  029F  1283               	bcf	3,5	;RP0=0, select bank0
  1827  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  1828  02A1  0081               	movwf	1	;volatile
  1829                           
  1830                           ;ISR.c: 10: T0IF = 0;
  1831  02A2  110B               	bcf	11,2
  1832                           
  1833                           ;ISR.c: 11: msCounter++;
  1834  02A3  0AAA               	incf	_msCounter,f
  1835  02A4  1903               	skipnz
  1836  02A5  0AAB               	incf	_msCounter+1,f
  1837  02A6                     i1l2680:	
  1838  02A6  0871               	movf	??_ISR+1,w
  1839  02A7  008A               	movwf	10
  1840  02A8  0E70               	swapf	??_ISR^(0+-128),w
  1841  02A9  0083               	movwf	3
  1842  02AA  0EFE               	swapf	126,f
  1843  02AB  0E7E               	swapf	126,w
  1844  02AC  0009               	retfie
  1845  02AD                     __end_of_ISR:	
  1846                           
  1847                           	psect	intentry
  1848  0004                     __pintentry:	
  1849                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1850                           
  1851  0004                     interrupt_function:	
  1852  007E                     saved_w	set	btemp
  1853  0004  00FE               	movwf	btemp
  1854  0005  0E03               	swapf	3,w
  1855  0006  00F0               	movwf	??_ISR
  1856  0007  080A               	movf	10,w
  1857  0008  00F1               	movwf	??_ISR+1
  1858  0009  120A  118A  2A9C   	ljmp	_ISR
  1859                           
  1860                           	psect	text425
  1861  0000                     __ptext425:	
  1862 ;; =============== function _ISR ends ============
  1863                           
  1864  007E                     btemp	set	126	;btemp
  1865  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sun Dec 16 01:50:32 2012

                             l643 0000                               l652 0000                               l661 0000  
                             l646 0000                               l649 0000                               _GIE 005F  
                             _RB0 0030                               _RB1 0031                               _RB4 0034  
                             _RB5 0035                               _RE0 0048                               _RB6 0036  
                             _RE1 0049                               _RB7 0037                               _RE2 004A  
                             _ISR 029C                               u715 00BD                               u495 00E2  
                             u917 0174                               u927 0100                               u937 010F  
                             u947 011C                               u957 0129                               u967 0139  
                             u977 014F                               u987 0156                              ?_ISR 0070  
                            l2023 0000                              l2026 0000                              l1334 01D1  
                            l1344 0215                              l1328 01AC                              l4201 0000  
                            l4211 0000                              l4203 0000                              l4141 0000  
                            l4213 0000                              l4205 0000                              l4221 0000  
                            l4135 00DC                              l4143 00EF                              l4127 0000  
                            l4151 0000                              l4215 0000                              l4207 0000  
                            l3336 0000                              l4153 0000                              l4161 0000  
                            l4217 0000                              l4209 0000                              l4401 0000  
                            l3346 0000                              l4083 0294                              l4075 0288  
                            l4067 027C                              l4059 0000                              l4091 0000  
                            l4147 014C                              l4163 0000                              l4155 0000  
                            l4171 0000                              l4219 0000                              l4411 01A3  
                            l4403 019A                              l4149 0000                              l4165 0000  
                            l4157 0000                              l4173 0000                              l4181 0000  
                            l4421 01BE                              l4087 02BA                              l4159 0000  
                            l4175 0000                              l4167 0000                              l4191 0000  
                            l4183 0000                              l4431 01D4                              l4423 01C2  
                            l4415 01B1                              l4089 0000                              l4177 0000  
                            l4169 0000                              l4193 0000                              l4185 0000  
                            l4441 01EC                              l4433 01DA                              l4417 01B7  
                            l4363 0000                              l4347 0000                              l4195 0000  
                            l4187 0000                              l4179 0000                              l4451 0203  
                            l4435 01DD                              l4419 01BA                              l4427 01C6  
                            l4357 00B4                              l4349 0000                              l4197 0000  
                            l4189 0000                              l4381 0000                              l4373 0000  
                            l4461 021E                              l4445 01F4                              l4367 0000  
                            l4359 0000                              l4199 0000                              l4391 0077  
                            l4375 0000                              l4463 0221                              l4471 0228  
                            l4447 01FB                              l4439 01E5                              l4455 020A  
                            l4369 00CB                              l4385 0049                              l4377 0000  
                            l4465 0223                              l4473 0233                              l4393 0000  
                            l4387 0000                              l4379 001B                              l4483 0000  
                            l4475 0000                              l4467 0226                              l4459 0218  
                            l4395 0000                              l4397 0000                              l4479 0250  
                            l4399 0000                              _T0IE 005D                              _T0IF 005A  
                            _TMR0 0001                              _main 018B                              btemp 007E  
                            start 000C                   __end_of_InitLCD 014C                             ??_ISR 0070  
                           ?_main 0070                   __end_of___lwdiv 00D0                   __end_of___lwmod 00F4  
                           _PORTB 0006                             _TRISE 0089                             pclath 000A  
__size_of_Init1msecTimerInterrupt 0001                             status 0003           __size_of_WriteDataToLCD 0012  
                           wtemp0 007E                   _ToggleEpinOfLCD 014C                        _InitTimer0 02BA  
                    __end_of_main 026D                            ??_main 0077                  ??_ClearLCDScreen 0074  
                          _ADCON1 009F                            i1l4093 0000                            i1l2680 02A6  
                          i1l4097 0000                            i1l4099 0000                 DisplayTimeToLCD@h 0023  
               DisplayTimeToLCD@m 0025                 DisplayTimeToLCD@s 0027                            _TRISB0 0430  
                          _TRISB1 0431                            _TRISB4 0434                            _TRISB5 0435  
                          _TRISB6 0436                            _TRISB7 0437                         ??_InitLCD 0074  
         UpdateTimeCounters@State 0072                         ??___lwdiv 0076                         ??___lwmod 0076  
                          saved_w 007E        __end_of_UpdateTimeCounters 029C           __end_of_ToggleEpinOfLCD 015A  
       __size_of_DisplayTimeToLCD 0085                       ?_InitTimer0 0070                    __pcstackCOMMON 0070  
        WriteCommandToLCD@Command 0073           _Init1msecTimerInterrupt 02B9                        __pbssBANK0 002A  
                  _WriteDataToLCD 0094                        __pmaintext 018B             WriteDataToLCD@LCDChar 0073  
                      __pintentry 0004               __size_of_InitTimer0 0007            __end_of_WriteDataToLCD 00A6  
                ?_ToggleEpinOfLCD 0070                           _InitLCD 00F4                        _minCounter 007A  
                      _secCounter 002C                           ___lwdiv 00A6                           ___lwmod 00D0  
                    __size_of_ISR 0011         ??_Init1msecTimerInterrupt 0072              end_of_initialization 02B5  
                 ?_WriteDataToLCD 0070                  _DisplayTimeToLCD 000F                _UpdateTimeCounters 026D  
                    ??_InitTimer0 0072               ?_UpdateTimeCounters 0070               start_initialization 02AD  
                     __end_of_ISR 02AD              ??_UpdateTimeCounters 0072                __end_of_InitTimer0 02C1  
         __size_of_ClearLCDScreen 000E                       __pbssCOMMON 0078                     __pcstackBANK0 0020  
                        ?_InitLCD 0070                  ___lwdiv@dividend 0074                         __ptext420 00D0  
                       __ptext412 0000                         __ptext421 00A6                         __ptext413 000F  
                       __ptext422 02BA                         __ptext414 016C                         __ptext423 026D  
                       __ptext415 00F4                         __ptext424 029C                         __ptext416 0094  
                       __ptext425 0000                         __ptext417 015A                         __ptext418 02B9  
                       __ptext419 014C                         _hrCounter 0078                          ?___lwdiv 0072  
                        ?___lwmod 0072                  ??_WriteDataToLCD 0073                         _msCounter 002A  
        __end_of_DisplayTimeToLCD 0094                  ___lwdiv@quotient 0021                 interrupt_function 0004  
        __size_of_ToggleEpinOfLCD 000E                         main@State 0077                    _ClearLCDScreen 016C  
               _WriteCommandToLCD 015A                ?_WriteCommandToLCD 0070                  __size_of_InitLCD 0058  
             ??_WriteCommandToLCD 0073                  __size_of___lwdiv 002A                  __size_of___lwmod 0024  
        ?_Init1msecTimerInterrupt 0070                   ___lwdiv@divisor 0072            __end_of_ClearLCDScreen 017A  
                 ___lwdiv@counter 0020         __end_of_WriteCommandToLCD 016C                     __size_of_main 00E2  
               ??_ToggleEpinOfLCD 0072             DisplayTimeToLCD@State 0029                   ?_ClearLCDScreen 0070  
     __size_of_UpdateTimeCounters 002F                          intlevel1 0000                  ___lwmod@dividend 0074  
 __end_of_Init1msecTimerInterrupt 02BA                        _OPTION_REG 0081                   ___lwmod@divisor 0072  
                 ___lwmod@counter 0076                 ?_DisplayTimeToLCD 0023        __size_of_WriteCommandToLCD 0012  
              ??_DisplayTimeToLCD 0077  
