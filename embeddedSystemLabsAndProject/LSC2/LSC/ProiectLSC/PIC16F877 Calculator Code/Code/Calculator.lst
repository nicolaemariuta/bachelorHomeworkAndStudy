

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sun Nov 25 18:52:28 2012

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	text354,local,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,delta=2
    11                           	psect	text355,local,class=CODE,delta=2
    12                           	psect	text364,local,class=CODE,delta=2
    13                           	psect	text370,local,class=CODE,delta=2
    14                           	psect	text371,local,class=CODE,delta=2
    15                           	psect	pa_nodes,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  000A                     	;#
    18                           
    19                           	psect	config
    20  2007  FF72               	dw	65394	;#
    21                           
    22                           	psect	text354
    23  0000                     __ptext354:	
    24  0006                     _PORTB	set	6
    25  0008                     _PORTD	set	8
    26  0030                     _RB0	set	48
    27  0031                     _RB1	set	49
    28  0032                     _RB2	set	50
    29  0033                     _RB3	set	51
    30  0034                     _RB4	set	52
    31  0035                     _RB5	set	53
    32  0036                     _RB6	set	54
    33  0037                     _RB7	set	55
    34  0040                     _RD0	set	64
    35  0041                     _RD1	set	65
    36  0044                     _RD4	set	68
    37  0045                     _RD5	set	69
    38  0046                     _RD6	set	70
    39  0047                     _RD7	set	71
    40  0081                     _OPTION_REG	set	129
    41  0086                     _TRISB	set	134
    42  0440                     _TRISD0	set	1088
    43  0441                     _TRISD1	set	1089
    44  0444                     _TRISD4	set	1092
    45  0445                     _TRISD5	set	1093
    46  0446                     _TRISD6	set	1094
    47  0447                     _TRISD7	set	1095
    48                           
    49                           	psect	strings
    50  0003                     __pstrings:	
    51  0003                     stringtab:	
    52                           ;	global	stringdir,stringtab,__stringbase
    53                           
    54  0003                     stringcode:	
    55                           ;	String table - string pointers are 1 byte each
    56                           
    57  0003                     stringdir:	
    58  0003  3000               	movlw	high stringdir
    59  0004  008A               	movwf	10
    60  0005  0804               	movf	4,w
    61  0006  0A84               	incf	4,f
    62  0007  0782               	addwf	2,f
    63  0008                     __stringbase:	
    64  0008  3400               	retlw	0
    65  0009                     STR_2:	
    66  0009  3457               	retlw	87	;'W'
    67  000A  3472               	retlw	114	;'r'
    68  000B  346F               	retlw	111	;'o'
    69  000C  346E               	retlw	110	;'n'
    70  000D  3467               	retlw	103	;'g'
    71  000E  3420               	retlw	32	;' '
    72  000F  3446               	retlw	70	;'F'
    73  0010  3475               	retlw	117	;'u'
    74  0011  346E               	retlw	110	;'n'
    75  0012  3463               	retlw	99	;'c'
    76  0013  3474               	retlw	116	;'t'
    77  0014  3469               	retlw	105	;'i'
    78  0015  346F               	retlw	111	;'o'
    79  0016  346E               	retlw	110	;'n'
    80  0017  3400               	retlw	0
    81  0018                     STR_1:	
    82  0018  3457               	retlw	87	;'W'
    83  0019  3472               	retlw	114	;'r'
    84  001A  346F               	retlw	111	;'o'
    85  001B  346E               	retlw	110	;'n'
    86  001C  3467               	retlw	103	;'g'
    87  001D  3420               	retlw	32	;' '
    88  001E  3449               	retlw	73	;'I'
    89  001F  346E               	retlw	110	;'n'
    90  0020  3470               	retlw	112	;'p'
    91  0021  3475               	retlw	117	;'u'
    92  0022  3474               	retlw	116	;'t'
    93  0023  3400               	retlw	0
    94  0018                     
    95                           	psect	cinit
    96  03CA                     start_initialization:	
    97  03CA                     end_of_initialization:	
    98                           ;End of C runtime variable initialization code
    99                           
   100  03CA  0183               	clrf	3
   101  03CB  120A  118A  2BD4   	ljmp	_main	;jump to C main() function
   102                           
   103                           	psect	cstackCOMMON
   104  0070                     __pcstackCOMMON:	
   105  0070                     ?_InitKeypad:	
   106  0070                     ??_InitKeypad:	
   107                           ; 0 bytes @ 0x0
   108                           
   109  0070                     ??_READ_SWITCHES:	
   110                           ; 0 bytes @ 0x0
   111                           
   112  0070                     ?_ToggleEpinOfLCD:	
   113                           ; 0 bytes @ 0x0
   114                           
   115  0070                     ??_ToggleEpinOfLCD:	
   116                           ; 0 bytes @ 0x0
   117                           
   118  0070                     ?_WriteCommandToLCD:	
   119                           ; 0 bytes @ 0x0
   120                           
   121  0070                     ?_WriteDataToLCD:	
   122                           ; 0 bytes @ 0x0
   123                           
   124  0070                     ?_InitLCD:	
   125                           ; 0 bytes @ 0x0
   126                           
   127  0070                     ?_WriteStringToLCD:	
   128                           ; 0 bytes @ 0x0
   129                           
   130  0070                     ?_ClearLCDScreen:	
   131                           ; 0 bytes @ 0x0
   132                           
   133  0070                     ?_main:	
   134                           ; 0 bytes @ 0x0
   135                           
   136  0070                     ?_get_func:	
   137                           ; 0 bytes @ 0x0
   138                           
   139  0070                     ?_READ_SWITCHES:	
   140                           ; 1 bytes @ 0x0
   141                           
   142  0070                     ?_GetKey:	
   143                           ; 1 bytes @ 0x0
   144                           
   145  0070                     ?___bmul:	
   146                           ; 1 bytes @ 0x0
   147                           
   148  0070                     ?___wmul:	
   149                           ; 1 bytes @ 0x0
   150                           
   151  0070                     ?___awdiv:	
   152                           ; 2 bytes @ 0x0
   153                           
   154  0070                     ___bmul@multiplicand:	
   155                           ; 2 bytes @ 0x0
   156                           
   157  0070                     ___wmul@multiplier:	
   158                           ; 1 bytes @ 0x0
   159                           
   160  0070                     ___awdiv@divisor:	
   161                           ; 2 bytes @ 0x0
   162                           
   163                           
   164                           ; 2 bytes @ 0x0
   165  0070                     	ds	1
   166  0071                     ??___bmul:	
   167  0071                     ___bmul@product:	
   168                           ; 0 bytes @ 0x1
   169                           
   170                           
   171                           ; 1 bytes @ 0x1
   172  0071                     	ds	1
   173  0072                     ??_WriteCommandToLCD:	
   174  0072                     ??_WriteDataToLCD:	
   175                           ; 0 bytes @ 0x2
   176                           
   177  0072                     WriteCommandToLCD@Command:	
   178                           ; 0 bytes @ 0x2
   179                           
   180  0072                     WriteDataToLCD@LCDChar:	
   181                           ; 1 bytes @ 0x2
   182                           
   183  0072                     ___bmul@multiplier:	
   184                           ; 1 bytes @ 0x2
   185                           
   186  0072                     ___wmul@multiplicand:	
   187                           ; 1 bytes @ 0x2
   188                           
   189  0072                     ___awdiv@dividend:	
   190                           ; 2 bytes @ 0x2
   191                           
   192                           
   193                           ; 2 bytes @ 0x2
   194  0072                     	ds	1
   195  0073                     ??_GetKey:	
   196  0073                     ??_InitLCD:	
   197                           ; 0 bytes @ 0x3
   198                           
   199  0073                     ??_WriteStringToLCD:	
   200                           ; 0 bytes @ 0x3
   201                           
   202  0073                     ??_ClearLCDScreen:	
   203                           ; 0 bytes @ 0x3
   204                           
   205  0073                     GetKey@key:	
   206                           ; 0 bytes @ 0x3
   207                           
   208  0073                     WriteStringToLCD@s:	
   209                           ; 1 bytes @ 0x3
   210                           
   211                           
   212                           ; 1 bytes @ 0x3
   213  0073                     	ds	1
   214  0074                     ??___wmul:	
   215  0074                     ??___awdiv:	
   216                           ; 0 bytes @ 0x4
   217                           
   218  0074                     ___awdiv@counter:	
   219                           ; 0 bytes @ 0x4
   220                           
   221  0074                     ___wmul@product:	
   222                           ; 1 bytes @ 0x4
   223                           
   224                           
   225                           ; 2 bytes @ 0x4
   226  0074                     	ds	1
   227  0075                     ?_DispError:	
   228  0075                     ___awdiv@sign:	
   229                           ; 0 bytes @ 0x5
   230                           
   231  0075                     DispError@numb:	
   232                           ; 1 bytes @ 0x5
   233                           
   234                           
   235                           ; 2 bytes @ 0x5
   236  0075                     	ds	1
   237  0076                     ___awdiv@quotient:	
   238                           
   239                           ; 2 bytes @ 0x6
   240  0076                     	ds	1
   241  0077                     ??_get_func:	
   242  0077                     ??_DispError:	
   243                           ; 0 bytes @ 0x7
   244                           
   245  0077                     ?_get_num:	
   246                           ; 0 bytes @ 0x7
   247                           
   248  0077                     get_func@chf:	
   249                           ; 2 bytes @ 0x7
   250                           
   251                           
   252                           ; 1 bytes @ 0x7
   253  0077                     	ds	1
   254  0078                     ?_disp_num:	
   255  0078                     disp_num@numb:	
   256                           ; 0 bytes @ 0x8
   257                           
   258                           
   259                           ; 2 bytes @ 0x8
   260  0078                     	ds	1
   261  0079                     ??_get_num:	
   262  0079                     get_num@ch:	
   263                           ; 0 bytes @ 0x9
   264                           
   265                           
   266                           ; 1 bytes @ 0x9
   267  0079                     	ds	1
   268  007A                     ??_disp_num:	
   269  007A                     get_num@num:	
   270                           ; 0 bytes @ 0xA
   271                           
   272                           
   273                           ; 2 bytes @ 0xA
   274  007A                     	ds	1
   275  007B                     disp_num@UnitDigit:	
   276                           
   277                           ; 1 bytes @ 0xB
   278  007B                     	ds	1
   279  007C                     disp_num@TenthDigit:	
   280                           
   281                           ; 1 bytes @ 0xC
   282  007C                     	ds	1
   283  007D                     ??_main:	
   284                           
   285                           	psect	cstackBANK0
   286  0020                     __pcstackBANK0:	
   287                           ; 0 bytes @ 0xD
   288                           
   289  0020                     main@func:	
   290                           
   291                           ; 1 bytes @ 0x0
   292  0020                     	ds	1
   293  0021                     main@num1:	
   294                           
   295                           ; 2 bytes @ 0x1
   296  0021                     	ds	2
   297  0023                     main@num2:	
   298                           
   299                           ; 2 bytes @ 0x3
   300  0023                     	ds	2
   301  0025                     main@key:	
   302                           
   303                           ; 1 bytes @ 0x5
   304  0025                     	ds	1
   305                           
   306                           	psect	maintext
   307  03D4                     __pmaintext:	
   308 ;;Data sizes: Strings 27, constant 0, data 0, bss 0, persistent 0 stack 0
   309 ;;Auto spaces:   Size  Autos    Used
   310 ;; COMMON          14     13      13
   311 ;; BANK0           80      6       6
   312 ;; BANK1           80      0       0
   313 ;; BANK3           96      0       0
   314 ;; BANK2           96      0       0
   315 ;;
   316 ;; Pointer list with targets:
   317 ;; ?_get_num	int  size(1) Largest target is 0
   318 ;;
   319 ;; ?___awdiv	int  size(1) Largest target is 0
   320 ;;
   321 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   322 ;;
   323 ;; WriteStringToLCD@s	PTR const unsigned char  size(1) Largest target is 15
   324 ;;		 -> STR_3(CODE[12]), STR_2(CODE[15]), STR_1(CODE[12]), 
   325 ;;
   326 ;;
   327 ;; Critical Paths under _main in COMMON
   328 ;;
   329 ;;   _main->_disp_num
   330 ;;   _get_func->_DispError
   331 ;;   _get_num->_DispError
   332 ;;   _DispError->_ClearLCDScreen
   333 ;;   _disp_num->___awdiv
   334 ;;   _ClearLCDScreen->_WriteCommandToLCD
   335 ;;   _WriteStringToLCD->_WriteDataToLCD
   336 ;;   _InitLCD->_WriteCommandToLCD
   337 ;;   _WriteDataToLCD->_ToggleEpinOfLCD
   338 ;;   _WriteCommandToLCD->_ToggleEpinOfLCD
   339 ;;   _GetKey->_READ_SWITCHES
   340 ;;
   341 ;; Critical Paths under _main in BANK0
   342 ;;
   343 ;;   None.
   344 ;;
   345 ;; Critical Paths under _main in BANK1
   346 ;;
   347 ;;   None.
   348 ;;
   349 ;; Critical Paths under _main in BANK3
   350 ;;
   351 ;;   None.
   352 ;;
   353 ;; Critical Paths under _main in BANK2
   354 ;;
   355 ;;   None.
   356 ;;
   357 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   358 ;;
   359 ;;
   360 ;;Call Graph Tables:
   361 ;;
   362 ;; ---------------------------------------------------------------------------------
   363 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   364 ;; ---------------------------------------------------------------------------------
   365 ;; (0) _main                                                 6     6      0    2493
   366 ;;                                              0 BANK0      6     6      0
   367 ;;                         _InitKeypad
   368 ;;                            _InitLCD
   369 ;;                             _GetKey
   370 ;;                     _ClearLCDScreen
   371 ;;                     _WriteDataToLCD
   372 ;;                            _get_num
   373 ;;                           _get_func
   374 ;;                           _disp_num
   375 ;;                             ___wmul
   376 ;;                            ___awdiv
   377 ;;                          _DispError
   378 ;; ---------------------------------------------------------------------------------
   379 ;; (1) _get_func                                             1     1      0     331
   380 ;;                                              7 COMMON     1     1      0
   381 ;;                     _ClearLCDScreen
   382 ;;                          _DispError
   383 ;; ---------------------------------------------------------------------------------
   384 ;; (1) _get_num                                              5     3      2     256
   385 ;;                                              7 COMMON     5     3      2
   386 ;;                     _ClearLCDScreen
   387 ;;                          _DispError
   388 ;; ---------------------------------------------------------------------------------
   389 ;; (1) _DispError                                            2     0      2     155
   390 ;;                                              5 COMMON     2     0      2
   391 ;;                     _ClearLCDScreen
   392 ;;                   _WriteStringToLCD
   393 ;; ---------------------------------------------------------------------------------
   394 ;; (1) _disp_num                                             5     3      2     709
   395 ;;                                              8 COMMON     5     3      2
   396 ;;                             ___wmul
   397 ;;                     _WriteDataToLCD
   398 ;;                            ___awdiv
   399 ;;                             ___bmul
   400 ;; ---------------------------------------------------------------------------------
   401 ;; (2) _ClearLCDScreen                                       2     2      0      44
   402 ;;                                              3 COMMON     2     2      0
   403 ;;                  _WriteCommandToLCD
   404 ;; ---------------------------------------------------------------------------------
   405 ;; (2) _WriteStringToLCD                                     1     1      0      89
   406 ;;                                              3 COMMON     1     1      0
   407 ;;                     _WriteDataToLCD
   408 ;; ---------------------------------------------------------------------------------
   409 ;; (1) _InitLCD                                              3     3      0      44
   410 ;;                                              3 COMMON     3     3      0
   411 ;;                    _ToggleEpinOfLCD
   412 ;;                  _WriteCommandToLCD
   413 ;; ---------------------------------------------------------------------------------
   414 ;; (3) _WriteDataToLCD                                       1     1      0      44
   415 ;;                                              2 COMMON     1     1      0
   416 ;;                    _ToggleEpinOfLCD
   417 ;; ---------------------------------------------------------------------------------
   418 ;; (3) _WriteCommandToLCD                                    1     1      0      44
   419 ;;                                              2 COMMON     1     1      0
   420 ;;                    _ToggleEpinOfLCD
   421 ;; ---------------------------------------------------------------------------------
   422 ;; (1) _GetKey                                               1     1      0      46
   423 ;;                                              3 COMMON     1     1      0
   424 ;;                      _READ_SWITCHES
   425 ;; ---------------------------------------------------------------------------------
   426 ;; (4) _ToggleEpinOfLCD                                      2     2      0       0
   427 ;;                                              0 COMMON     2     2      0
   428 ;; ---------------------------------------------------------------------------------
   429 ;; (2) _READ_SWITCHES                                        3     3      0       0
   430 ;;                                              0 COMMON     3     3      0
   431 ;; ---------------------------------------------------------------------------------
   432 ;; (1) ___awdiv                                              8     4      4     300
   433 ;;                                              0 COMMON     8     4      4
   434 ;; ---------------------------------------------------------------------------------
   435 ;; (1) ___wmul                                               6     2      4      92
   436 ;;                                              0 COMMON     6     2      4
   437 ;; ---------------------------------------------------------------------------------
   438 ;; (2) ___bmul                                               3     2      1      92
   439 ;;                                              0 COMMON     3     2      1
   440 ;; ---------------------------------------------------------------------------------
   441 ;; (1) _InitKeypad                                           0     0      0       0
   442 ;; ---------------------------------------------------------------------------------
   443 ;; Estimated maximum stack depth 4
   444 ;; ---------------------------------------------------------------------------------
   445 ;; Call Graph Graphs:
   446 ;; _main (ROOT)
   447 ;;   _InitKeypad
   448 ;;   _InitLCD
   449 ;;     _ToggleEpinOfLCD
   450 ;;     _WriteCommandToLCD
   451 ;;       _ToggleEpinOfLCD
   452 ;;   _GetKey
   453 ;;     _READ_SWITCHES
   454 ;;   _ClearLCDScreen
   455 ;;     _WriteCommandToLCD
   456 ;;       _ToggleEpinOfLCD
   457 ;;   _WriteDataToLCD
   458 ;;     _ToggleEpinOfLCD
   459 ;;   _get_num
   460 ;;     _ClearLCDScreen
   461 ;;       _WriteCommandToLCD
   462 ;;         _ToggleEpinOfLCD
   463 ;;     _DispError
   464 ;;       _ClearLCDScreen
   465 ;;         _WriteCommandToLCD
   466 ;;           _ToggleEpinOfLCD
   467 ;;       _WriteStringToLCD
   468 ;;         _WriteDataToLCD
   469 ;;           _ToggleEpinOfLCD
   470 ;;   _get_func
   471 ;;     _ClearLCDScreen
   472 ;;       _WriteCommandToLCD
   473 ;;         _ToggleEpinOfLCD
   474 ;;     _DispError
   475 ;;       _ClearLCDScreen
   476 ;;         _WriteCommandToLCD
   477 ;;           _ToggleEpinOfLCD
   478 ;;       _WriteStringToLCD
   479 ;;         _WriteDataToLCD
   480 ;;           _ToggleEpinOfLCD
   481 ;;   _disp_num
   482 ;;     ___wmul
   483 ;;     _WriteDataToLCD
   484 ;;       _ToggleEpinOfLCD
   485 ;;     ___awdiv
   486 ;;     ___bmul
   487 ;;   ___wmul
   488 ;;   ___awdiv
   489 ;;   _DispError
   490 ;;     _ClearLCDScreen
   491 ;;       _WriteCommandToLCD
   492 ;;         _ToggleEpinOfLCD
   493 ;;     _WriteStringToLCD
   494 ;;       _WriteDataToLCD
   495 ;;         _ToggleEpinOfLCD
   496 ;;
   497 ;; Address spaces:
   498 ;;Name               Size   Autos  Total    Cost      Usage
   499 ;;BITCOMMON            E      0       0       0        0.0%
   500 ;;EEDATA             100      0       0       0        0.0%
   501 ;;NULL                 0      0       0       0        0.0%
   502 ;;CODE                 0      0       0       0        0.0%
   503 ;;COMMON               E      D       D       1       92.9%
   504 ;;BITSFR0              0      0       0       1        0.0%
   505 ;;SFR0                 0      0       0       1        0.0%
   506 ;;BITSFR1              0      0       0       2        0.0%
   507 ;;SFR1                 0      0       0       2        0.0%
   508 ;;STACK                0      0       5       2        0.0%
   509 ;;ABS                  0      0       0       3        0.0%
   510 ;;BITBANK0            50      0       0       4        0.0%
   511 ;;BITSFR3              0      0       0       4        0.0%
   512 ;;SFR3                 0      0       0       4        0.0%
   513 ;;BANK0               50      6       6       5        7.5%
   514 ;;BITSFR2              0      0       0       5        0.0%
   515 ;;SFR2                 0      0       0       5        0.0%
   516 ;;BITBANK1            50      0       0       6        0.0%
   517 ;;BANK1               50      0       0       7        0.0%
   518 ;;BITBANK3            60      0       0       8        0.0%
   519 ;;BANK3               60      0       0       9        0.0%
   520 ;;BITBANK2            60      0       0      10        0.0%
   521 ;;BANK2               60      0       0      11        0.0%
   522 ;;DATA                 0      0       0      12        0.0%
   523                           
   524                           
   525 ;; *************** function _main *****************
   526 ;; Defined at:
   527 ;;		line 16 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\Main.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;		None
   530 ;; Auto vars:     Size  Location     Type
   531 ;;  num2            2    3[BANK0 ] int 
   532 ;;  num1            2    1[BANK0 ] int 
   533 ;;  key             1    5[BANK0 ] unsigned char 
   534 ;;  func            1    0[BANK0 ] unsigned char 
   535 ;; Return value:  Size  Location     Type
   536 ;;		None               void
   537 ;; Registers used:
   538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : 17F/0
   541 ;;		On exit  : 60/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   544 ;;      Params:         0       0       0       0       0
   545 ;;      Locals:         0       6       0       0       0
   546 ;;      Temps:          0       0       0       0       0
   547 ;;      Totals:         0       6       0       0       0
   548 ;;Total ram usage:        6 bytes
   549 ;; Hardware stack levels required when called:    5
   550 ;; This function calls:
   551 ;;		_InitKeypad
   552 ;;		_InitLCD
   553 ;;		_GetKey
   554 ;;		_ClearLCDScreen
   555 ;;		_WriteDataToLCD
   556 ;;		_get_num
   557 ;;		_get_func
   558 ;;		_disp_num
   559 ;;		___wmul
   560 ;;		___awdiv
   561 ;;		_DispError
   562 ;; This function is called by:
   563 ;;		Startup code after reset
   564 ;; This function uses a non-reentrant model
   565 ;;
   566  03D4                     _main:	
   567                           
   568                           ;Main.c: 22: InitKeypad();
   569                           
   570                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   571  03D4  120A  118A  23CE   	fcall	_InitKeypad
      +       120A  118A         
   572                           
   573                           ;Main.c: 23: InitLCD();
   574  03D9  120A  118A  275A   	fcall	_InitLCD
      +       120A  118A         
   575  03DE                     l3996:	
   576                           
   577                           ;Main.c: 26: {
   578                           ;Main.c: 28: key = GetKey();
   579  03DE  120A  118A  24C1   	fcall	_GetKey
      +       120A  118A         
   580  03E3  1283               	bcf	3,5	;RP0=0, select bank0
   581  03E4  1303               	bcf	3,6	;RP1=0, select bank0
   582  03E5  00A5               	movwf	main@key
   583                           
   584                           ;Main.c: 29: ClearLCDScreen();
   585  03E6  120A  118A  27E1   	fcall	_ClearLCDScreen
      +       120A  118A         
   586                           
   587                           ;Main.c: 30: WriteDataToLCD(key);
   588  03EB  1283               	bcf	3,5	;RP0=0, select bank0
   589  03EC  1303               	bcf	3,6	;RP1=0, select bank0
   590  03ED  0825               	movf	main@key,w
   591  03EE  120A  118A  26DC   	fcall	_WriteDataToLCD
      +       120A  118A         
   592                           
   593                           ;Main.c: 31: num1 = get_num(key);
   594  03F3  1283               	bcf	3,5	;RP0=0, select bank0
   595  03F4  1303               	bcf	3,6	;RP1=0, select bank0
   596  03F5  0825               	movf	main@key,w
   597  03F6  120A  118A  262D   	fcall	_get_num
      +       120A  118A         
   598  03FB  0878               	movf	?_get_num+1,w
   599  03FC  1283               	bcf	3,5	;RP0=0, select bank0
   600  03FD  1303               	bcf	3,6	;RP1=0, select bank0
   601  03FE  00A2               	movwf	main@num1+1
   602  03FF  0877               	movf	?_get_num,w
   603  0400  00A1               	movwf	main@num1
   604                           
   605                           ;Main.c: 33: if(num1!=13)
   606  0401  3A0D               	xorlw	13
   607  0402  0422               	iorwf	main@num1+1,w
   608  0403  1903               	skipnz
   609  0404  2BDE               	goto	l3996
   610                           
   611                           ;Main.c: 34: {
   612                           ;Main.c: 36: key = GetKey();
   613  0405  120A  118A  24C1   	fcall	_GetKey
      +       120A  118A         
   614  040A  1283               	bcf	3,5	;RP0=0, select bank0
   615  040B  1303               	bcf	3,6	;RP1=0, select bank0
   616  040C  00A5               	movwf	main@key
   617                           
   618                           ;Main.c: 37: WriteDataToLCD(key);
   619  040D  120A  118A  26DC   	fcall	_WriteDataToLCD
      +       120A  118A         
   620                           
   621                           ;Main.c: 38: func = get_func(key);
   622  0412  1283               	bcf	3,5	;RP0=0, select bank0
   623  0413  1303               	bcf	3,6	;RP1=0, select bank0
   624  0414  0825               	movf	main@key,w
   625  0415  120A  118A  2610   	fcall	_get_func
      +       120A  118A         
   626  041A  1283               	bcf	3,5	;RP0=0, select bank0
   627  041B  1303               	bcf	3,6	;RP1=0, select bank0
   628  041C  00A0               	movwf	main@func
   629                           
   630                           ;Main.c: 40: if(func!='e')
   631  041D  3A65               	xorlw	101
   632  041E  1903               	skipnz
   633  041F  2BDE               	goto	l3996
   634                           
   635                           ;Main.c: 41: {
   636                           ;Main.c: 43: key = GetKey();
   637  0420  120A  118A  24C1   	fcall	_GetKey
      +       120A  118A         
   638  0425  1283               	bcf	3,5	;RP0=0, select bank0
   639  0426  1303               	bcf	3,6	;RP1=0, select bank0
   640  0427  00A5               	movwf	main@key
   641                           
   642                           ;Main.c: 44: WriteDataToLCD(key);
   643  0428  120A  118A  26DC   	fcall	_WriteDataToLCD
      +       120A  118A         
   644                           
   645                           ;Main.c: 45: num2 = get_num(key);
   646  042D  1283               	bcf	3,5	;RP0=0, select bank0
   647  042E  1303               	bcf	3,6	;RP1=0, select bank0
   648  042F  0825               	movf	main@key,w
   649  0430  120A  118A  262D   	fcall	_get_num
      +       120A  118A         
   650  0435  0878               	movf	?_get_num+1,w
   651  0436  1283               	bcf	3,5	;RP0=0, select bank0
   652  0437  1303               	bcf	3,6	;RP1=0, select bank0
   653  0438  00A4               	movwf	main@num2+1
   654  0439  0877               	movf	?_get_num,w
   655  043A  00A3               	movwf	main@num2
   656                           
   657                           ;Main.c: 47: if(num2!=13)
   658  043B  3A0D               	xorlw	13
   659  043C  0424               	iorwf	main@num2+1,w
   660  043D  1903               	skipnz
   661  043E  2BDE               	goto	l3996
   662                           
   663                           ;Main.c: 48: {
   664                           ;Main.c: 50: key = GetKey();
   665  043F  120A  118A  24C1   	fcall	_GetKey
      +       120A  118A         
   666  0444  1283               	bcf	3,5	;RP0=0, select bank0
   667  0445  1303               	bcf	3,6	;RP1=0, select bank0
   668  0446  00A5               	movwf	main@key
   669                           
   670                           ;Main.c: 51: WriteDataToLCD(key);
   671  0447  120A  118A  26DC   	fcall	_WriteDataToLCD
      +       120A  118A         
   672                           
   673                           ;Main.c: 53: if(key == '=')
   674  044C  1283               	bcf	3,5	;RP0=0, select bank0
   675  044D  1303               	bcf	3,6	;RP1=0, select bank0
   676  044E  0825               	movf	main@key,w
   677  044F  3A3D               	xorlw	61
   678  0450  1903               	btfsc	3,2
   679  0451  2CA1               	goto	l4040
   680  0452  2CAF               	goto	l4042
   681  0453                     l4030:	
   682  0453  0822               	movf	main@num1+1,w
   683  0454  00F9               	movwf	?_disp_num+1
   684  0455  0821               	movf	main@num1,w
   685  0456  00F8               	movwf	?_disp_num
   686  0457  0823               	movf	main@num2,w
   687  0458  07F8               	addwf	?_disp_num,f
   688  0459  1803               	skipnc
   689  045A  0AF9               	incf	?_disp_num+1,f
   690  045B  0824               	movf	main@num2+1,w
   691  045C  07F9               	addwf	?_disp_num+1,f
   692  045D  120A  118A  26A7   	fcall	_disp_num
      +       120A  118A         
   693  0462  2BDE               	goto	l3996
   694  0463                     l4032:	
   695  0463  0822               	movf	main@num1+1,w
   696  0464  00F9               	movwf	?_disp_num+1
   697  0465  0821               	movf	main@num1,w
   698  0466  00F8               	movwf	?_disp_num
   699  0467  0823               	movf	main@num2,w
   700  0468  02F8               	subwf	?_disp_num,f
   701  0469  0824               	movf	main@num2+1,w
   702  046A  1C03               	skipc
   703  046B  03F9               	decf	?_disp_num+1,f
   704  046C  02F9               	subwf	?_disp_num+1,f
   705  046D  120A  118A  26A7   	fcall	_disp_num
      +       120A  118A         
   706  0472  2BDE               	goto	l3996
   707  0473                     l4034:	
   708  0473  0822               	movf	main@num1+1,w
   709  0474  00F1               	movwf	?___wmul+1
   710  0475  0821               	movf	main@num1,w
   711  0476  00F0               	movwf	?___wmul
   712  0477  0824               	movf	main@num2+1,w
   713  0478  00F3               	movwf	?___wmul+3
   714  0479  0823               	movf	main@num2,w
   715  047A  00F2               	movwf	?___wmul+2
   716  047B  120A  118A  26FC   	fcall	___wmul
      +       120A  118A         
   717  0480  0871               	movf	?___wmul+1,w
   718  0481  00F9               	movwf	?_disp_num+1
   719  0482  0870               	movf	?___wmul,w
   720  0483  00F8               	movwf	?_disp_num
   721  0484  120A  118A  26A7   	fcall	_disp_num
      +       120A  118A         
   722  0489  2BDE               	goto	l3996
   723  048A                     l4036:	
   724  048A  0824               	movf	main@num2+1,w
   725  048B  00F1               	movwf	?___awdiv+1
   726  048C  0823               	movf	main@num2,w
   727  048D  00F0               	movwf	?___awdiv
   728  048E  0822               	movf	main@num1+1,w
   729  048F  00F3               	movwf	?___awdiv+3
   730  0490  0821               	movf	main@num1,w
   731  0491  00F2               	movwf	?___awdiv+2
   732  0492  120A  118A  2715   	fcall	___awdiv
      +       120A  118A         
   733  0497  0871               	movf	?___awdiv+1,w
   734  0498  00F9               	movwf	?_disp_num+1
   735  0499  0870               	movf	?___awdiv,w
   736  049A  00F8               	movwf	?_disp_num
   737  049B  120A  118A  26A7   	fcall	_disp_num
      +       120A  118A         
   738  04A0  2BDE               	goto	l3996
   739  04A1                     l4040:	
   740  04A1  0820               	movf	main@func,w
   741                           
   742                           ; Switch size 1, requested type "space"
   743                           ; Number of cases is 4, Range of values is 43 to 120
   744                           ; switch strategies available:
   745                           ; Name         Instructions Cycles
   746                           ; simple_byte           13     7 (average)
   747                           ; direct_byte          245    11 (fixed)
   748                           ; jumptable            263     9 (fixed)
   749                           ;	Chosen strategy is simple_byte
   750  04A2  3A2B               	xorlw	43	; case 43
   751  04A3  1903               	skipnz
   752  04A4  2C53               	goto	l4030
   753  04A5  3A06               	xorlw	6	; case 45
   754  04A6  1903               	skipnz
   755  04A7  2C63               	goto	l4032
   756  04A8  3A02               	xorlw	2	; case 47
   757  04A9  1903               	skipnz
   758  04AA  2C8A               	goto	l4036
   759  04AB  3A57               	xorlw	87	; case 120
   760  04AC  1903               	skipnz
   761  04AD  2C73               	goto	l4034
   762  04AE  2CC0               	goto	l2040
   763  04AF                     l4042:	
   764                           
   765                           ;Main.c: 63: else
   766                           ;Main.c: 64: {
   767                           ;Main.c: 65: if(key == 'C')
   768  04AF  0825               	movf	main@key,w
   769  04B0  3A43               	xorlw	67
   770  04B1  1D03               	skipz
   771  04B2  2CB9               	goto	l4046
   772                           
   773                           ;Main.c: 66: ClearLCDScreen();
   774  04B3  120A  118A  27E1   	fcall	_ClearLCDScreen
      +       120A  118A         
   775  04B8  2BDE               	goto	l3996
   776  04B9                     l4046:	
   777                           
   778                           ;Main.c: 67: else
   779                           ;Main.c: 68: DispError(0);
   780  04B9  01F5               	clrf	?_DispError
   781  04BA  01F6               	clrf	?_DispError+1
   782  04BB  120A  118A  2679   	fcall	_DispError
      +       120A  118A         
   783  04C0                     l2040:	
   784  04C0  2BDE               	goto	l3996
   785  04C1                     __end_of_main:	
   786                           
   787                           	psect	text355
   788  0610                     __ptext355:	
   789 ;; =============== function _main ends ============
   790                           
   791                           
   792 ;; *************** function _get_func *****************
   793 ;; Defined at:
   794 ;;		line 107 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\Main.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;  chf             1    wreg     unsigned char 
   797 ;; Auto vars:     Size  Location     Type
   798 ;;  chf             1    7[COMMON] unsigned char 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      unsigned char 
   801 ;; Registers used:
   802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 60/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   808 ;;      Params:         0       0       0       0       0
   809 ;;      Locals:         1       0       0       0       0
   810 ;;      Temps:          0       0       0       0       0
   811 ;;      Totals:         1       0       0       0       0
   812 ;;Total ram usage:        1 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    4
   815 ;; This function calls:
   816 ;;		_ClearLCDScreen
   817 ;;		_DispError
   818 ;; This function is called by:
   819 ;;		_main
   820 ;; This function uses a non-reentrant model
   821 ;;
   822  0610                     _get_func:	
   823                           
   824                           ; Regs used in _get_func: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   825                           ;get_func@chf stored from wreg
   826  0610  00F7               	movwf	get_func@chf
   827                           
   828                           ;Main.c: 108: if(chf=='C')
   829  0611  3A43               	xorlw	67
   830  0612  1D03               	skipz
   831  0613  2E27               	goto	l3968
   832                           
   833                           ;Main.c: 109: {
   834                           ;Main.c: 110: ClearLCDScreen();
   835  0614  27E1               	fcall	_ClearLCDScreen
   836  0615  3465               	retlw	101
   837  0616                     l3970:	
   838  0616  0877               	movf	get_func@chf,w
   839  0617  3A2D               	xorlw	45
   840  0618  1903               	skipnz
   841  0619  2E2B               	goto	l3982
   842  061A  0877               	movf	get_func@chf,w
   843  061B  3A78               	xorlw	120
   844  061C  1903               	skipnz
   845  061D  2E2B               	goto	l3982
   846  061E  0877               	movf	get_func@chf,w
   847  061F  3A2F               	xorlw	47
   848  0620  1903               	skipnz
   849  0621  2E2B               	goto	l3982
   850                           
   851                           ;Main.c: 115: {
   852                           ;Main.c: 116: DispError(1);
   853  0622  01F5               	clrf	?_DispError
   854  0623  0AF5               	incf	?_DispError,f
   855  0624  01F6               	clrf	?_DispError+1
   856  0625  2679               	fcall	_DispError
   857                           
   858                           ;Main.c: 111: return 'e';
   859  0626  3465               	retlw	101
   860  0627                     l3968:	
   861                           
   862                           ;Main.c: 112: }
   863                           ;Main.c: 114: if( chf!='+' && chf!='-' && chf!='x' && chf!='/' )
   864  0627  0877               	movf	get_func@chf,w
   865  0628  3A2B               	xorlw	43
   866  0629  1D03               	btfss	3,2
   867  062A  2E16               	goto	l3970
   868  062B                     l3982:	
   869                           
   870                           ;Main.c: 118: }
   871                           ;Main.c: 120: return chf;
   872  062B  0877               	movf	get_func@chf,w
   873  062C  0008               	return
   874  062D                     __end_of_get_func:	
   875  062D                     __ptext356:	
   876 ;; =============== function _get_func ends ============
   877                           
   878                           
   879 ;; *************** function _get_num *****************
   880 ;; Defined at:
   881 ;;		line 84 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\Main.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;  ch              1    wreg     unsigned char 
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  ch              1    9[COMMON] unsigned char 
   886 ;;  num             2   10[COMMON] int 
   887 ;; Return value:  Size  Location     Type
   888 ;;                  2    7[COMMON] int 
   889 ;; Registers used:
   890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : 60/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   896 ;;      Params:         2       0       0       0       0
   897 ;;      Locals:         3       0       0       0       0
   898 ;;      Temps:          0       0       0       0       0
   899 ;;      Totals:         5       0       0       0       0
   900 ;;Total ram usage:        5 bytes
   901 ;; Hardware stack levels used:    1
   902 ;; Hardware stack levels required when called:    4
   903 ;; This function calls:
   904 ;;		_ClearLCDScreen
   905 ;;		_DispError
   906 ;; This function is called by:
   907 ;;		_main
   908 ;; This function uses a non-reentrant model
   909 ;;
   910  062D                     _get_num:	
   911                           
   912                           ; Regs used in _get_num: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   913                           ;get_num@ch stored from wreg
   914  062D  00F9               	movwf	get_num@ch
   915                           
   916                           ;Main.c: 87: switch(ch)
   917  062E  2E51               	goto	l3954
   918  062F                     l3924:	
   919  062F  01FA               	clrf	get_num@num
   920  0630  2E49               	goto	L10
   921  0631                     l3926:	
   922  0631  01FA               	clrf	get_num@num
   923  0632  0AFA               	incf	get_num@num,f
   924  0633  2E49               	goto	L10
   925  0634                     l3928:	
   926  0634  3002               	movlw	2
   927  0635  2E48               	goto	L11
   928  0636                     l3930:	
   929  0636  3003               	movlw	3
   930  0637  2E48               	goto	L11
   931  0638                     l3932:	
   932  0638  3004               	movlw	4
   933  0639  2E48               	goto	L11
   934  063A                     l3934:	
   935  063A  3005               	movlw	5
   936  063B  2E48               	goto	L11
   937  063C                     l3936:	
   938  063C  3006               	movlw	6
   939  063D  2E48               	goto	L11
   940  063E                     l3938:	
   941  063E  3007               	movlw	7
   942  063F  2E48               	goto	L11
   943  0640                     l3940:	
   944  0640  3008               	movlw	8
   945  0641  2E48               	goto	L11
   946  0642                     l3942:	
   947  0642  3009               	movlw	9
   948  0643  2E48               	goto	L11
   949  0644                     l3944:	
   950  0644  27E1  120A  118A   	fcall	_ClearLCDScreen
   951  0647                     l3946:	
   952  0647  300D               	movlw	13
   953  0648                     L11:	
   954  0648  00FA               	movwf	get_num@num
   955  0649                     L10:	
   956  0649  01FB               	clrf	get_num@num+1
   957  064A  2E74               	goto	l3956
   958  064B                     l3948:	
   959  064B  01F5               	clrf	?_DispError
   960  064C  01F6               	clrf	?_DispError+1
   961  064D  2679  120A  118A   	fcall	_DispError
   962  0650  2E47               	goto	l3946
   963  0651                     l3954:	
   964  0651  0879               	movf	get_num@ch,w
   965                           
   966                           ; Switch size 1, requested type "space"
   967                           ; Number of cases is 11, Range of values is 48 to 67
   968                           ; switch strategies available:
   969                           ; Name         Instructions Cycles
   970                           ; simple_byte           34    18 (average)
   971                           ; direct_byte           71    11 (fixed)
   972                           ; jumptable            263     9 (fixed)
   973                           ;	Chosen strategy is simple_byte
   974  0652  3A30               	xorlw	48	; case 48
   975  0653  1903               	skipnz
   976  0654  2E2F               	goto	l3924
   977  0655  3A01               	xorlw	1	; case 49
   978  0656  1903               	skipnz
   979  0657  2E31               	goto	l3926
   980  0658  3A03               	xorlw	3	; case 50
   981  0659  1903               	skipnz
   982  065A  2E34               	goto	l3928
   983  065B  3A01               	xorlw	1	; case 51
   984  065C  1903               	skipnz
   985  065D  2E36               	goto	l3930
   986  065E  3A07               	xorlw	7	; case 52
   987  065F  1903               	skipnz
   988  0660  2E38               	goto	l3932
   989  0661  3A01               	xorlw	1	; case 53
   990  0662  1903               	skipnz
   991  0663  2E3A               	goto	l3934
   992  0664  3A03               	xorlw	3	; case 54
   993  0665  1903               	skipnz
   994  0666  2E3C               	goto	l3936
   995  0667  3A01               	xorlw	1	; case 55
   996  0668  1903               	skipnz
   997  0669  2E3E               	goto	l3938
   998  066A  3A0F               	xorlw	15	; case 56
   999  066B  1903               	skipnz
  1000  066C  2E40               	goto	l3940
  1001  066D  3A01               	xorlw	1	; case 57
  1002  066E  1903               	skipnz
  1003  066F  2E42               	goto	l3942
  1004  0670  3A7A               	xorlw	122	; case 67
  1005  0671  1903               	skipnz
  1006  0672  2E44               	goto	l3944
  1007  0673  2E4B               	goto	l3948
  1008  0674                     l3956:	
  1009                           
  1010                           ;Main.c: 103: return num;
  1011  0674  087B               	movf	get_num@num+1,w
  1012  0675  00F8               	movwf	?_get_num+1
  1013  0676  087A               	movf	get_num@num,w
  1014  0677  00F7               	movwf	?_get_num
  1015  0678  0008               	return
  1016  0679                     __end_of_get_num:	
  1017  0679                     __ptext357:	
  1018 ;; =============== function _get_num ends ============
  1019                           
  1020                           
  1021 ;; *************** function _DispError *****************
  1022 ;; Defined at:
  1023 ;;		line 125 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\Main.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;  numb            2    5[COMMON] int 
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;		None               void
  1030 ;; Registers used:
  1031 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1032 ;; Tracked objects:
  1033 ;;		On entry : 60/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1037 ;;      Params:         2       0       0       0       0
  1038 ;;      Locals:         0       0       0       0       0
  1039 ;;      Temps:          0       0       0       0       0
  1040 ;;      Totals:         2       0       0       0       0
  1041 ;;Total ram usage:        2 bytes
  1042 ;; Hardware stack levels used:    1
  1043 ;; Hardware stack levels required when called:    3
  1044 ;; This function calls:
  1045 ;;		_ClearLCDScreen
  1046 ;;		_WriteStringToLCD
  1047 ;; This function is called by:
  1048 ;;		_main
  1049 ;;		_get_num
  1050 ;;		_get_func
  1051 ;; This function uses a non-reentrant model
  1052 ;;
  1053  0679                     _DispError:	
  1054                           
  1055                           ;Main.c: 126: ClearLCDScreen();
  1056                           
  1057                           ; Regs used in _DispError: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1058  0679  27E1  120A  118A   	fcall	_ClearLCDScreen
  1059                           
  1060                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1061                           ; Switch size 1, requested type "space"
  1062                           ; Number of cases is 1, Range of values is 0 to 0
  1063                           ; switch strategies available:
  1064                           ; Name         Instructions Cycles
  1065                           ; simple_byte            4     3 (average)
  1066                           ; direct_byte           11     8 (fixed)
  1067                           ; jumptable            260     6 (fixed)
  1068                           ; rangetable             5     6 (fixed)
  1069                           ; spacedrange            8     9 (fixed)
  1070                           ; locatedrange           1     3 (fixed)
  1071                           ;	Chosen strategy is simple_byte
  1072                           
  1073                           ;Main.c: 128: switch(numb)
  1074  067C  0876               	movf	DispError@numb+1,w
  1075  067D  3A00               	xorlw	0	; case 0
  1076  067E  1903               	skipnz
  1077  067F  2E87               	goto	l4068
  1078  0680  2E85               	goto	l3912
  1079  0681                     l3908:	
  1080  0681  3010               	movlw	(STR_1-__stringbase)& (0+255)
  1081  0682  2E90               	ljmp	_WriteStringToLCD
  1082  0683                     l3910:	
  1083  0683  3001               	movlw	(STR_2-__stringbase)& (0+255)
  1084  0684  2E90               	ljmp	_WriteStringToLCD
  1085  0685                     l3912:	
  1086  0685  3010               	movlw	(STR_1-__stringbase)& (0+255)
  1087  0686  2E90               	ljmp	_WriteStringToLCD
  1088  0687                     l4068:	
  1089                           
  1090                           ; Switch size 1, requested type "space"
  1091                           ; Number of cases is 2, Range of values is 0 to 1
  1092                           ; switch strategies available:
  1093                           ; Name         Instructions Cycles
  1094                           ; simple_byte            7     4 (average)
  1095                           ; direct_byte           14     8 (fixed)
  1096                           ; jumptable            260     6 (fixed)
  1097                           ; rangetable             6     6 (fixed)
  1098                           ; spacedrange           10     9 (fixed)
  1099                           ; locatedrange           2     3 (fixed)
  1100                           ;	Chosen strategy is simple_byte
  1101  0687  0875               	movf	DispError@numb,w
  1102  0688  3A00               	xorlw	0	; case 0
  1103  0689  1903               	skipnz
  1104  068A  2E81               	goto	l3908
  1105  068B  3A01               	xorlw	1	; case 1
  1106  068C  1903               	skipnz
  1107  068D  2E83               	goto	l3910
  1108  068E  2E85               	goto	l3912
  1109  068F  0008               	return
  1110  0690                     __end_of_DispError:	
  1111  0690                     __ptext360:	
  1112 ;; =============== function _ClearLCDScreen ends ============
  1113                           
  1114                           
  1115 ;; *************** function _WriteStringToLCD *****************
  1116 ;; Defined at:
  1117 ;;		line 92 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\LCD.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;  s               1    wreg     PTR const unsigned char 
  1120 ;;		 -> STR_3(12), STR_2(15), STR_1(12), 
  1121 ;; Auto vars:     Size  Location     Type
  1122 ;;  s               1    3[COMMON] PTR const unsigned char 
  1123 ;;		 -> STR_3(12), STR_2(15), STR_1(12), 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;		None               void
  1126 ;; Registers used:
  1127 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1133 ;;      Params:         0       0       0       0       0
  1134 ;;      Locals:         1       0       0       0       0
  1135 ;;      Temps:          0       0       0       0       0
  1136 ;;      Totals:         1       0       0       0       0
  1137 ;;Total ram usage:        1 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    2
  1140 ;; This function calls:
  1141 ;;		_WriteDataToLCD
  1142 ;; This function is called by:
  1143 ;;		_DispError
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146  0690                     _WriteStringToLCD:	
  1147                           
  1148                           ; Regs used in _WriteStringToLCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1149                           ;WriteStringToLCD@s stored from wreg
  1150  0690  00F3               	movwf	WriteStringToLCD@s
  1151  0691                     l3890:	
  1152                           ;LCD.c: 93: while(*s)
  1153                           
  1154  0691  0873               	movf	WriteStringToLCD@s,w
  1155  0692  0084               	movwf	4
  1156  0693  120A  118A  2003   	fcall	stringdir
      +       120A  118A         
  1157  0698  3800               	iorlw	0
  1158  0699  1903               	btfsc	3,2
  1159  069A  0008               	return
  1160                           
  1161                           ;LCD.c: 94: WriteDataToLCD(*s++);
  1162  069B  0873               	movf	WriteStringToLCD@s,w
  1163  069C  0084               	movwf	4
  1164  069D  120A  118A  2003   	fcall	stringdir
      +       120A  118A         
  1165  06A2  26DC  120A  118A   	fcall	_WriteDataToLCD
  1166  06A5  0AF3               	incf	WriteStringToLCD@s,f
  1167  06A6  2E91               	goto	l3890
  1168  06A7                     __end_of_WriteStringToLCD:	
  1169  06A7                     __ptext358:	
  1170 ;; =============== function _DispError ends ============
  1171                           
  1172                           
  1173 ;; *************** function _disp_num *****************
  1174 ;; Defined at:
  1175 ;;		line 137 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\Main.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;  numb            2    8[COMMON] int 
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  TenthDigit      1   12[COMMON] unsigned char 
  1180 ;;  UnitDigit       1   11[COMMON] unsigned char 
  1181 ;; Return value:  Size  Location     Type
  1182 ;;		None               void
  1183 ;; Registers used:
  1184 ;;		wreg, status,2, status,0, pclath, cstack
  1185 ;; Tracked objects:
  1186 ;;		On entry : 60/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1190 ;;      Params:         2       0       0       0       0
  1191 ;;      Locals:         2       0       0       0       0
  1192 ;;      Temps:          1       0       0       0       0
  1193 ;;      Totals:         5       0       0       0       0
  1194 ;;Total ram usage:        5 bytes
  1195 ;; Hardware stack levels used:    1
  1196 ;; Hardware stack levels required when called:    2
  1197 ;; This function calls:
  1198 ;;		___wmul
  1199 ;;		_WriteDataToLCD
  1200 ;;		___awdiv
  1201 ;;		___bmul
  1202 ;; This function is called by:
  1203 ;;		_main
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206  06A7                     _disp_num:	
  1207                           
  1208                           ;Main.c: 139: unsigned char TenthDigit = 0;
  1209                           
  1210                           ; Regs used in _disp_num: [wreg+status,2+status,0+pclath+cstack]
  1211  06A7  01FC               	clrf	disp_num@TenthDigit
  1212                           
  1213                           ;Main.c: 141: if(numb<0)
  1214  06A8  1FF9               	btfss	disp_num@numb+1,7
  1215  06A9  2EBC               	goto	l2087
  1216                           
  1217                           ;Main.c: 142: {
  1218                           ;Main.c: 143: numb = -1*numb;
  1219  06AA  30FF               	movlw	255
  1220  06AB  00F0               	movwf	?___wmul
  1221  06AC  00F1               	movwf	?___wmul+1
  1222  06AD  0879               	movf	disp_num@numb+1,w
  1223  06AE  00F3               	movwf	?___wmul+3
  1224  06AF  0878               	movf	disp_num@numb,w
  1225  06B0  00F2               	movwf	?___wmul+2
  1226  06B1  26FC  120A  118A   	fcall	___wmul
  1227  06B4  0871               	movf	?___wmul+1,w
  1228  06B5  00F9               	movwf	disp_num@numb+1
  1229  06B6  0870               	movf	?___wmul,w
  1230  06B7  00F8               	movwf	disp_num@numb
  1231                           
  1232                           ;Main.c: 144: WriteDataToLCD('-');
  1233  06B8  302D               	movlw	45
  1234  06B9  26DC  120A  118A   	fcall	_WriteDataToLCD
  1235  06BC                     l2087:	
  1236                           
  1237                           ;Main.c: 145: }
  1238                           ;Main.c: 147: TenthDigit = (numb/10);
  1239  06BC  300A               	movlw	10
  1240  06BD  00F0               	movwf	?___awdiv
  1241  06BE  01F1               	clrf	?___awdiv+1
  1242  06BF  0879               	movf	disp_num@numb+1,w
  1243  06C0  00F3               	movwf	?___awdiv+3
  1244  06C1  0878               	movf	disp_num@numb,w
  1245  06C2  00F2               	movwf	?___awdiv+2
  1246  06C3  2715  120A  118A   	fcall	___awdiv
  1247  06C6  0870               	movf	?___awdiv,w
  1248  06C7  00FC               	movwf	disp_num@TenthDigit
  1249                           
  1250                           ;Main.c: 149: if( TenthDigit != 0)
  1251  06C8  087C               	movf	disp_num@TenthDigit,w
  1252  06C9  1903               	btfsc	3,2
  1253  06CA  2ED0               	goto	l2088
  1254                           
  1255                           ;Main.c: 150: WriteDataToLCD(TenthDigit+0x30);
  1256  06CB  087C               	movf	disp_num@TenthDigit,w
  1257  06CC  3E30               	addlw	48
  1258  06CD  26DC  120A  118A   	fcall	_WriteDataToLCD
  1259  06D0                     l2088:	
  1260                           
  1261                           ;Main.c: 152: UnitDigit = numb - TenthDigit*10;
  1262  06D0  30F6               	movlw	246
  1263  06D1  00F0               	movwf	?___bmul
  1264  06D2  087C               	movf	disp_num@TenthDigit,w
  1265  06D3  26EE  120A  118A   	fcall	___bmul
  1266  06D6  00FA               	movwf	??_disp_num
  1267  06D7  0878               	movf	disp_num@numb,w
  1268  06D8  077A               	addwf	??_disp_num,w
  1269  06D9  00FB               	movwf	disp_num@UnitDigit
  1270                           
  1271                           ;Main.c: 154: WriteDataToLCD(UnitDigit+0x30);
  1272  06DA  3E30               	addlw	48
  1273  06DB  2EDC               	ljmp	_WriteDataToLCD
  1274  06DC                     __end_of_disp_num:	
  1275  06DC                     __ptext362:	
  1276 ;; =============== function _InitLCD ends ============
  1277                           
  1278                           
  1279 ;; *************** function _WriteDataToLCD *****************
  1280 ;; Defined at:
  1281 ;;		line 28 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\LCD.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;  LCDChar         1    wreg     unsigned char 
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;  LCDChar         1    2[COMMON] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;		None               void
  1288 ;; Registers used:
  1289 ;;		wreg, status,2, status,0, pclath, cstack
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1295 ;;      Params:         0       0       0       0       0
  1296 ;;      Locals:         1       0       0       0       0
  1297 ;;      Temps:          0       0       0       0       0
  1298 ;;      Totals:         1       0       0       0       0
  1299 ;;Total ram usage:        1 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; Hardware stack levels required when called:    1
  1302 ;; This function calls:
  1303 ;;		_ToggleEpinOfLCD
  1304 ;; This function is called by:
  1305 ;;		_WriteStringToLCD
  1306 ;;		_main
  1307 ;;		_disp_num
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310  06DC                     _WriteDataToLCD:	
  1311                           
  1312                           ; Regs used in _WriteDataToLCD: [wreg+status,2+status,0+pclath+cstack]
  1313                           ;WriteDataToLCD@LCDChar stored from wreg
  1314  06DC  00F2               	movwf	WriteDataToLCD@LCDChar
  1315  06DD  27FD               	call	PL4	;select bank 0
  1316                           
  1317                           ;LCD.c: 29: RD1 = 1;
  1318  06DE  300F               	movlw	15
  1319  06DF  1488               	bsf	8,1
  1320                           
  1321                           ;LCD.c: 31: PORTD &= 0x0F;
  1322  06E0  0588               	andwf	8,f	;volatile
  1323                           
  1324                           ;LCD.c: 32: PORTD |= (LCDChar&0xF0);
  1325  06E1  0872               	movf	WriteDataToLCD@LCDChar,w
  1326  06E2  39F0               	andlw	240
  1327  06E3  0488               	iorwf	8,f	;volatile
  1328                           
  1329                           ;LCD.c: 33: ToggleEpinOfLCD();
  1330  06E4  27B9  120A  118A   	fcall	_ToggleEpinOfLCD
  1331                           
  1332                           ;LCD.c: 35: PORTD &= 0x0F;
  1333  06E7  300F               	movlw	15
  1334  06E8  27FD               	call	PL4	;select bank 0
  1335  06E9  0588               	andwf	8,f	;volatile
  1336                           
  1337                           ;LCD.c: 36: PORTD |= ((LCDChar<<4)&0xF0);
  1338  06EA  0E72               	swapf	WriteDataToLCD@LCDChar,w
  1339  06EB  39F0               	andlw	240
  1340  06EC  0488               	iorwf	8,f	;volatile
  1341                           
  1342                           ;LCD.c: 37: ToggleEpinOfLCD();
  1343  06ED  2FB9               	ljmp	l3804
  1344  06EE                     __end_of_WriteDataToLCD:	
  1345  06EE                     __ptext369:	
  1346 ;; =============== function ___wmul ends ============
  1347                           
  1348                           
  1349 ;; *************** function ___bmul *****************
  1350 ;; Defined at:
  1351 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\bmul.c"
  1352 ;; Parameters:    Size  Location     Type
  1353 ;;  multiplier      1    wreg     unsigned char 
  1354 ;;  multiplicand    1    0[COMMON] unsigned char 
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;  multiplier      1    2[COMMON] unsigned char 
  1357 ;;  product         1    1[COMMON] unsigned char 
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  1    wreg      unsigned char 
  1360 ;; Registers used:
  1361 ;;		wreg, status,2, status,0
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: FFFFF/0
  1366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1367 ;;      Params:         1       0       0       0       0
  1368 ;;      Locals:         2       0       0       0       0
  1369 ;;      Temps:          0       0       0       0       0
  1370 ;;      Totals:         3       0       0       0       0
  1371 ;;Total ram usage:        3 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; This function calls:
  1374 ;;		Nothing
  1375 ;; This function is called by:
  1376 ;;		_disp_num
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379  06EE                     ___bmul:	
  1380                           
  1381                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1382                           ;___bmul@multiplier stored from wreg
  1383  06EE  00F2               	movwf	___bmul@multiplier
  1384  06EF  01F1               	clrf	___bmul@product
  1385  06F0                     l3628:	
  1386  06F0  0870               	movf	___bmul@multiplicand,w
  1387  06F1  1872               	btfsc	___bmul@multiplier,0
  1388  06F2  07F1               	addwf	___bmul@product,f
  1389  06F3  1003               	clrc
  1390  06F4  0DF0               	rlf	___bmul@multiplicand,f
  1391  06F5  1003               	clrc
  1392  06F6  0CF2               	rrf	___bmul@multiplier,f
  1393  06F7  08F2               	movf	___bmul@multiplier,f
  1394  06F8  1D03               	skipz
  1395  06F9  2EF0               	goto	l3628
  1396  06FA  0871               	movf	___bmul@product,w
  1397  06FB  0008               	return
  1398  06FC                     __end_of___bmul:	
  1399  06FC                     __ptext368:	
  1400 ;; =============== function ___awdiv ends ============
  1401                           
  1402                           
  1403 ;; *************** function ___wmul *****************
  1404 ;; Defined at:
  1405 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\wmul.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  multiplier      2    0[COMMON] unsigned int 
  1408 ;;  multiplicand    2    2[COMMON] unsigned int 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  product         2    4[COMMON] unsigned int 
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  2    0[COMMON] unsigned int 
  1413 ;; Registers used:
  1414 ;;		wreg, status,2, status,0
  1415 ;; Tracked objects:
  1416 ;;		On entry : 60/0
  1417 ;;		On exit  : 60/0
  1418 ;;		Unchanged: FFF9F/0
  1419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1420 ;;      Params:         4       0       0       0       0
  1421 ;;      Locals:         2       0       0       0       0
  1422 ;;      Temps:          0       0       0       0       0
  1423 ;;      Totals:         6       0       0       0       0
  1424 ;;Total ram usage:        6 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; This function calls:
  1427 ;;		Nothing
  1428 ;; This function is called by:
  1429 ;;		_main
  1430 ;;		_disp_num
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433  06FC                     ___wmul:	
  1434                           
  1435                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1436  06FC  01F4               	clrf	___wmul@product
  1437  06FD  01F5               	clrf	___wmul@product+1
  1438  06FE                     l3644:	
  1439  06FE  1C70               	btfss	___wmul@multiplier,0
  1440  06FF  2F06               	goto	l3648
  1441  0700  0872               	movf	___wmul@multiplicand,w
  1442  0701  07F4               	addwf	___wmul@product,f
  1443  0702  1803               	skipnc
  1444  0703  0AF5               	incf	___wmul@product+1,f
  1445  0704  0873               	movf	___wmul@multiplicand+1,w
  1446  0705  07F5               	addwf	___wmul@product+1,f
  1447  0706                     l3648:	
  1448  0706  1003               	clrc
  1449  0707  0DF2               	rlf	___wmul@multiplicand,f
  1450  0708  0DF3               	rlf	___wmul@multiplicand+1,f
  1451  0709  1003               	clrc
  1452  070A  0CF1               	rrf	___wmul@multiplier+1,f
  1453  070B  0CF0               	rrf	___wmul@multiplier,f
  1454  070C  0871               	movf	___wmul@multiplier+1,w
  1455  070D  0470               	iorwf	___wmul@multiplier,w
  1456  070E  1D03               	skipz
  1457  070F  2EFE               	goto	l3644
  1458  0710  0875               	movf	___wmul@product+1,w
  1459  0711  00F1               	movwf	?___wmul+1
  1460  0712  0874               	movf	___wmul@product,w
  1461  0713  00F0               	movwf	?___wmul
  1462  0714  0008               	return
  1463  0715                     __end_of___wmul:	
  1464  0715                     __ptext367:	
  1465 ;; =============== function _READ_SWITCHES ends ============
  1466                           
  1467                           
  1468 ;; *************** function ___awdiv *****************
  1469 ;; Defined at:
  1470 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\awdiv.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  divisor         2    0[COMMON] int 
  1473 ;;  dividend        2    2[COMMON] int 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  quotient        2    6[COMMON] int 
  1476 ;;  sign            1    5[COMMON] unsigned char 
  1477 ;;  counter         1    4[COMMON] unsigned char 
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  2    0[COMMON] int 
  1480 ;; Registers used:
  1481 ;;		wreg, status,2, status,0
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: FFFFF/0
  1486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1487 ;;      Params:         4       0       0       0       0
  1488 ;;      Locals:         4       0       0       0       0
  1489 ;;      Temps:          0       0       0       0       0
  1490 ;;      Totals:         8       0       0       0       0
  1491 ;;Total ram usage:        8 bytes
  1492 ;; Hardware stack levels used:    1
  1493 ;; This function calls:
  1494 ;;		Nothing
  1495 ;; This function is called by:
  1496 ;;		_main
  1497 ;;		_disp_num
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500  0715                     ___awdiv:	
  1501                           
  1502                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1503  0715  01F5               	clrf	___awdiv@sign
  1504  0716  1FF1               	btfss	___awdiv@divisor+1,7
  1505  0717  2F1F               	goto	l3666
  1506  0718  09F0               	comf	___awdiv@divisor,f
  1507  0719  09F1               	comf	___awdiv@divisor+1,f
  1508  071A  0AF0               	incf	___awdiv@divisor,f
  1509  071B  1903               	skipnz
  1510  071C  0AF1               	incf	___awdiv@divisor+1,f
  1511  071D  01F5               	clrf	___awdiv@sign
  1512  071E  0AF5               	incf	___awdiv@sign,f
  1513  071F                     l3666:	
  1514  071F  1FF3               	btfss	___awdiv@dividend+1,7
  1515  0720  2F28               	goto	l3672
  1516  0721  09F2               	comf	___awdiv@dividend,f
  1517  0722  09F3               	comf	___awdiv@dividend+1,f
  1518  0723  0AF2               	incf	___awdiv@dividend,f
  1519  0724  1903               	skipnz
  1520  0725  0AF3               	incf	___awdiv@dividend+1,f
  1521  0726  3001               	movlw	1
  1522  0727  06F5               	xorwf	___awdiv@sign,f
  1523  0728                     l3672:	
  1524  0728  01F6               	clrf	___awdiv@quotient
  1525  0729  01F7               	clrf	___awdiv@quotient+1
  1526  072A  0871               	movf	___awdiv@divisor+1,w
  1527  072B  0470               	iorwf	___awdiv@divisor,w
  1528  072C  1903               	skipnz
  1529  072D  2F4D               	goto	l3694
  1530  072E  01F4               	clrf	___awdiv@counter
  1531  072F                     L13:	
  1532  072F  0AF4               	incf	___awdiv@counter,f
  1533  0730  1BF1               	btfsc	___awdiv@divisor+1,7
  1534  0731  2F36               	goto	l3682
  1535  0732  1003               	clrc
  1536  0733  0DF0               	rlf	___awdiv@divisor,f
  1537  0734  0DF1               	rlf	___awdiv@divisor+1,f
  1538  0735  2F2F               	goto	L13
  1539  0736                     l3682:	
  1540  0736  1003               	clrc
  1541  0737  0DF6               	rlf	___awdiv@quotient,f
  1542  0738  0DF7               	rlf	___awdiv@quotient+1,f
  1543  0739  0871               	movf	___awdiv@divisor+1,w
  1544  073A  0273               	subwf	___awdiv@dividend+1,w
  1545  073B  1D03               	skipz
  1546  073C  2F3F               	goto	u665
  1547  073D  0870               	movf	___awdiv@divisor,w
  1548  073E  0272               	subwf	___awdiv@dividend,w
  1549  073F                     u665:	
  1550  073F  1C03               	skipc
  1551  0740  2F49               	goto	L14
  1552  0741  0870               	movf	___awdiv@divisor,w
  1553  0742  02F2               	subwf	___awdiv@dividend,f
  1554  0743  0871               	movf	___awdiv@divisor+1,w
  1555  0744  1C03               	skipc
  1556  0745  03F3               	decf	___awdiv@dividend+1,f
  1557  0746  02F3               	subwf	___awdiv@dividend+1,f
  1558  0747  1476               	bsf	___awdiv@quotient,0
  1559  0748  1003               	clrc
  1560  0749                     L14:	
  1561  0749  0CF1               	rrf	___awdiv@divisor+1,f
  1562  074A  0CF0               	rrf	___awdiv@divisor,f
  1563  074B  0BF4               	decfsz	___awdiv@counter,f
  1564  074C  2F36               	goto	l3682
  1565  074D                     l3694:	
  1566  074D  0875               	movf	___awdiv@sign,w
  1567  074E  1903               	btfsc	3,2
  1568  074F  2F55               	goto	l3698
  1569  0750  09F6               	comf	___awdiv@quotient,f
  1570  0751  09F7               	comf	___awdiv@quotient+1,f
  1571  0752  0AF6               	incf	___awdiv@quotient,f
  1572  0753  1903               	skipnz
  1573  0754  0AF7               	incf	___awdiv@quotient+1,f
  1574  0755                     l3698:	
  1575  0755  0877               	movf	___awdiv@quotient+1,w
  1576  0756  00F1               	movwf	?___awdiv+1
  1577  0757  0876               	movf	___awdiv@quotient,w
  1578  0758  00F0               	movwf	?___awdiv
  1579  0759  0008               	return
  1580  075A                     __end_of___awdiv:	
  1581  075A                     __ptext361:	
  1582 ;; =============== function _WriteStringToLCD ends ============
  1583                           
  1584                           
  1585 ;; *************** function _InitLCD *****************
  1586 ;; Defined at:
  1587 ;;		line 42 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\LCD.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;		None
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;		None
  1592 ;; Return value:  Size  Location     Type
  1593 ;;		None               void
  1594 ;; Registers used:
  1595 ;;		wreg, status,2, status,0, pclath, cstack
  1596 ;; Tracked objects:
  1597 ;;		On entry : 17F/20
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1601 ;;      Params:         0       0       0       0       0
  1602 ;;      Locals:         0       0       0       0       0
  1603 ;;      Temps:          3       0       0       0       0
  1604 ;;      Totals:         3       0       0       0       0
  1605 ;;Total ram usage:        3 bytes
  1606 ;; Hardware stack levels used:    1
  1607 ;; Hardware stack levels required when called:    2
  1608 ;; This function calls:
  1609 ;;		_ToggleEpinOfLCD
  1610 ;;		_WriteCommandToLCD
  1611 ;; This function is called by:
  1612 ;;		_main
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615  075A                     _InitLCD:	
  1616                           
  1617                           ;LCD.c: 44: RD0 = 0;
  1618                           
  1619                           ; Regs used in _InitLCD: [wreg+status,2+status,0+pclath+cstack]
  1620  075A  1283               	bcf	3,5	;RP0=0, select bank0
  1621                           
  1622                           ;LCD.c: 45: RD1 = 0;
  1623                           
  1624                           ;LCD.c: 46: RD4 = 0;
  1625                           
  1626                           ;LCD.c: 47: RD5 = 0;
  1627                           
  1628                           ;LCD.c: 48: RD6 = 0;
  1629                           
  1630                           ;LCD.c: 49: RD7 = 0;
  1631  075B  27EF  120A  118A   	fcall	PL2	;call to abstracted procedure
  1632                           
  1633                           ;LCD.c: 50: TRISD0 = 0;
  1634  075E  1683               	bsf	3,5	;RP0=1, select bank1
  1635  075F  3002               	movlw	2
  1636                           
  1637                           ;LCD.c: 51: TRISD1 = 0;
  1638                           
  1639                           ;LCD.c: 52: TRISD4 = 0;
  1640                           
  1641                           ;LCD.c: 53: TRISD5 = 0;
  1642                           
  1643                           ;LCD.c: 54: TRISD6 = 0;
  1644                           
  1645                           ;LCD.c: 55: TRISD7 = 0;
  1646  0760  27EF  120A  118A   	fcall	PL2	;call to abstracted procedure
  1647                           
  1648                           ;LCD.c: 58: _delay((unsigned long)((40)*(20000000/4000.0)));
  1649  0763  00F5               	movwf	??_InitLCD+2
  1650  0764  3004               	movlw	4
  1651  0765  00F4               	movwf	??_InitLCD+1
  1652  0766  30BA               	movlw	186
  1653  0767  00F3               	movwf	??_InitLCD
  1654  0768                     u1167:	
  1655  0768  0BF3               	decfsz	??_InitLCD,f
  1656  0769  2F68               	goto	u1167
  1657  076A  0BF4               	decfsz	??_InitLCD+1,f
  1658  076B  2F68               	goto	u1167
  1659  076C  0BF5               	decfsz	??_InitLCD+2,f
  1660  076D  2F68               	goto	u1167
  1661  076E  0064               	clrwdt
  1662                           
  1663                           ;LCD.c: 60: PORTD &= 0x0F;
  1664                           
  1665                           ;LCD.c: 61: PORTD |= 0x30;
  1666  076F  27F6  120A  118A   	fcall	PL3	;call to abstracted procedure
  1667                           
  1668                           ;LCD.c: 62: ToggleEpinOfLCD();
  1669  0772  27B9  120A  118A   	fcall	_ToggleEpinOfLCD
  1670                           
  1671                           ;LCD.c: 64: _delay((unsigned long)((6)*(20000000/4000.0)));
  1672  0775  3027               	movlw	39
  1673  0776  00F4               	movwf	??_InitLCD+1
  1674  0777  30F5               	movlw	245
  1675  0778  00F3               	movwf	??_InitLCD
  1676  0779                     u1177:	
  1677  0779  0BF3               	decfsz	??_InitLCD,f
  1678  077A  2F79               	goto	u1177
  1679  077B  0BF4               	decfsz	??_InitLCD+1,f
  1680  077C  2F79               	goto	u1177
  1681                           
  1682                           ;LCD.c: 66: PORTD &= 0x0F;
  1683  077D  300F               	movlw	15
  1684  077E  27FD               	call	PL4	;select bank 0
  1685  077F  0588               	andwf	8,f	;volatile
  1686                           
  1687                           ;LCD.c: 67: PORTD |= 0x30;
  1688  0780  3030               	movlw	48
  1689  0781  0488               	iorwf	8,f	;volatile
  1690                           
  1691                           ;LCD.c: 68: ToggleEpinOfLCD();
  1692  0782  27B9  120A  118A   	fcall	_ToggleEpinOfLCD
  1693                           
  1694                           ;LCD.c: 70: _delay((unsigned long)((300)*(20000000/4000000.0)));
  1695  0785  30D6               	movlw	214
  1696  0786  00F3               	movwf	??_InitLCD
  1697  0787                     u1187:	
  1698  0787  2F88               	nop2
  1699  0788  2F89               	nop2
  1700  0789  0BF3               	decfsz	??_InitLCD,f
  1701  078A  2F87               	goto	u1187
  1702  078B  0064               	clrwdt
  1703                           
  1704                           ;LCD.c: 72: PORTD &= 0x0F;
  1705                           
  1706                           ;LCD.c: 73: PORTD |= 0x30;
  1707  078C  27F6  120A  118A   	fcall	PL3	;call to abstracted procedure
  1708                           
  1709                           ;LCD.c: 74: ToggleEpinOfLCD();
  1710  078F  27B9  120A  118A   	fcall	_ToggleEpinOfLCD
  1711                           
  1712                           ;LCD.c: 76: _delay((unsigned long)((2)*(20000000/4000.0)));
  1713  0792  300D               	movlw	13
  1714  0793  00F4               	movwf	??_InitLCD+1
  1715  0794  30FB               	movlw	251
  1716  0795  00F3               	movwf	??_InitLCD
  1717  0796                     u1197:	
  1718  0796  0BF3               	decfsz	??_InitLCD,f
  1719  0797  2F96               	goto	u1197
  1720  0798  0BF4               	decfsz	??_InitLCD+1,f
  1721  0799  2F96               	goto	u1197
  1722  079A  2F9B               	nop2
  1723                           
  1724                           ;LCD.c: 78: PORTD &= 0x0F;
  1725  079B  300F               	movlw	15
  1726  079C  27FD               	call	PL4	;select bank 0
  1727  079D  0588               	andwf	8,f	;volatile
  1728                           
  1729                           ;LCD.c: 79: PORTD |= 0x20;
  1730  079E  1688               	bsf	8,5	;volatile
  1731                           
  1732                           ;LCD.c: 80: ToggleEpinOfLCD();
  1733  079F  27B9  120A  118A   	fcall	_ToggleEpinOfLCD
  1734                           
  1735                           ;LCD.c: 82: _delay((unsigned long)((2)*(20000000/4000.0)));
  1736  07A2  300D               	movlw	13
  1737  07A3  00F4               	movwf	??_InitLCD+1
  1738  07A4  30FB               	movlw	251
  1739  07A5  00F3               	movwf	??_InitLCD
  1740  07A6                     u1207:	
  1741  07A6  0BF3               	decfsz	??_InitLCD,f
  1742  07A7  2FA6               	goto	u1207
  1743  07A8  0BF4               	decfsz	??_InitLCD+1,f
  1744  07A9  2FA6               	goto	u1207
  1745  07AA  2FAB               	nop2
  1746                           
  1747                           ;LCD.c: 84: WriteCommandToLCD(0x28);
  1748  07AB  3028               	movlw	40
  1749  07AC  27CF  120A  118A   	fcall	_WriteCommandToLCD
  1750                           
  1751                           ;LCD.c: 85: WriteCommandToLCD(0x0c);
  1752  07AF  300C               	movlw	12
  1753  07B0  27CF  120A  118A   	fcall	_WriteCommandToLCD
  1754                           
  1755                           ;LCD.c: 86: WriteCommandToLCD(0x01);
  1756  07B3  3001               	movlw	1
  1757  07B4  27CF  120A  118A   	fcall	_WriteCommandToLCD
  1758                           
  1759                           ;LCD.c: 87: WriteCommandToLCD(0x06);
  1760  07B7  3006               	movlw	6
  1761  07B8  2FCF               	ljmp	_WriteCommandToLCD
  1762  07B9                     __end_of_InitLCD:	
  1763  07B9                     __ptext365:	
  1764 ;; =============== function _GetKey ends ============
  1765                           
  1766                           
  1767 ;; *************** function _ToggleEpinOfLCD *****************
  1768 ;; Defined at:
  1769 ;;		line 5 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\LCD.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;		None               void
  1776 ;; Registers used:
  1777 ;;		wreg
  1778 ;; Tracked objects:
  1779 ;;		On entry : 60/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1783 ;;      Params:         0       0       0       0       0
  1784 ;;      Locals:         0       0       0       0       0
  1785 ;;      Temps:          2       0       0       0       0
  1786 ;;      Totals:         2       0       0       0       0
  1787 ;;Total ram usage:        2 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; This function calls:
  1790 ;;		Nothing
  1791 ;; This function is called by:
  1792 ;;		_WriteCommandToLCD
  1793 ;;		_WriteDataToLCD
  1794 ;;		_InitLCD
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797  07B9                     _ToggleEpinOfLCD:	
  1798  07B9                     l3804:	
  1799                           ; Regs used in _ToggleEpinOfLCD: [wreg]
  1800                           
  1801  07B9  3004               	movlw	4
  1802                           
  1803                           ;LCD.c: 6: RD0 = 1;
  1804  07BA  1408               	bsf	8,0
  1805                           
  1806                           ;LCD.c: 7: _delay((unsigned long)((500)*(20000000/4000000.0)));
  1807  07BB  00F1               	movwf	??_ToggleEpinOfLCD+1
  1808  07BC  303D               	movlw	61
  1809  07BD  00F0               	movwf	??_ToggleEpinOfLCD
  1810  07BE                     u1217:	
  1811  07BE  0BF0               	decfsz	??_ToggleEpinOfLCD,f
  1812  07BF  2FBE               	goto	u1217
  1813  07C0  0BF1               	decfsz	??_ToggleEpinOfLCD+1,f
  1814  07C1  2FBE               	goto	u1217
  1815  07C2  2FC3               	nop2
  1816  07C3  27FD               	call	PL4	;select bank 0
  1817                           
  1818                           ;LCD.c: 8: RD0 = 0;
  1819  07C4  3004               	movlw	4
  1820  07C5  1008               	bcf	8,0
  1821                           
  1822                           ;LCD.c: 9: _delay((unsigned long)((500)*(20000000/4000000.0)));
  1823  07C6  00F1               	movwf	??_ToggleEpinOfLCD+1
  1824  07C7  303D               	movlw	61
  1825  07C8  00F0               	movwf	??_ToggleEpinOfLCD
  1826  07C9                     u1227:	
  1827  07C9  0BF0               	decfsz	??_ToggleEpinOfLCD,f
  1828  07CA  2FC9               	goto	u1227
  1829  07CB  0BF1               	decfsz	??_ToggleEpinOfLCD+1,f
  1830  07CC  2FC9               	goto	u1227
  1831  07CD  2FCE               	nop2
  1832  07CE  0008               	return
  1833  07CF                     __end_of_ToggleEpinOfLCD:	
  1834  07CF                     __ptext363:	
  1835 ;; =============== function _WriteDataToLCD ends ============
  1836                           
  1837                           
  1838 ;; *************** function _WriteCommandToLCD *****************
  1839 ;; Defined at:
  1840 ;;		line 14 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\LCD.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;  Command         1    wreg     unsigned char 
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;  Command         1    2[COMMON] unsigned char 
  1845 ;; Return value:  Size  Location     Type
  1846 ;;		None               void
  1847 ;; Registers used:
  1848 ;;		wreg, status,2, status,0, pclath, cstack
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1854 ;;      Params:         0       0       0       0       0
  1855 ;;      Locals:         1       0       0       0       0
  1856 ;;      Temps:          0       0       0       0       0
  1857 ;;      Totals:         1       0       0       0       0
  1858 ;;Total ram usage:        1 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:    1
  1861 ;; This function calls:
  1862 ;;		_ToggleEpinOfLCD
  1863 ;; This function is called by:
  1864 ;;		_InitLCD
  1865 ;;		_ClearLCDScreen
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868  07CF                     _WriteCommandToLCD:	
  1869                           
  1870                           ; Regs used in _WriteCommandToLCD: [wreg+status,2+status,0+pclath+cstack]
  1871                           ;WriteCommandToLCD@Command stored from wreg
  1872  07CF  00F2               	movwf	WriteCommandToLCD@Command
  1873  07D0  27FD               	call	PL4	;select bank 0
  1874                           
  1875                           ;LCD.c: 15: RD1 = 0;
  1876  07D1  300F               	movlw	15
  1877  07D2  1088               	bcf	8,1
  1878                           
  1879                           ;LCD.c: 17: PORTD &= 0x0F;
  1880  07D3  0588               	andwf	8,f	;volatile
  1881                           
  1882                           ;LCD.c: 18: PORTD |= (Command&0xF0);
  1883  07D4  0872               	movf	WriteCommandToLCD@Command,w
  1884  07D5  39F0               	andlw	240
  1885  07D6  0488               	iorwf	8,f	;volatile
  1886                           
  1887                           ;LCD.c: 19: ToggleEpinOfLCD();
  1888  07D7  27B9  120A  118A   	fcall	_ToggleEpinOfLCD
  1889                           
  1890                           ;LCD.c: 21: PORTD &= 0x0F;
  1891  07DA  300F               	movlw	15
  1892  07DB  27FD               	call	PL4	;select bank 0
  1893  07DC  0588               	andwf	8,f	;volatile
  1894                           
  1895                           ;LCD.c: 22: PORTD |= ((Command<<4)&0xF0);
  1896  07DD  0E72               	swapf	WriteCommandToLCD@Command,w
  1897  07DE  39F0               	andlw	240
  1898  07DF  0488               	iorwf	8,f	;volatile
  1899                           
  1900                           ;LCD.c: 23: ToggleEpinOfLCD();
  1901  07E0  2FB9               	ljmp	l3804
  1902  07E1                     __end_of_WriteCommandToLCD:	
  1903  07E1                     __ptext359:	
  1904 ;; =============== function _disp_num ends ============
  1905                           
  1906                           
  1907 ;; *************** function _ClearLCDScreen *****************
  1908 ;; Defined at:
  1909 ;;		line 99 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\LCD.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;		None
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;		None               void
  1916 ;; Registers used:
  1917 ;;		wreg, status,2, status,0, pclath, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 60/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1923 ;;      Params:         0       0       0       0       0
  1924 ;;      Locals:         0       0       0       0       0
  1925 ;;      Temps:          2       0       0       0       0
  1926 ;;      Totals:         2       0       0       0       0
  1927 ;;Total ram usage:        2 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    2
  1930 ;; This function calls:
  1931 ;;		_WriteCommandToLCD
  1932 ;; This function is called by:
  1933 ;;		_main
  1934 ;;		_get_num
  1935 ;;		_get_func
  1936 ;;		_DispError
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939  07E1                     _ClearLCDScreen:	
  1940                           
  1941                           ;LCD.c: 100: WriteCommandToLCD(0x01);
  1942                           
  1943                           ; Regs used in _ClearLCDScreen: [wreg+status,2+status,0+pclath+cstack]
  1944  07E1  3001               	movlw	1
  1945  07E2  27CF  120A  118A   	fcall	_WriteCommandToLCD
  1946                           
  1947                           ;LCD.c: 101: _delay((unsigned long)((2)*(20000000/4000.0)));
  1948  07E5  300D               	movlw	13
  1949  07E6  00F4               	movwf	??_ClearLCDScreen+1
  1950  07E7  30FB               	movlw	251
  1951  07E8  00F3               	movwf	??_ClearLCDScreen
  1952  07E9                     u1157:	
  1953  07E9  0BF3               	decfsz	??_ClearLCDScreen,f
  1954  07EA  2FE9               	goto	u1157
  1955  07EB  0BF4               	decfsz	??_ClearLCDScreen+1,f
  1956  07EC  2FE9               	goto	u1157
  1957  07ED  2FEE               	nop2
  1958  07EE  0008               	return
  1959  07EF                     __end_of_ClearLCDScreen:	
  1960  07EF                     PL2:	
  1961  07EF  1008               	bcf	8,0
  1962  07F0  1088               	bcf	8,1
  1963  07F1  1208               	bcf	8,4
  1964  07F2  1288               	bcf	8,5
  1965  07F3  1308               	bcf	8,6
  1966  07F4  1388               	bcf	8,7
  1967  07F5  0008               	return
  1968  07F6                     PL3:	
  1969  07F6  300F               	movlw	15
  1970  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  1971  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  1972  07F9  0588               	andwf	8,f	;volatile
  1973  07FA  3030               	movlw	48
  1974  07FB  0488               	iorwf	8,f	;volatile
  1975  07FC  0008               	return
  1976  07FD                     PL4:	
  1977  07FD  1283               	bcf	3,5	;RP0=0, select bank0
  1978  07FE  1303               	bcf	3,6	;RP1=0, select bank0
  1979  07FF  0008               	return
  1980                           
  1981                           	psect	text364
  1982  04C1                     __ptext364:	
  1983 ;; =============== function _WriteCommandToLCD ends ============
  1984                           
  1985                           
  1986 ;; *************** function _GetKey *****************
  1987 ;; Defined at:
  1988 ;;		line 55 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\Keypad.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;		None
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;  key             1    3[COMMON] unsigned char 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      unsigned char 
  1995 ;; Registers used:
  1996 ;;		wreg, pclath, cstack
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/20
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2002 ;;      Params:         0       0       0       0       0
  2003 ;;      Locals:         1       0       0       0       0
  2004 ;;      Temps:          0       0       0       0       0
  2005 ;;      Totals:         1       0       0       0       0
  2006 ;;Total ram usage:        1 bytes
  2007 ;; Hardware stack levels used:    1
  2008 ;; Hardware stack levels required when called:    1
  2009 ;; This function calls:
  2010 ;;		_READ_SWITCHES
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015  04C1                     _GetKey:	
  2016                           
  2017                           ;Keypad.c: 56: char key = 'n';
  2018                           
  2019                           ; Regs used in _GetKey: [wreg+pclath+cstack]
  2020  04C1  306E               	movlw	110
  2021  04C2                     L12:	
  2022  04C2  00F3               	movwf	GetKey@key
  2023  04C3  3A6E               	xorlw	110
  2024  04C4  1D03               	btfss	3,2
  2025  04C5  2CCA               	goto	l3816
  2026                           
  2027                           ;Keypad.c: 59: key = READ_SWITCHES();
  2028                           
  2029                           ;Keypad.c: 58: while(key=='n')
  2030  04C6  24CC  120A  118A   	fcall	_READ_SWITCHES
  2031  04C9  2CC2               	goto	L12
  2032  04CA                     l3816:	
  2033                           
  2034                           ;Keypad.c: 61: return key;
  2035  04CA  0873               	movf	GetKey@key,w
  2036  04CB  0008               	return
  2037  04CC                     __end_of_GetKey:	
  2038  04CC                     __ptext366:	
  2039 ;; =============== function _ToggleEpinOfLCD ends ============
  2040                           
  2041                           
  2042 ;; *************** function _READ_SWITCHES *****************
  2043 ;; Defined at:
  2044 ;;		line 19 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\Keypad.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;		None
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;		None
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  1    wreg      unsigned char 
  2051 ;; Registers used:
  2052 ;;		wreg
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/20
  2055 ;;		On exit  : 60/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2058 ;;      Params:         0       0       0       0       0
  2059 ;;      Locals:         0       0       0       0       0
  2060 ;;      Temps:          3       0       0       0       0
  2061 ;;      Totals:         3       0       0       0       0
  2062 ;;Total ram usage:        3 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_GetKey
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070  04CC                     _READ_SWITCHES:	
  2071  04CC  260D               	call	PL5	;select bank 0
  2072                           
  2073                           ;Keypad.c: 20: RB0 = 0; RB1 = 1; RB2 = 1; RB3 = 1;
  2074                           
  2075                           ; Regs used in _READ_SWITCHES: [wreg]
  2076  04CD  1006               	bcf	6,0
  2077  04CE  1486               	bsf	6,1
  2078  04CF  1506               	bsf	6,2
  2079  04D0  1586               	bsf	6,3
  2080                           
  2081                           ;Keypad.c: 22: if (RB4 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB4==0); return '7'; }
  2082  04D1  1A06               	btfsc	6,4
  2083  04D2  2CE4               	goto	l646
  2084  04D3  3007               	movlw	7
  2085  04D4  00F2               	movwf	??_READ_SWITCHES+2
  2086  04D5  3058               	movlw	88
  2087  04D6  00F1               	movwf	??_READ_SWITCHES+1
  2088  04D7  305E               	movlw	94
  2089  04D8  00F0               	movwf	??_READ_SWITCHES
  2090  04D9                     u1237:	
  2091  04D9  0BF0               	decfsz	??_READ_SWITCHES,f
  2092  04DA  2CD9               	goto	u1237
  2093  04DB  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2094  04DC  2CD9               	goto	u1237
  2095  04DD  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2096  04DE  2CD9               	goto	u1237
  2097  04DF  2CE0               	nop2
  2098  04E0                     l647:	
  2099  04E0  260D               	call	PL5	;select bank 0
  2100  04E1  1A06               	btfsc	6,4
  2101  04E2  3437               	retlw	55
  2102  04E3  2CE0               	goto	l647
  2103  04E4                     l646:	
  2104                           
  2105                           ;Keypad.c: 23: if (RB5 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB5==0); return '8'; }
  2106  04E4  1A86               	btfsc	6,5
  2107  04E5  2CF7               	goto	l651
  2108  04E6  3007               	movlw	7
  2109  04E7  00F2               	movwf	??_READ_SWITCHES+2
  2110  04E8  3058               	movlw	88
  2111  04E9  00F1               	movwf	??_READ_SWITCHES+1
  2112  04EA  305E               	movlw	94
  2113  04EB  00F0               	movwf	??_READ_SWITCHES
  2114  04EC                     u1247:	
  2115  04EC  0BF0               	decfsz	??_READ_SWITCHES,f
  2116  04ED  2CEC               	goto	u1247
  2117  04EE  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2118  04EF  2CEC               	goto	u1247
  2119  04F0  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2120  04F1  2CEC               	goto	u1247
  2121  04F2  2CF3               	nop2
  2122  04F3                     l652:	
  2123  04F3  260D               	call	PL5	;select bank 0
  2124  04F4  1A86               	btfsc	6,5
  2125  04F5  3438               	retlw	56
  2126  04F6  2CF3               	goto	l652
  2127  04F7                     l651:	
  2128                           
  2129                           ;Keypad.c: 24: if (RB6 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB6==0); return '9'; }
  2130  04F7  1B06               	btfsc	6,6
  2131  04F8  2D0A               	goto	l655
  2132  04F9  3007               	movlw	7
  2133  04FA  00F2               	movwf	??_READ_SWITCHES+2
  2134  04FB  3058               	movlw	88
  2135  04FC  00F1               	movwf	??_READ_SWITCHES+1
  2136  04FD  305E               	movlw	94
  2137  04FE  00F0               	movwf	??_READ_SWITCHES
  2138  04FF                     u1257:	
  2139  04FF  0BF0               	decfsz	??_READ_SWITCHES,f
  2140  0500  2CFF               	goto	u1257
  2141  0501  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2142  0502  2CFF               	goto	u1257
  2143  0503  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2144  0504  2CFF               	goto	u1257
  2145  0505  2D06               	nop2
  2146  0506                     l656:	
  2147  0506  260D               	call	PL5	;select bank 0
  2148  0507  1B06               	btfsc	6,6
  2149  0508  3439               	retlw	57
  2150  0509  2D06               	goto	l656
  2151  050A                     l655:	
  2152                           
  2153                           ;Keypad.c: 25: if (RB7 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB7==0); return '/'; }
  2154  050A  1B86               	btfsc	6,7
  2155  050B  2D1D               	goto	l659
  2156  050C  3007               	movlw	7
  2157  050D  00F2               	movwf	??_READ_SWITCHES+2
  2158  050E  3058               	movlw	88
  2159  050F  00F1               	movwf	??_READ_SWITCHES+1
  2160  0510  305E               	movlw	94
  2161  0511  00F0               	movwf	??_READ_SWITCHES
  2162  0512                     u1267:	
  2163  0512  0BF0               	decfsz	??_READ_SWITCHES,f
  2164  0513  2D12               	goto	u1267
  2165  0514  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2166  0515  2D12               	goto	u1267
  2167  0516  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2168  0517  2D12               	goto	u1267
  2169  0518  2D19               	nop2
  2170  0519                     l660:	
  2171  0519  260D               	call	PL5	;select bank 0
  2172  051A  1B86               	btfsc	6,7
  2173  051B  342F               	retlw	47
  2174  051C  2D19               	goto	l660
  2175  051D                     l659:	
  2176                           
  2177                           ;Keypad.c: 27: RB0 = 1; RB1 = 0; RB2 = 1; RB3 = 1;
  2178  051D  1406               	bsf	6,0
  2179  051E  1086               	bcf	6,1
  2180  051F  1506               	bsf	6,2
  2181  0520  1586               	bsf	6,3
  2182                           
  2183                           ;Keypad.c: 29: if (RB4 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB4==0); return '4'; }
  2184  0521  1A06               	btfsc	6,4
  2185  0522  2D34               	goto	l663
  2186  0523  3007               	movlw	7
  2187  0524  00F2               	movwf	??_READ_SWITCHES+2
  2188  0525  3058               	movlw	88
  2189  0526  00F1               	movwf	??_READ_SWITCHES+1
  2190  0527  305E               	movlw	94
  2191  0528  00F0               	movwf	??_READ_SWITCHES
  2192  0529                     u1277:	
  2193  0529  0BF0               	decfsz	??_READ_SWITCHES,f
  2194  052A  2D29               	goto	u1277
  2195  052B  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2196  052C  2D29               	goto	u1277
  2197  052D  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2198  052E  2D29               	goto	u1277
  2199  052F  2D30               	nop2
  2200  0530                     l664:	
  2201  0530  260D               	call	PL5	;select bank 0
  2202  0531  1A06               	btfsc	6,4
  2203  0532  3434               	retlw	52
  2204  0533  2D30               	goto	l664
  2205  0534                     l663:	
  2206                           
  2207                           ;Keypad.c: 30: if (RB5 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB5==0); return '5'; }
  2208  0534  1A86               	btfsc	6,5
  2209  0535  2D47               	goto	l667
  2210  0536  3007               	movlw	7
  2211  0537  00F2               	movwf	??_READ_SWITCHES+2
  2212  0538  3058               	movlw	88
  2213  0539  00F1               	movwf	??_READ_SWITCHES+1
  2214  053A  305E               	movlw	94
  2215  053B  00F0               	movwf	??_READ_SWITCHES
  2216  053C                     u1287:	
  2217  053C  0BF0               	decfsz	??_READ_SWITCHES,f
  2218  053D  2D3C               	goto	u1287
  2219  053E  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2220  053F  2D3C               	goto	u1287
  2221  0540  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2222  0541  2D3C               	goto	u1287
  2223  0542  2D43               	nop2
  2224  0543                     l668:	
  2225  0543  260D               	call	PL5	;select bank 0
  2226  0544  1A86               	btfsc	6,5
  2227  0545  3435               	retlw	53
  2228  0546  2D43               	goto	l668
  2229  0547                     l667:	
  2230                           
  2231                           ;Keypad.c: 31: if (RB6 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB6==0); return '6'; }
  2232  0547  1B06               	btfsc	6,6
  2233  0548  2D5A               	goto	l671
  2234  0549  3007               	movlw	7
  2235  054A  00F2               	movwf	??_READ_SWITCHES+2
  2236  054B  3058               	movlw	88
  2237  054C  00F1               	movwf	??_READ_SWITCHES+1
  2238  054D  305E               	movlw	94
  2239  054E  00F0               	movwf	??_READ_SWITCHES
  2240  054F                     u1297:	
  2241  054F  0BF0               	decfsz	??_READ_SWITCHES,f
  2242  0550  2D4F               	goto	u1297
  2243  0551  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2244  0552  2D4F               	goto	u1297
  2245  0553  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2246  0554  2D4F               	goto	u1297
  2247  0555  2D56               	nop2
  2248  0556                     l672:	
  2249  0556  260D               	call	PL5	;select bank 0
  2250  0557  1B06               	btfsc	6,6
  2251  0558  3436               	retlw	54
  2252  0559  2D56               	goto	l672
  2253  055A                     l671:	
  2254                           
  2255                           ;Keypad.c: 32: if (RB7 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB7==0); return 'x'; }
  2256  055A  1B86               	btfsc	6,7
  2257  055B  2D6D               	goto	l675
  2258  055C  3007               	movlw	7
  2259  055D  00F2               	movwf	??_READ_SWITCHES+2
  2260  055E  3058               	movlw	88
  2261  055F  00F1               	movwf	??_READ_SWITCHES+1
  2262  0560  305E               	movlw	94
  2263  0561  00F0               	movwf	??_READ_SWITCHES
  2264  0562                     u1307:	
  2265  0562  0BF0               	decfsz	??_READ_SWITCHES,f
  2266  0563  2D62               	goto	u1307
  2267  0564  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2268  0565  2D62               	goto	u1307
  2269  0566  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2270  0567  2D62               	goto	u1307
  2271  0568  2D69               	nop2
  2272  0569                     l676:	
  2273  0569  260D               	call	PL5	;select bank 0
  2274  056A  1B86               	btfsc	6,7
  2275  056B  3478               	retlw	120
  2276  056C  2D69               	goto	l676
  2277  056D                     l675:	
  2278                           
  2279                           ;Keypad.c: 34: RB0 = 1; RB1 = 1; RB2 = 0; RB3 = 1;
  2280  056D  1406               	bsf	6,0
  2281  056E  1486               	bsf	6,1
  2282  056F  1106               	bcf	6,2
  2283  0570  1586               	bsf	6,3
  2284                           
  2285                           ;Keypad.c: 36: if (RB4 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB4==0); return '1'; }
  2286  0571  1A06               	btfsc	6,4
  2287  0572  2D84               	goto	l679
  2288  0573  3007               	movlw	7
  2289  0574  00F2               	movwf	??_READ_SWITCHES+2
  2290  0575  3058               	movlw	88
  2291  0576  00F1               	movwf	??_READ_SWITCHES+1
  2292  0577  305E               	movlw	94
  2293  0578  00F0               	movwf	??_READ_SWITCHES
  2294  0579                     u1317:	
  2295  0579  0BF0               	decfsz	??_READ_SWITCHES,f
  2296  057A  2D79               	goto	u1317
  2297  057B  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2298  057C  2D79               	goto	u1317
  2299  057D  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2300  057E  2D79               	goto	u1317
  2301  057F  2D80               	nop2
  2302  0580                     l680:	
  2303  0580  260D               	call	PL5	;select bank 0
  2304  0581  1A06               	btfsc	6,4
  2305  0582  3431               	retlw	49
  2306  0583  2D80               	goto	l680
  2307  0584                     l679:	
  2308                           
  2309                           ;Keypad.c: 37: if (RB5 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB5==0); return '2'; }
  2310  0584  1A86               	btfsc	6,5
  2311  0585  2D97               	goto	l683
  2312  0586  3007               	movlw	7
  2313  0587  00F2               	movwf	??_READ_SWITCHES+2
  2314  0588  3058               	movlw	88
  2315  0589  00F1               	movwf	??_READ_SWITCHES+1
  2316  058A  305E               	movlw	94
  2317  058B  00F0               	movwf	??_READ_SWITCHES
  2318  058C                     u1327:	
  2319  058C  0BF0               	decfsz	??_READ_SWITCHES,f
  2320  058D  2D8C               	goto	u1327
  2321  058E  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2322  058F  2D8C               	goto	u1327
  2323  0590  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2324  0591  2D8C               	goto	u1327
  2325  0592  2D93               	nop2
  2326  0593                     l684:	
  2327  0593  260D               	call	PL5	;select bank 0
  2328  0594  1A86               	btfsc	6,5
  2329  0595  3432               	retlw	50
  2330  0596  2D93               	goto	l684
  2331  0597                     l683:	
  2332                           
  2333                           ;Keypad.c: 38: if (RB6 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB6==0); return '3'; }
  2334  0597  1B06               	btfsc	6,6
  2335  0598  2DAA               	goto	l687
  2336  0599  3007               	movlw	7
  2337  059A  00F2               	movwf	??_READ_SWITCHES+2
  2338  059B  3058               	movlw	88
  2339  059C  00F1               	movwf	??_READ_SWITCHES+1
  2340  059D  305E               	movlw	94
  2341  059E  00F0               	movwf	??_READ_SWITCHES
  2342  059F                     u1337:	
  2343  059F  0BF0               	decfsz	??_READ_SWITCHES,f
  2344  05A0  2D9F               	goto	u1337
  2345  05A1  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2346  05A2  2D9F               	goto	u1337
  2347  05A3  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2348  05A4  2D9F               	goto	u1337
  2349  05A5  2DA6               	nop2
  2350  05A6                     l688:	
  2351  05A6  260D               	call	PL5	;select bank 0
  2352  05A7  1B06               	btfsc	6,6
  2353  05A8  3433               	retlw	51
  2354  05A9  2DA6               	goto	l688
  2355  05AA                     l687:	
  2356                           
  2357                           ;Keypad.c: 39: if (RB7 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB7==0); return '-'; }
  2358  05AA  1B86               	btfsc	6,7
  2359  05AB  2DBD               	goto	l691
  2360  05AC  3007               	movlw	7
  2361  05AD  00F2               	movwf	??_READ_SWITCHES+2
  2362  05AE  3058               	movlw	88
  2363  05AF  00F1               	movwf	??_READ_SWITCHES+1
  2364  05B0  305E               	movlw	94
  2365  05B1  00F0               	movwf	??_READ_SWITCHES
  2366  05B2                     u1347:	
  2367  05B2  0BF0               	decfsz	??_READ_SWITCHES,f
  2368  05B3  2DB2               	goto	u1347
  2369  05B4  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2370  05B5  2DB2               	goto	u1347
  2371  05B6  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2372  05B7  2DB2               	goto	u1347
  2373  05B8  2DB9               	nop2
  2374  05B9                     l692:	
  2375  05B9  260D               	call	PL5	;select bank 0
  2376  05BA  1B86               	btfsc	6,7
  2377  05BB  342D               	retlw	45
  2378  05BC  2DB9               	goto	l692
  2379  05BD                     l691:	
  2380                           
  2381                           ;Keypad.c: 41: RB0 = 1; RB1 = 1; RB2 = 1; RB3 = 0;
  2382  05BD  1406               	bsf	6,0
  2383  05BE  1486               	bsf	6,1
  2384  05BF  1506               	bsf	6,2
  2385  05C0  1186               	bcf	6,3
  2386                           
  2387                           ;Keypad.c: 43: if (RB4 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB4==0); return 'C'; }
  2388  05C1  1A06               	btfsc	6,4
  2389  05C2  2DD4               	goto	l695
  2390  05C3  3007               	movlw	7
  2391  05C4  00F2               	movwf	??_READ_SWITCHES+2
  2392  05C5  3058               	movlw	88
  2393  05C6  00F1               	movwf	??_READ_SWITCHES+1
  2394  05C7  305E               	movlw	94
  2395  05C8  00F0               	movwf	??_READ_SWITCHES
  2396  05C9                     u1357:	
  2397  05C9  0BF0               	decfsz	??_READ_SWITCHES,f
  2398  05CA  2DC9               	goto	u1357
  2399  05CB  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2400  05CC  2DC9               	goto	u1357
  2401  05CD  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2402  05CE  2DC9               	goto	u1357
  2403  05CF  2DD0               	nop2
  2404  05D0                     l696:	
  2405  05D0  260D               	call	PL5	;select bank 0
  2406  05D1  1A06               	btfsc	6,4
  2407  05D2  3443               	retlw	67
  2408  05D3  2DD0               	goto	l696
  2409  05D4                     l695:	
  2410                           
  2411                           ;Keypad.c: 44: if (RB5 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB5==0); return '0'; }
  2412  05D4  1A86               	btfsc	6,5
  2413  05D5  2DE7               	goto	l699
  2414  05D6  3007               	movlw	7
  2415  05D7  00F2               	movwf	??_READ_SWITCHES+2
  2416  05D8  3058               	movlw	88
  2417  05D9  00F1               	movwf	??_READ_SWITCHES+1
  2418  05DA  305E               	movlw	94
  2419  05DB  00F0               	movwf	??_READ_SWITCHES
  2420  05DC                     u1367:	
  2421  05DC  0BF0               	decfsz	??_READ_SWITCHES,f
  2422  05DD  2DDC               	goto	u1367
  2423  05DE  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2424  05DF  2DDC               	goto	u1367
  2425  05E0  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2426  05E1  2DDC               	goto	u1367
  2427  05E2  2DE3               	nop2
  2428  05E3                     l700:	
  2429  05E3  260D               	call	PL5	;select bank 0
  2430  05E4  1A86               	btfsc	6,5
  2431  05E5  3430               	retlw	48
  2432  05E6  2DE3               	goto	l700
  2433  05E7                     l699:	
  2434                           
  2435                           ;Keypad.c: 45: if (RB6 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB6==0); return '='; }
  2436  05E7  1B06               	btfsc	6,6
  2437  05E8  2DFA               	goto	l703
  2438  05E9  3007               	movlw	7
  2439  05EA  00F2               	movwf	??_READ_SWITCHES+2
  2440  05EB  3058               	movlw	88
  2441  05EC  00F1               	movwf	??_READ_SWITCHES+1
  2442  05ED  305E               	movlw	94
  2443  05EE  00F0               	movwf	??_READ_SWITCHES
  2444  05EF                     u1377:	
  2445  05EF  0BF0               	decfsz	??_READ_SWITCHES,f
  2446  05F0  2DEF               	goto	u1377
  2447  05F1  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2448  05F2  2DEF               	goto	u1377
  2449  05F3  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2450  05F4  2DEF               	goto	u1377
  2451  05F5  2DF6               	nop2
  2452  05F6                     l704:	
  2453  05F6  260D               	call	PL5	;select bank 0
  2454  05F7  1B06               	btfsc	6,6
  2455  05F8  343D               	retlw	61
  2456  05F9  2DF6               	goto	l704
  2457  05FA                     l703:	
  2458                           
  2459                           ;Keypad.c: 46: if (RB7 == 0) { _delay((unsigned long)((250)*(20000000/4000.0))); while (
      +                          RB7==0); return '+'; }
  2460  05FA  1B86               	btfsc	6,7
  2461  05FB  346E               	retlw	110
  2462  05FC  3007               	movlw	7
  2463  05FD  00F2               	movwf	??_READ_SWITCHES+2
  2464  05FE  3058               	movlw	88
  2465  05FF  00F1               	movwf	??_READ_SWITCHES+1
  2466  0600  305E               	movlw	94
  2467  0601  00F0               	movwf	??_READ_SWITCHES
  2468  0602                     u1387:	
  2469  0602  0BF0               	decfsz	??_READ_SWITCHES,f
  2470  0603  2E02               	goto	u1387
  2471  0604  0BF1               	decfsz	??_READ_SWITCHES+1,f
  2472  0605  2E02               	goto	u1387
  2473  0606  0BF2               	decfsz	??_READ_SWITCHES+2,f
  2474  0607  2E02               	goto	u1387
  2475  0608  2E09               	nop2
  2476  0609                     l708:	
  2477  0609  260D               	call	PL5	;select bank 0
  2478  060A  1B86               	btfsc	6,7
  2479  060B  342B               	retlw	43
  2480  060C  2E09               	goto	l708
  2481  060D                     __end_of_READ_SWITCHES:	
  2482                           ;Keypad.c: 48: return 'n';
  2483                           
  2484  060D                     PL5:	
  2485  060D  1283               	bcf	3,5	;RP0=0, select bank0
  2486  060E  1303               	bcf	3,6	;RP1=0, select bank0
  2487  060F  0008               	return
  2488                           
  2489                           	psect	text370
  2490  03CE                     __ptext370:	
  2491 ;; =============== function ___bmul ends ============
  2492                           
  2493                           
  2494 ;; *************** function _InitKeypad *****************
  2495 ;; Defined at:
  2496 ;;		line 6 in file "C:\Users\Saeed\Desktop\PIC16F877 Calculator Code\Code\Keypad.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;		None
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;		None
  2501 ;; Return value:  Size  Location     Type
  2502 ;;		None               void
  2503 ;; Registers used:
  2504 ;;		wreg, status,2
  2505 ;; Tracked objects:
  2506 ;;		On entry : 17F/0
  2507 ;;		On exit  : 17F/20
  2508 ;;		Unchanged: FFE80/0
  2509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2510 ;;      Params:         0       0       0       0       0
  2511 ;;      Locals:         0       0       0       0       0
  2512 ;;      Temps:          0       0       0       0       0
  2513 ;;      Totals:         0       0       0       0       0
  2514 ;;Total ram usage:        0 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; This function calls:
  2517 ;;		Nothing
  2518 ;; This function is called by:
  2519 ;;		_main
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522  03CE                     _InitKeypad:	
  2523                           
  2524                           ;Keypad.c: 7: PORTB = 0x00;
  2525                           
  2526                           ; Regs used in _InitKeypad: [wreg+status,2]
  2527  03CE  0186               	clrf	6	;volatile
  2528                           
  2529                           ;Keypad.c: 8: TRISB = 0xF0;
  2530  03CF  30F0               	movlw	240
  2531  03D0  1683               	bsf	3,5	;RP0=1, select bank1
  2532  03D1  0086               	movwf	6	;volatile
  2533                           
  2534                           ;Keypad.c: 11: OPTION_REG &= 0x7F;
  2535  03D2  1381               	bcf	1,7	;volatile
  2536  03D3  0008               	return
  2537  03D4                     __end_of_InitKeypad:	
  2538                           
  2539                           	psect	text371
  2540  0000                     __ptext371:	
  2541 ;; =============== function _InitKeypad ends ============
  2542                           
  2543  007E                     btemp	set	126	;btemp
  2544  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sun Nov 25 18:52:28 2012

                         pc 0002              ___bmul@product 0071                ___awdiv@sign 0075  
                        fsr 0004         ___wmul@multiplicand 0072                         l700 05E3  
                       l703 05FA                         l704 05F6                         l643 0000  
                       l651 04F7                         l708 0609                         l660 0519  
                       l652 04F3                         l716 0000                         l646 04E4  
                       l671 055A                         l663 0534                         l655 050A  
                       l647 04E0                         l680 0580                         l672 0556  
                       l664 0530                         l656 0506                         l691 05BD  
                       l683 0597                         l675 056D                         l667 0547  
                       l659 051D                         l692 05B9                         l684 0593  
                       l676 0569                         l668 0543                         l695 05D4  
                       l687 05AA                         l679 0584                         l696 05D0  
                       l688 05A6                         l699 05E7                         _RB0 0030  
                       _RB1 0031                         _RB2 0032                         _RB3 0033  
                       _RD0 0040                         _RB4 0034                         _RD1 0041  
                       _RB5 0035                         _RB6 0036                         _RB7 0037  
                       _RD4 0044                         _RD5 0045                         _RD6 0046  
                       _RD7 0047                         u665 073F          disp_num@TenthDigit 007C  
               get_func@chf 0077                         fsr0 0004                        l2040 04C0  
                      l2071 0000                        l4000 0000                        l1362 0000  
                      l4010 0000                        l4002 0000                        l4020 0000  
                      l4012 0000                        l4004 0000                        l1365 0000  
                      l1374 0000                        l4030 0453                        l1359 0000  
                      l2087 06BC                        l1368 0000                        l2088 06D0  
                      l4032 0463                        l4040 04A1                        l4024 0000  
                      l4016 0000                        l4008 0000                        l1377 0000  
                      l2089 0000                        l4034 0473                        l4042 04AF  
                      l4026 0000                        l4018 0000                        l4036 048A  
                      l4046 04B9                        l3620 0000                        l4068 0687  
                      l3622 0000                        l3702 0000                        l2735 0000  
                      l3624 0000                        l2729 0000                        l3634 0000  
                      l3626 0000                        l3650 0000                        l3642 0000  
                      l3810 0000                        l3636 0000                        l3628 06F0  
                      l3652 0000                        l3644 06FE                        l3660 0000  
                      l3804 07B9                        l3820 0000                        l3670 0000  
                      l3806 0000                        l3830 0000                        l3822 0000  
                      l3902 0000                        l3910 0683                        l3648 0706  
                      l3672 0728                        l3664 0000                        l3808 0000  
                      l3816 04CA                        l3824 0000                        l3840 0000  
                      l3832 0000                        l3904 0000                        l3912 0685  
                      l2882 0000                        l3682 0736                        l3674 0000  
                      l3666 071F                        l3658 0000                        l3826 0000  
                      l3842 0000                        l3834 0000                        l3850 0000  
                      l3906 0000                        l3930 0636                        l3922 0000  
                      l3692 0000                        l3684 0000                        l3828 0000  
                      l3836 0000                        l3860 0000                        l3852 0000  
                      l3844 0000                        l3908 0681                        l3940 0640  
                      l3932 0638                        l3924 062F                        l3694 074D  
                      l3838 0000                        l3870 0000                        l3862 0000  
                      l3854 0000                        l3846 0000                        l3942 0642  
                      l3934 063A                        l3926 0631                        l3696 0000  
                      l3688 0000                        l3880 0000                        l3872 0000  
                      l3864 0000                        l3856 0000                        l3848 0000  
                      l3944 0644                        l3936 063C                        l3928 0634  
                      l3960 0000                        l3698 0755                        l3882 0000  
                      l3874 0000                        l3866 0000                        l3858 0000  
                      l3890 0691                        l3946 0647                        l3938 063E  
                      l3954 0651                        l3970 0616                        l3876 0000  
                      l3868 0000                        l3884 0000                        l3892 0000  
                      l3948 064B                        l3956 0674                        l3878 0000  
                      l3894 0000                        l3982 062B                        l3990 0000  
                      l3888 0000                        l3896 0000                        l3968 0627  
                      l3992 0000                        l3898 0000                        l3994 0000  
                      l3986 0000                        l3996 03DE                        l3988 0000  
                      l3998 0000                        STR_1 0018                        STR_2 0009  
                      STR_3 0018                        u1207 07A6                        u1217 07BE  
                      u1307 0562                        u1227 07C9                        u1317 0579  
                      u1237 04D9                        u1157 07E9                        u1327 058C  
                      u1247 04EC                        u1167 0768                        u1337 059F  
                      u1257 04FF                        u1177 0779                        u1347 05B2  
                      u1267 0512                        u1187 0787                        u1357 05C9  
                      u1277 0529                        u1197 0796                        u1367 05DC  
                      u1287 053C                        u1377 05EF                        u1297 054F  
                      u1387 0602                        _main 03D4                        btemp 007E  
                      start 0000           ___bmul@multiplier 0072             __end_of_InitLCD 07B9  
    __size_of_READ_SWITCHES 0141                disp_num@numb 0078                       ?_main 0070  
           __end_of___awdiv 075A             ___awdiv@divisor 0070             ___awdiv@counter 0074  
                     _PORTB 0006                       _PORTD 0008                       _TRISB 0086  
           __end_of_get_num 0679                       pclath 000A                       status 0003  
   __size_of_WriteDataToLCD 0012                       wtemp0 007E             _ToggleEpinOfLCD 07B9  
                _InitKeypad 03CE                __end_of_main 04C1                      ??_main 007D  
          ??_ClearLCDScreen 0073          __size_of_DispError 0017            ___awdiv@dividend 0072  
             _READ_SWITCHES 04CC                      _TRISD0 0440                      _TRISD1 0441  
                    _TRISD4 0444                      _TRISD5 0445                      _TRISD6 0446  
                    _TRISD7 0447                   ??_InitLCD 0073                      _GetKey 04C1  
          __end_of_get_func 062D            __end_of_disp_num 06DC                      ___bmul 06EE  
                    ___wmul 06FC                   ??___awdiv 0074            ___awdiv@quotient 0076  
         WriteStringToLCD@s 0073                   ??_get_num 0079           ?_WriteStringToLCD 0070  
        ??_WriteStringToLCD 0073              ?_READ_SWITCHES 0070     __end_of_ToggleEpinOfLCD 07CF  
         __end_of_DispError 0690         ___bmul@multiplicand 0070                 ?_InitKeypad 0070  
            __pcstackCOMMON 0070    WriteCommandToLCD@Command 0072              _WriteDataToLCD 06DC  
                   ?_GetKey 0070                  __pmaintext 03D4                     ?___bmul 0070  
     WriteDataToLCD@LCDChar 0072                     ?___wmul 0070             ??_READ_SWITCHES 0070  
       __size_of_InitKeypad 0006                   ?_get_func 0070                   ?_disp_num 0078  
    __end_of_WriteDataToLCD 06EE            ?_ToggleEpinOfLCD 0070                     _InitLCD 075A  
           __size_of_GetKey 000B             __size_of___bmul 000E                     ___awdiv 0715  
           __size_of___wmul 0019                     _get_num 062D                     main@key 0025  
                ??_get_func 0077                  ??_disp_num 007A        end_of_initialization 03CA  
           ?_WriteDataToLCD 0070                   GetKey@key 0073                  get_num@num 007A  
 __size_of_WriteStringToLCD 0017           disp_num@UnitDigit 007B                ??_InitKeypad 0070  
            __end_of_GetKey 04CC                   _DispError 0679              __end_of___bmul 06FC  
            __end_of___wmul 0715         start_initialization 03CA          __end_of_InitKeypad 03D4  
   __size_of_ClearLCDScreen 000E                    ??_GetKey 0073                    ??___bmul 0071  
                  ??___wmul 0074                  ?_DispError 0075               __pcstackBANK0 0020  
             DispError@numb 0075           __size_of_get_func 001D           __size_of_disp_num 0035  
                  ?_InitLCD 0070                    ?___awdiv 0070                   __ptext360 0690  
                 __ptext361 075A                   __ptext370 03CE                   __ptext362 06DC  
                 __ptext354 0000                   __ptext371 0000                   __ptext363 07CF  
                 __ptext355 0610                   __ptext364 04C1                   __ptext356 062D  
                 __ptext365 07B9                   __ptext357 0679                   __ptext366 04CC  
                 __ptext358 06A7                   __ptext367 0715                   __ptext359 07E1  
                 __ptext368 06FC                   __ptext369 06EE                   __pstrings 0003  
                  ?_get_num 0077            ??_WriteDataToLCD 0072       __end_of_READ_SWITCHES 060D  
            ___wmul@product 0074            _WriteStringToLCD 0690    __size_of_ToggleEpinOfLCD 0016  
               ??_DispError 0077                 __stringbase 0008           ___wmul@multiplier 0070  
                 get_num@ch 0079              _ClearLCDScreen 07E1           _WriteCommandToLCD 07CF  
        ?_WriteCommandToLCD 0070            __size_of_InitLCD 005F         ??_WriteCommandToLCD 0072  
          __size_of___awdiv 0045            __size_of_get_num 004C      __end_of_ClearLCDScreen 07EF  
 __end_of_WriteCommandToLCD 07E1                    _get_func 0610                    _disp_num 06A7  
             __size_of_main 00ED                    main@func 0020                    main@num1 0021  
                  main@num2 0023           ??_ToggleEpinOfLCD 0070             ?_ClearLCDScreen 0070  
                 stringcode 0003                  _OPTION_REG 0081    __end_of_WriteStringToLCD 06A7  
                  stringdir 0003                    stringtab 0003  __size_of_WriteCommandToLCD 0012  
