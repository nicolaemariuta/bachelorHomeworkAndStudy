--
-- Generated by VASY
--
ENTITY divider_data IS
PORT(
  op_a	: IN BIT_VECTOR(3 DOWNTO 0);
  op_b	: IN BIT_VECTOR(3 DOWNTO 0);
  result	: OUT BIT_VECTOR(7 DOWNTO 0);
  clk	: IN BIT;
  reset	: IN BIT;
  load_op	: IN BIT;
  end_op	: IN BIT;
  shift_a	: IN BIT;
  shift_p_neg	: IN BIT;
  shift_p_poz	: IN BIT;
  sub_p_b	: IN BIT;
  add_p_b	: IN BIT;
  add_final	: IN BIT;
  neg_p_p	: OUT BIT;
  neg_p_r	: OUT BIT;
  vdd	: IN BIT;
  vss	: IN BIT
);
END divider_data;

ARCHITECTURE VBE OF divider_data IS

  SIGNAL rtlsum_2	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlcarry_2	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlsum_1	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlcarry_1	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlsum_0	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlcarry_0	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlexts_2	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlexts_1	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlexts_0	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL a	: REG_VECTOR(3 DOWNTO 0) REGISTER;
  SIGNAL b	: REG_VECTOR(3 DOWNTO 0) REGISTER;
  SIGNAL p	: REG_VECTOR(4 DOWNTO 0) REGISTER;
  SIGNAL r	: REG_VECTOR(7 DOWNTO 0) REGISTER;
  SIGNAL reg_p_reddef_34	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL reg_p_reddef_32	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL reg_p_reddef_30	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL reg_p_reddef_28	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL reg_p_reddef_26	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL reg_a_reddef_19	: BIT_VECTOR(3 DOWNTO 0);
BEGIN

  rtlcarry_2(0) <= '1';
  rtlsum_2 <= ((p XOR NOT(rtlexts_2)) XOR rtlcarry_2);
  rtlcarry_2(4 downto 1) <= (((p(3 downto 0) AND NOT(rtlexts_2(3 downto 0))) OR (p(3 downto 0) AND rtlcarry_2(3 downto 0)
)) OR (NOT(rtlexts_2(3 downto 0)) AND rtlcarry_2(3 downto 0)));
  rtlcarry_1(0) <= '0';
  rtlsum_1 <= ((p XOR rtlexts_1) XOR rtlcarry_1);
  rtlcarry_1(4 downto 1) <= (((p(3 downto 0) AND rtlexts_1(3 downto 0)) OR (p(3 downto 0) AND rtlcarry_1(3 downto 0)
)) OR (rtlexts_1(3 downto 0) AND rtlcarry_1(3 downto 0)));
  rtlcarry_0(0) <= '0';
  rtlsum_0 <= ((p XOR rtlexts_0) XOR rtlcarry_0);
  rtlcarry_0(4 downto 1) <= (((p(3 downto 0) AND rtlexts_0(3 downto 0)) OR (p(3 downto 0) AND rtlcarry_0(3 downto 0)
)) OR (rtlexts_0(3 downto 0) AND rtlcarry_0(3 downto 0)));
  rtlexts_2 <= ('0' & b);
  rtlexts_1 <= ('0' & b);
  rtlexts_0 <= ('0' & b);
  result <= r;
  neg_p_r <= p(4);
  LABEL0 : BLOCK  ((clk = '1') AND NOT(clk'STABLE) )
  BEGIN
    r <= GUARDED "00000000" WHEN (NOT(reset) OR load_op) ELSE
     (a & p(3 downto 0)) WHEN (reset AND end_op AND NOT(load_op)) ELSE r;
  END BLOCK LABEL0;
  neg_p_p <= p(4);
  LABEL1 : BLOCK  ((clk = '1') AND NOT(clk'STABLE) )
  BEGIN
    p <= GUARDED "00000" WHEN (NOT(add_final) AND NOT(sub_p_b) AND NOT(shift_p_poz) AND (load_op OR NOT(reset
)) AND NOT(shift_p_neg) AND NOT(add_p_b)) ELSE
     (((add_final AND reg_p_reddef_34(4)) OR (NOT(add_final) AND ((sub_p_b AND ((add_p_b
 AND reg_p_reddef_32(4)) OR (NOT(add_p_b) AND reg_p_reddef_30(4)))) OR (NOT(sub_p_b
) AND ((shift_p_poz AND ((shift_p_neg AND ((add_p_b AND reg_p_reddef_32(4)) OR (
NOT(add_p_b) AND reg_p_reddef_28(4)))) OR (NOT(shift_p_neg) AND ((add_p_b AND reg_p_reddef_32(4)
) OR (NOT(add_p_b) AND reg_p_reddef_26(4)))))) OR (NOT(shift_p_poz) AND ((shift_p_neg
 AND NOT(add_p_b) AND reg_p_reddef_28(4)) OR (NOT(shift_p_neg AND NOT(add_p_b)) 
AND reg_p_reddef_32(4))))))))) & ((add_final AND reg_p_reddef_34(3)) OR (NOT(add_final
) AND ((sub_p_b AND ((add_p_b AND reg_p_reddef_32(3)) OR (NOT(add_p_b) AND reg_p_reddef_30(3)
))) OR (NOT(sub_p_b) AND ((shift_p_poz AND ((shift_p_neg AND ((add_p_b AND reg_p_reddef_32(3)
) OR (NOT(add_p_b) AND reg_p_reddef_28(3)))) OR (NOT(shift_p_neg) AND ((add_p_b 
AND reg_p_reddef_32(3)) OR (NOT(add_p_b) AND reg_p_reddef_26(3)))))) OR (NOT(shift_p_poz
) AND ((shift_p_neg AND NOT(add_p_b) AND reg_p_reddef_28(3)) OR (NOT(shift_p_neg
 AND NOT(add_p_b)) AND reg_p_reddef_32(3))))))))) & ((add_final AND reg_p_reddef_34(2)
) OR (NOT(add_final) AND ((sub_p_b AND ((add_p_b AND reg_p_reddef_32(2)) OR (NOT
(add_p_b) AND reg_p_reddef_30(2)))) OR (NOT(sub_p_b) AND ((shift_p_poz AND ((shift_p_neg
 AND ((add_p_b AND reg_p_reddef_32(2)) OR (NOT(add_p_b) AND reg_p_reddef_28(2)))
) OR (NOT(shift_p_neg) AND ((add_p_b AND reg_p_reddef_32(2)) OR (NOT(add_p_b) 
AND reg_p_reddef_26(2)))))) OR (NOT(shift_p_poz) AND ((shift_p_neg AND NOT(add_p_b
) AND reg_p_reddef_28(2)) OR (NOT(shift_p_neg AND NOT(add_p_b)) AND reg_p_reddef_32(2)
)))))))) & ((add_final AND reg_p_reddef_34(1)) OR (NOT(add_final) AND ((sub_p_b 
AND ((add_p_b AND reg_p_reddef_32(1)) OR (NOT(add_p_b) AND reg_p_reddef_30(1)))) 
OR (NOT(sub_p_b) AND ((shift_p_poz AND ((shift_p_neg AND ((add_p_b AND reg_p_reddef_32(1)
) OR (NOT(add_p_b) AND reg_p_reddef_28(1)))) OR (NOT(shift_p_neg) AND ((add_p_b 
AND reg_p_reddef_32(1)) OR (NOT(add_p_b) AND reg_p_reddef_26(1)))))) OR (NOT(shift_p_poz
) AND ((shift_p_neg AND NOT(add_p_b) AND reg_p_reddef_28(1)) OR (NOT(shift_p_neg
 AND NOT(add_p_b)) AND reg_p_reddef_32(1))))))))) & ((add_final AND reg_p_reddef_34(0)
) OR (NOT(add_final) AND ((sub_p_b AND ((reg_p_reddef_32(0) AND add_p_b) OR (reg_p_reddef_30(0)
 AND (reg_p_reddef_32(0) OR NOT(add_p_b))))) OR (NOT(sub_p_b) AND ((shift_p_poz 
AND ((reg_p_reddef_32(0) AND add_p_b) OR (reg_p_reddef_28(0) AND shift_p_neg AND (reg_p_reddef_32(0)
 OR NOT(add_p_b))) OR (reg_p_reddef_26(0) AND ((reg_p_reddef_32(0) AND add_p_b) 
OR ((reg_p_reddef_28(0) OR NOT(shift_p_neg)) AND (reg_p_reddef_32(0) OR NOT(add_p_b
))))))) OR (NOT(shift_p_poz) AND ((reg_p_reddef_32(0) AND add_p_b) OR (NOT(shift_p_neg
) AND reg_p_reddef_32(0)) OR (reg_p_reddef_28(0) AND (reg_p_reddef_32(0) OR (shift_p_neg
 AND (reg_p_reddef_32(0) OR NOT(add_p_b))))))))))))) WHEN (add_final OR sub_p_b OR shift_p_poz OR shift_p_neg OR add_p_b) ELSE p;
  END BLOCK LABEL1;
  reg_p_reddef_34 <= rtlsum_0;
  reg_p_reddef_32 <= rtlsum_1;
  reg_p_reddef_30 <= rtlsum_2;
  reg_p_reddef_28 <= (p(3 downto 0) & a(3));
  reg_p_reddef_26 <= (p(3 downto 0) & a(3));
  LABEL2 : BLOCK  ((clk = '1') AND NOT(clk'STABLE) )
  BEGIN
    b <= GUARDED "0000" WHEN NOT(reset) ELSE
     op_b WHEN (reset AND load_op) ELSE b;
  END BLOCK LABEL2;
  LABEL3 : BLOCK  ((clk = '1') AND NOT(clk'STABLE) )
  BEGIN
    a <= GUARDED "0000" WHEN NOT(reset) ELSE
     (((shift_a AND NOT(load_op) AND reg_a_reddef_19(3)) OR (NOT(shift_a AND NOT(load_op
)) AND op_a(3))) & ((shift_a AND NOT(load_op) AND reg_a_reddef_19(2)) OR (NOT(shift_a
 AND NOT(load_op)) AND op_a(2))) & ((shift_a AND NOT(load_op) AND reg_a_reddef_19(1)
) OR (NOT(shift_a AND NOT(load_op)) AND op_a(1))) & ((shift_a AND reg_a_reddef_19(0)
 AND NOT(load_op)) OR (op_a(0) AND (NOT(shift_a) OR reg_a_reddef_19(0) OR load_op
)))) WHEN (reset AND (shift_a OR load_op)) ELSE a;
  END BLOCK LABEL3;
  reg_a_reddef_19 <= (a(2 downto 0) & NOT(p(4)));
END VBE;
