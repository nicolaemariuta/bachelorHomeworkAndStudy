--
-- Generated by VASY
--
ENTITY cale_date IS
PORT(
  clk	: IN BIT;
  reset	: IN BIT;
  op1	: IN BIT_VECTOR(3 DOWNTO 0);
  op2	: IN BIT_VECTOR(3 DOWNTO 0);
  cat	: OUT BIT_VECTOR(3 DOWNTO 0);
  rest	: OUT BIT_VECTOR(4 DOWNTO 0);
  doiter	: IN BIT;
  load	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
);
END cale_date;

ARCHITECTURE VBE OF cale_date IS

  SIGNAL rtlalc_9	: REG_VECTOR(3 DOWNTO 0) REGISTER;
  SIGNAL rtlalc_8	: REG_VECTOR(4 DOWNTO 0) REGISTER;
  SIGNAL rtlatom_7	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL rtlsum_6	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL rtlcarry_6	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL rtlatom_5	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlsum_4	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlcarry_4	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlatom_3	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlsum_2	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlcarry_2	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlsum_1	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlcarry_1	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlsum_0	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlcarry_0	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtlexts_0	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL rtldef_2	: BIT;
  SIGNAL rtldef_1	: BIT;
  SIGNAL rtldef_0	: BIT;
  SIGNAL amux	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL padd	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL b_neg	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL p_shift	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL b_mux	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL bneg	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL a	: REG_VECTOR(3 DOWNTO 0) REGISTER;
  SIGNAL b	: REG_VECTOR(4 DOWNTO 0) REGISTER;
  SIGNAL p	: REG_VECTOR(4 DOWNTO 0) REGISTER;
  SIGNAL p58_3_reddef_25	: BIT_VECTOR(4 DOWNTO 0);
  SIGNAL p82_5_def_5	: BIT;
BEGIN

  cat <= rtlalc_9;
  rest <= rtlalc_8;
  rtlcarry_6(0) <= '0';
  rtlsum_6 <= ((rtlatom_7 XOR "0001") XOR rtlcarry_6);
  rtlcarry_6(3 downto 1) <= (((rtlatom_7(2 downto 0) AND "001") OR (rtlatom_7(2 downto 0) AND rtlcarry_6(2 downto 0)
)) OR ("001" AND rtlcarry_6(2 downto 0)));
  rtlcarry_4(0) <= '0';
  rtlsum_4 <= ((rtlatom_5 XOR "00001") XOR rtlcarry_4);
  rtlcarry_4(4 downto 1) <= (((rtlatom_5(3 downto 0) AND "0001") OR (rtlatom_5(3 downto 0) AND rtlcarry_4(3 downto 0)
)) OR ("0001" AND rtlcarry_4(3 downto 0)));
  rtlcarry_2(0) <= '0';
  rtlsum_2 <= ((rtlatom_3 XOR "00001") XOR rtlcarry_2);
  rtlcarry_2(4 downto 1) <= (((rtlatom_3(3 downto 0) AND "0001") OR (rtlatom_3(3 downto 0) AND rtlcarry_2(3 downto 0)
)) OR ("0001" AND rtlcarry_2(3 downto 0)));
  rtlcarry_1(0) <= '0';
  rtlsum_1 <= (rtlexts_0 XOR rtlcarry_1);
  rtlcarry_1(4 downto 1) <= (rtlexts_0(3 downto 0) AND rtlcarry_1(3 downto 0));
  rtlcarry_0(0) <= '0';
  rtlsum_0 <= ((p_shift XOR b_mux) XOR rtlcarry_0);
  rtlcarry_0(4 downto 1) <= (((p_shift(3 downto 0) AND b_mux(3 downto 0)) OR (p_shift(3 downto 0) AND rtlcarry_0(3 downto 0)
)) OR (b_mux(3 downto 0) AND rtlcarry_0(3 downto 0)));
  rtlexts_0 <= ('0' & op2);
  padd <= rtlsum_0;
  amux <= op1 WHEN (load = '1') ELSE
     (a(2 downto 0) & p(4));
  b_mux <= rtlsum_1 WHEN (load = '1') ELSE
     b_neg;
  b_neg <= rtlsum_2 WHEN (p(3) = '1') ELSE
     b;
  rtlatom_3 <= NOT(b);
  p_shift <= (p(3 downto 0) & a(3));
  bneg <= rtlsum_4;
  rtlatom_5 <= NOT(b);
  LABEL0 : BLOCK  ((clk = '1') AND NOT(clk'STABLE) )
  BEGIN
    rtlalc_8 <= GUARDED ((rtldef_2 & rtldef_2 & rtldef_2 & rtldef_2 & rtldef_2) AND (((rtldef_0 & rtldef_0
 & rtldef_0 & rtldef_0 & rtldef_0) AND p) OR ((rtldef_1 & rtldef_1 & rtldef_1 & rtldef_1
 & rtldef_1) AND padd)));
  END BLOCK LABEL0;
  rtldef_2 <= '1' WHEN NOT((NOT(reset) = '1')) ELSE
     '0';
  rtldef_1 <= '1' WHEN p82_5_def_5 ELSE
     '0';
  rtldef_0 <= '1' WHEN NOT(p82_5_def_5) ELSE
     '0';
  p82_5_def_5 <= (p(4) = '1');
  LABEL1 : BLOCK  ((clk = '1') AND NOT(clk'STABLE) )
  BEGIN
    rtlalc_9 <= GUARDED "0000" WHEN NOT(reset) ELSE
     rtlsum_6 WHEN (reset AND doiter) ELSE rtlalc_9;
  END BLOCK LABEL1;
  rtlatom_7 <= (a(2 downto 0) & p(4));
  LABEL2 : BLOCK  ((clk = '1') AND NOT(clk'STABLE) )
  BEGIN
    p <= GUARDED "00000" WHEN NOT(reset) ELSE
     (((doiter AND NOT(load) AND padd(4)) OR (NOT(doiter AND NOT(load)) AND p58_3_reddef_25(4)
)) & ((doiter AND NOT(load) AND padd(3)) OR (NOT(doiter AND NOT(load)) AND p58_3_reddef_25(3)
)) & ((doiter AND NOT(load) AND padd(2)) OR (NOT(doiter AND NOT(load)) AND p58_3_reddef_25(2)
)) & ((doiter AND NOT(load) AND padd(1)) OR (NOT(doiter AND NOT(load)) AND p58_3_reddef_25(1)
)) & ((doiter AND padd(0) AND NOT(load)) OR (p58_3_reddef_25(0) AND (NOT(doiter)
 OR padd(0) OR load)))) WHEN (reset AND (doiter OR load)) ELSE p;
  END BLOCK LABEL2;
  p58_3_reddef_25 <= (op2(3) & op2);
  LABEL3 : BLOCK  ((clk = '1') AND NOT(clk'STABLE) )
  BEGIN
    b <= GUARDED "00000" WHEN NOT(reset) ELSE
     ('1' & op2) WHEN (reset AND load) ELSE b;
  END BLOCK LABEL3;
  LABEL4 : BLOCK  ((clk = '1') AND NOT(clk'STABLE) )
  BEGIN
    a <= GUARDED "0000" WHEN NOT(reset) ELSE
     amux WHEN (reset AND doiter) ELSE a;
  END BLOCK LABEL4;
END VBE;
