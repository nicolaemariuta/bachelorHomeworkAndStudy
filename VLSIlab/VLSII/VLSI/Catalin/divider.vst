--
-- Generated by VASY
--
ENTITY divider IS
PORT(
  op_a	: IN BIT_VECTOR(3 DOWNTO 0);
  op_b	: IN BIT_VECTOR(3 DOWNTO 0);
  result	: OUT BIT_VECTOR(7 DOWNTO 0);
  clk	: IN BIT;
  reset	: IN BIT;
  start	: IN BIT;
  ready	: OUT BIT;
  vdd	: IN BIT;
  vss	: IN BIT
);
END divider;

ARCHITECTURE VST OF divider IS

  SIGNAL load_op	: BIT;
  SIGNAL shift_a	: BIT;
  SIGNAL shift_p_poz	: BIT;
  SIGNAL shift_p_neg	: BIT;
  SIGNAL sub_p_b	: BIT;
  SIGNAL add_p_b	: BIT;
  SIGNAL add_final	: BIT;
  SIGNAL end_op	: BIT;
  SIGNAL neg_p_p	: BIT;
  SIGNAL neg_p_r	: BIT;

  COMPONENT divider_data
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  op_a	: IN BIT_VECTOR(3 DOWNTO 0);
  op_b	: IN BIT_VECTOR(3 DOWNTO 0);
  result	: OUT BIT_VECTOR(7 DOWNTO 0);
  clk	: IN BIT;
  reset	: IN BIT;
  load_op	: IN BIT;
  end_op	: IN BIT;
  shift_a	: IN BIT;
  shift_p_poz	: IN BIT;
  shift_p_neg	: IN BIT;
  sub_p_b	: IN BIT;
  add_p_b	: IN BIT;
  add_final	: IN BIT;
  neg_p_p	: OUT BIT;
  neg_p_r	: OUT BIT
  );
  END COMPONENT;

  COMPONENT divider_control
  PORT(
  vss	: IN BIT;
  vdd	: IN BIT;
  clk	: IN BIT;
  reset	: IN BIT;
  start	: IN BIT;
  neg_p_p	: IN BIT;
  neg_p_r	: IN BIT;
  ready	: OUT BIT;
  end_op	: OUT BIT;
  load_op	: OUT BIT;
  shift_a	: OUT BIT;
  shift_p_poz	: OUT BIT;
  shift_p_neg	: OUT BIT;
  sub_p_b	: OUT BIT;
  add_p_b	: OUT BIT;
  add_final	: OUT BIT
  );
  END COMPONENT;

BEGIN

  control : divider_control
  PORT MAP (
    add_final => add_final,
    add_p_b => add_p_b,
    sub_p_b => sub_p_b,
    shift_p_neg => shift_p_neg,
    shift_p_poz => shift_p_poz,
    shift_a => shift_a,
    load_op => load_op,
    end_op => end_op,
    ready => ready,
    neg_p_r => neg_p_r,
    neg_p_p => neg_p_p,
    start => start,
    reset => reset,
    clk => clk,
    vdd => vdd,
    vss => vss
  );
  data : divider_data
  PORT MAP (
    op_a => op_a,
    op_b => op_b,
    result => result,
    add_final => add_final,
    add_p_b => add_p_b,
    sub_p_b => sub_p_b,
    shift_p_neg => shift_p_neg,
    shift_p_poz => shift_p_poz,
    shift_a => shift_a,
    load_op => load_op,
    end_op => end_op,
    neg_p_r => neg_p_r,
    neg_p_p => neg_p_p,
    reset => reset,
    clk => clk,
    vdd => vdd,
    vss => vss
  );
END VST;
