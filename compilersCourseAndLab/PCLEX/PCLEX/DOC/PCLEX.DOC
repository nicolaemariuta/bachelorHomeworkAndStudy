






                                    PREFACE                                    PREFACE


           ABRAXAS PCLEX  is a  program generator for writing lexical
           scanners.   Lexical scanners  read a  stream of characters
           and  divide  it  into  identifiers,  keywords,  and  other
           symbols of  the  target  language.    PCLEX  translates  a
           scanner written  in the Scanner Description Language (SDL)                                   ____________________________      
           into the  host language  C.   SDL is a high level language
           oriented towards  string  matching.    SDL  is  a  special
           purpose language;  where the  generality of  a programming
           language is  needed, scanner  descriptions can be extended
           with code sections written in C.

           SDL allows  software developers to concentrate on what the
           scanner recognizes  instead of  getting bogged down in the
           details of  how.  It reduces the work necessary to bring a
           project to  completion.   Programs are  done  sooner  with
           fewer errors and updates are simplified.

           PCLEX is  source file  compatible with  UNIX LEX, uses the
           faster FLEX  algorithms, and  has a  command  line  format
           similar to  PCYACC.   It is  self-contained and  does  not
           require  additional  source,  object,  or  library  files.
           PCLEX generated  scanners  integrate  easily  with  PCYACC
           generated parsers.



























                                     Page 1






           PCLEX Users'                                         Manual
           January 17, 1990

           

                                  I. OVERVIEW                                  I. OVERVIEW


           This manual describes the ABRAXAS PCLEX features and gives
           examples of  both standalone  text processing programs and
           lexical scanners.   It  is both  a tutorial on LEX use and
           the reference  manual for ABRAXAS PCLEX.  It is useful for
           all   users   from   novices   to   experienced   software
           professionals.


           1. Typographic Conventions           1. Typographic Conventions

           PCLEX is largely independent of the characteristics of the
           hardware it  is running  on.  It has been adapted for most
           microcomputer  systems  and  can  be  easily  adapted  for
           others.   Therefore,  the  presentation  also  is  largely
           system independent.   Where  a specific  system is used to
           make the  discussion concrete, an IBM-PC/XT running MS-DOS
           is used.   In  the appendix,  there  are  tips  on  system
           dependent characteristics of PCLEX, including installation
           and hardware and software requirements.

           Throughout this manual, the following typefaces and syntax
           conventions are used to aid clarity:

           1).  Words   or  phrases  that  have  important  technical
           meanings or  that have  special interpretations  in  PCLEX
           will be  underlined when  they first  appear.  Definitions
           and/or explanations  are given  at this time in the normal
           text style.

           Example:  PCLEX   programs  are  written  in  the  scanner                                                              _______
           description language,  or  SDL,  which  is  a  high  level           ____________________                                      
           language for lexical specifications of computer input.

           2).  When  illustrating  user-machine  interactions,  user
           entered text  is in italics.  Messages or prompts from the
           computer are  in  normal  text.    A  carriage  return  is
           represented as <CR>.                          ____ 

           Example: C>pclex example.l<CR>                      ___________________

           3). Displays,  such as  diagrams or code listings, will be
           printed in  a typewriter-like font.  They will be indented
           to help you distinguish them from surrounding text.

           Example: The following is a small scanner description file
           that you will see again later in the tutorials:



                                     Page 2






           PCLEX Users'                                         Manual
           January 17, 1990

                
                letter          [a-zA-Z]
                %%
                letter+         ECHO;
                .               ;


           2. Manual Organization           2. Manual Organization

           This manual  contains twelve  chapters and six appendices.
           The chapter contents are:

           Chapter 2 is  an overview  of PCLEX:  its origin, history,
           and evolution.

           Chapter 3  tells   how  to   run   PCLEX,   its   filename
           conventions, and the command line options.

           Chapter 4  presents some  basic concepts about programming
           languages, compilers, and translators.

           Chapter 5  goes through  a simple  example of a standalone
           PCLEX program.

           Chapter  6   is  a   continuation  and  extension  of  the
           programming language  and translator discussion in Chapter
           4.   It  summarizes  the  already  introduced  programming
           concepts and introduces some new ones.

           Chapter 7  is an  example of a program with both a lexical
           scanner  and  a  parser.  The  program  handles  U.S.  and
           European dates and separates them into the day, month, and
           year.  This program uses both PCLEX and PCYACC.

           Chapter 8  discusses  the  fundamental  principles  behind
           PCLEX.   The discussion  is short  and informal.  The more
           technically oriented  reader  will  need  to  consult  the
           relevant  literature   for  the   theory  and  mathematics
           involved.

           Chapter 9 is  the reference  section on how to write PCLEX
           scanner  source   code:  the  overall  structure,  how  to
           describe the  patterns to  search for, the actions to take
           for those  pattern, and  gives  small  examples  of  PCLEX
           programs.

           Chapter 10 describes  the macros, functions, and variables
           available for customizing PCLEX generated scanners.

           Chapter 11 describes  how to  interface  PCYACC  generated
           parsers and PCLEX generated scanners.



                                     Page 3






           PCLEX Users'                                         Manual
           January 17, 1990

           Chapter 12 explains  a larger  example of  a  PCLEX/PCYACC
           application, a syntax analyzer for ANSI C.

           Appendix  I   gives  the   PCLEX  hardware   and  software
           requirements and tells how to install PCLEX.

           Appendix II  lists the  error messages, explains what they
           mean, and gives suggestions on what to change.

           Appendix III  gives  a  list  of  references  for  further
           reading.

           Appendix IV  is a  glossary of  technical words and jargon
           used in this manual.

           Appendix V  lists the  differences between  UNIX  LEX  and
           PCLEX.

           Appendix VI lists the differences between FLEX and PCLEX.



































                                     Page 4






           PCLEX Users'                                         Manual
           January 17, 1990

           

                             II. OVERVIEW OF PCLEX                             II. OVERVIEW OF PCLEX


           This chapter  gives a  brief historical  overview of PCLEX
           and a description of its operation at an abstract level.


           1. History           1. History

           PCLEX is  an descendent  of FLEX  (Fast LEX),  which is an
           improved version of LEX.  LEX was first publicly described
           in an  article by  Michael Lesk  and Eric  Schmidt.    The
           article is  one of  the  most  widely  cited  in  computer
           literature.   That version of LEX was designed, coded, and
           debugged by  Eric Schmidt,  based on ideas from Stephen C.
           Johnson and  Alfred Aho.   FLEX  was  programmed  by  Vern
           Paxson and  Kevin Gong,  based on  ideas developed  by Van
           Jacobson.   FLEX added some useful additional features and
           significantly speeded  up both  the generated scanners and
           scanner generation.  LEX (and more recently FLEX) has been
           part of  the standard  language tools provided in the UNIX
           operating system environments.  PCLEX is a port to  MS-DOS
           of FLEX.

           During the  past decade or so, numerous software projects,
           both large  and small,  have been  developed with LEX.  As
           such, LEX  has historically  been one of the most valuable
           tools available  to application  and programming  language
           developers.   LEX can  drastically  reduce  the  time  and
           complexity normally  involved in  program    and  compiler
           development.   Compiler writing  tools  like  LEX  provide
           developers with  a  powerful  aid  to  writing  compilers,
           command interpreters, and other programs with text input.

           Because  LEX   is  such   a  useful  tool,  many  software
           developers have  ported it  to their  own systems,  or re-
           implemented it  in their own software environments.  PCLEX
           is an  example of  an  implementation  of  FLEX  on  small
           computers (IBM PC's and Macintosh's).

           PCLEX is  designed and implemented to be upward compatible
           with LEX  and FLEX.   All  of  the  features  of  LEX  are
           retained in  PCLEX, including  the improvements from FLEX.
           Although  PCLEX   has  an   almost  identical  programming
           interface with  LEX, there  are quite  a few  differences,
           which will become clear as we go along.






                                     Page 5






           PCLEX Users'                                         Manual
           January 17, 1990

           2. What PCLEX Does           2. What PCLEX Does

           PCLEX is a computer program.  Like most other programs, it
           takes input,  computes values, and produces output.  It is
           a translator, i.e., its input is in one language (SDL) and             __________                                              
           its output  is in  another (C).   Program  generators  are                                             ___________________     
           programs that  translate from  a very  high level language
           that is  tailored to  one area of programming or computing
           to a  lower level  language,  usually  a  general  purpose
           programming language  like C.   LEX  and YACC  are program
           generators  for   writing  compilers.      Compilers   are                                                      _________      
           translators from  a programming  language to  a  very  low
           level language  like assembly language or machine language
           (i.e., object  code).   PCLEX is  written using PCYACC and
           itself.

           SDL is designed for describing the text input of a program
           at the  lexical level, that is the basic words and symbols
           of the  input language.   SDL is a language for describing
           languages,  a   meta-language.    A  written  language  is                           _____________                             
           expressed as a string of characters.  Characters fall into
           several broad  groups: for  example, letters,  digits, and
           punctuation.   Identifiers and  key or  reserved words are
           built  out  of  characters  according  to  the  convention
           decided on  by the  language's  designer.    For  example,
           identifiers in  C can  contain  the  underscore  character
           ("_").   Fortran and  Pascal identifiers are limited to an
           initial letter and additional letters and digits.


























                                     Page 6






           PCLEX Users'                                         Manual
           January 17, 1990

           

                         III. COMMAND LINE AND OPTIONS                         III. COMMAND LINE AND OPTIONS


           PCLEX is  command line  driven and  can be  run from batch
           procedures and from the DOS prompt of other programs.


           1. Command Line Format           1. Command Line Format

           PCLEX  retains   the  flavor   of  PCYACC's  command  line
           interface.
           
                PCLEX [options] <filename>                    _____                         
           
           Where <filename> is the name of a scanner description file
           and [options]  is any  command line  options.  If PCLEX is
           invoked with  no arguments,  it outputs  a  short  message
           advising you of the correct command line format.


           1.1 File Name Conventions           1.1 File Name Conventions

           The <filename>  can be  any legal  MS-DOS filename.    For
           consistency and  clarity, it  is recommended that you pick
           one extension  and stick  to it.   All  examples  in  this
           manual use  the extension  ".l".   The default name of the
           output file  is the  basename (the  filename  without  any
           extensions) plus  the extension ".c".  For example, if the
           input file  name is  "example.l", the  output file name is
           "example.c".  The output file name can be changed with the
           "-c" and "-C" options (see the next section).


           1.2 Command Line Options           1.2 Command Line Options

           Command line  options are used to override default actions
           or change  the  file  name  conventions.    The  available
           options are:

           -c:  This option overrides the default C file name.
                Instead of using the basename of the scanner
                description file plus the ".c" extension, it
                uses "yylex.c".

           -C<cf>: Like -c, this option overrides the default C
                filename, but uses the name provided by the user
                in <cf>.

           -h:  Show a help screen.



                                     Page 7






           PCLEX Users'                                         Manual
           January 17, 1990

           -i:  Build a case-insensitive scanner.  The case of
                letters in the patterns is ignored and patterns
                are matched regardless of case.  The matched
                text in "yytext" is not altered, the original
                case of the scanner input is preserved.

           -l:  Suppress #line directives in scanner source
                file.

           -p<pf>:  Use the user provided scanner skeleton in
                <pf> instead of the default (see Chapter VII).

           -s:  This option suppresses the default rule (that
                unmatched input be written to "stdout").  With
                this option, if the scanner finds input  that is
                not matched by any rules, the scanner program
                quits with a "flex scanner jammed" message.

           Only the  "-c" and  "-C" options  are case-sensitive.  The
           rest are  the same  for both  upper and  lower case.   For
           example, "pclex -h" and "pclex -H" are equivalent.


           2. Command Line Options           2. Command Line Options

           This section  show how  to use  the command  line options.
           The following  example, "EXAMPLE.L",  is  used  throughout
           this section:

                letter          [a-zA-Z]
                %%
                {letter}+               ECHO;
                .                       ;

           With no  options,  PCLEX  writes  the  C  output  file  to
           "SCAN.C".


           2.1 Override Output C File Conventions (-c and -C)           2.1 Override Output C File Conventions (-c and -C)

           The "-c"  and "-C"  options override the output C filename
           convention of  PCLEX.  With the "-c" option, the output is
           written to "YYLEX.C".  For example:

                C>pclex -c example.l                  __________________

           creates "YYLEX.C" in your current directory.

           The "-C"  option lets  you specify  the name of the output
           file.  For example:

                C>pclex -Canything.c example.l                  ____________________________


                                     Page 8






           PCLEX Users'                                         Manual
           January 17, 1990

           creates "ANYTHING.C" in the current directory.


           2.2 Ask PCLEX for Help (-h and -H)           2.2 Ask PCLEX for Help (-h and -H)

           The two  help options,  "-h" and  "-H", do the same thing.
           They ask PCLEX to show a help message on the screen.  This
           display is  helpful when you are first learning how to use
           PCLEX  and   later  on   it  is  a  helpful  reminder  for
           infrequently used options.

                C>pclex -h                  ________

           shows the following message:

                Abraxas Software (R) PCLEX API Version 2.0 (FLEX)
                
                Usage: PCLEX [-chils -Coutput_file -pSkeleton_File]
                <filename>
                Available Options:
                -c : Change the output file name to "yylex.c"
                -C<f>: Change the output file name to <f>
                -h : Help (displays this message)
                -i : case Insensitive
                -l : suppress Line directives
                -p<f>: skeleton override, use <f> file
                -s : Suppress scanner output


           2.3 Generate Case-insensitive Scanner (-i and -I)           2.3 Generate Case-insensitive Scanner (-i and -I)

           Normally, PCLEX  generates scanner  that treat  upper  and
           lower case  letters as distinct.  For example, the pattern
           "abc" will  not match  "ABC".   This option tells PCLEX to
           build a  case-insensitive scanner.  The case of letters in
           PCLEX input  patterns and  the scanner will be ignored and
           the rules will be matched regardless of case.  The matched
           text in "yytext" will have case preserved.


           2.4 Suppress #line Directives in Scanner (-l and -L)           2.4 Suppress #line Directives in Scanner (-l and -L)

           Normally, #line directives are put in the C output file to
           provide a  way of  correlating line  numbers  in  compiler
           error messages  with the  original  line  in  the  scanner
           definition file.   This option causes the #line directives
           to be  omitted.   Some source level debuggers handle #line
           directives incorrectly.






                                     Page 9






           PCLEX Users'                                         Manual
           January 17, 1990

           2.5 Override Default Scanner Skeleton (-p and -P)           2.5 Override Default Scanner Skeleton (-p and -P)

           Normally,  the  generated  scanner  is  built  around  the
           default scanner skeleton.  The source code for the default
           skeleton of  a scanner  program is internal to PCLEX.  The
           "-p" option  allows a  custom scanner skeleton to be used.
           The form  of the  scanner skeleton is explained in Chapter
           VI.   The skeleton  C source,  "FLEX.SK" used to built the
           internal skeleton  is in  the \PCLEX  directory, available
           for customization.  For example:

                pclex example.l                _______________

           and

                pclex -pFLEX.SK example.l                _________________________

           are equivalent.


           2.6 Suppress Default Action (-s and -S)           2.6 Suppress Default Action (-s and -S)

           Each piece  of the scanner's input text that is matched by
           a pattern specified in the scanner description file has an
           action associated  with it.   For  scanner input  text not
           matched by  any pattern,  the  default  action  is  taken.
           Normally, the default action is to copy the unmatched text
           to the  output.   The "-s"  and "-S"  options suppress the
           default action  and unmatched  input text is an error: the
           scanner outputs  the message  "flex scanner jammed" on the
           standard error device (usually the screen) and exits.























                                     Page 10






           PCLEX Users'                                         Manual
           January 17, 1990

           

                      IV. BASICS OF PROGRAMMING LANGUAGES                      IV. BASICS OF PROGRAMMING LANGUAGES


           This chapter  introduces the  basic concepts  of  computer
           programming languages.  Some important terms used in later
           chapters are also explained.


           1. What is a Programming Language           1. What is a Programming Language

           Computers do  an  overwhelming  and  constantly  expanding
           variety  of   tasks.    Nevertheless,  computers  are  not
           intelligent.  They must be told how to do each task with a
           set of  step by step instructions, called programs.  To do                                                     ________        
           these seeming  miracles,  someone  has  to  work  out  the
           sequence of  steps to accomplish the task in minute detail
           and present this step by step program to the computer in a
           computer language.           _________________ 

           A computer  can only  directly understand programs written
           in its  own  language.    Machine  language  programs  are                                     _________________               
           written in binary digits (0's and 1's).  Machine languages                      _____________                                  
           are very  primitive.  Writing programs in machine language
           is tedious and very error-prone.  Soon after the invention
           of the  computer, symbolic  languages  were  developed  to
           shift some  of the  burden of  programming to the computer
           itself.   Instead of writing the program in binary digits,
           meaningful names  (mnemonics) were  given to  each of  the
           machine's instructions and the program can then be written
           in an  easier  to  read  symbolic  form.    At  first  the
           translation was done by hand.  Later a program was written
           in machine  language to  translate  symbolic  language  to
           machine language.   After  the first  such translator  was
           written, programming  no  longer  needed  to  be  done  in
           machine language.   These  first symbolic  languages  were
           still very  oriented toward  the machine's own instruction                                                          ___________
           set (the  computer's repertoire  of basic  actions).  They           ___                                                       
           are called assembly languages and the translator is called                      __________________                             
           an assembler.              _________ 


           2. What are Compilers           2. What are Compilers

           Translation to  machine language  is not  limited to  just
           low-level languages.   A  high-level language  describes a                                     ___________________             
           program in  terms that  are better  matched to the task at
           hand  and   human  thought   processes.     Compilers  are                                                       _________     
           translators between  high-level  languages  and  low-level
           languages.   A compiler translates the source program from                                                  ______________     
           a high-level  language to an object program in a low-level                                        ______________               


                                     Page 11






           PCLEX Users'                                         Manual
           January 17, 1990

           language (either  assembly language  or machine language).
           A preprocessor  translates from a high level language to a             ____________                                            
           similar language.    Usually,  the  preprocessor's  object
           language is a subset of its source language.

           Programs can be written that carry out the source language
           program actions directly instead of first translating them
           to  machine  language.    Such  a  program  is  called  an
           interpreter.  Interpreters skip the compilation step.  The           ___________                         ___________           
           computer runs the interpreter machine language program and
           the interpreter  runs the  source language  program.  This
           extra layer  of program  slows  down  running  the  source
           program.   Interpreters remove  the compile  step from the
           usual edit-compile-debug cycle of development.








































                                     Page 12






           PCLEX Users'                                         Manual
           January 17, 1990

           

                     V. GETTING STARTED -- A SMALL EXAMPLE                     V. GETTING STARTED -- A SMALL EXAMPLE


           This chapter  gives you an idea of how to use PCLEX with a
           standalone scanner  program.   Many simple text processing
           and statistics  gathering programs  can be quickly written
           this way  with the  aid of  PCLEX.  It is assumed that you
           are already  familiar with  MS-DOS and  the C  programming
           language.   You need  an  MS-DOS  personal  computer  with
           ABRAXAS PCLEX  and a C compiler installed to build and run
           this example.   A programming editor is helpful for making
           program modifications and experiments.

           The basics  of the  program development process is similar
           for all  standalone PCLEX programs.  This chapter gives an
           overview of  that process.   The  example program  used in
           this chapter  counts the bytes, words, and lines in a text
           file.   How to build and run the program will be shown and
           explained.   Later chapters show more complicated examples
           with more involved build procedures.


           1. Scanner Description File for Word Count Program           1. Scanner Description File for Word Count Program

           The following is the listing of the SDF for the word count
           program, WC.L.   For  reference, line numbers are added to
           the listing.

                01: /*
                02:  *  WC.L - simple standalone PCLEX application.
                03:  */
                04:
                05: %{
                06: unsigned nchar = 0; /* # of characters */
                07: unsigned nword = 0; /* # of words */
                08: unsigned nline = 0; /* # of lines */
                09: %}
                10:
                11: %%
                12:
                13: \n              nchar += 2; ++nline;
                14:
                15: [^ \t\n]+       ++nword;  nchar += yyleng;
                16:
                17: .               ++nchar;
                18:
                19: %%
                20:
                21: main()
                22: {


                                     Page 13






           PCLEX Users'                                         Manual
           January 17, 1990

                23:   yylex();
                24:   printf( "%d\t%d\t%d\n", nchar, nword, nline );
                25:   exit(0);
                26: }

           This example, though small, exhibits the typical structure
           of a  PCLEX scanner  description.  Lines 1 through 10 form
           the definitions  section, where  needed header  files  are               ____________________                                  
           included, global  variables declared,  and names  defined.
           Lines 11  through 18  make up  the rules section where the                                              _____________          
           input patterns  to match  and their  corresponding actions
           are defined.   Lines 12 through 26 are the user subroutine                                                      _______________
           section with the necessary support functions written in C.           _______                                                   
           As illustrated by this example, a scanner description file
           is made  up of three section: a definition section, a rule
           section, and a user subroutine section.  Any or all of the
           three sections can be empty.

           Lines 1  through 3  are a  comment.  SDL comments look the
           same as  C comments  and are  passed through to the output
           file intact.   The rules for SDL comment placement are not
           quite the  same as  in C.  They are explained in detail in
           Chapter 9.

           The symbol  pairs, "%{"  and "%}",  on lines  5 and  9 are
           delimiters used  in the  definitions section  to bracket C
           code, such  as preprocessor  directives, global  type  and
           structure definitions,  and global  variable declarations.
           In this  example, there  are three  variable declarations.
           PCLEX does  not look  at the code inside these delimiters,
           the code is passed through to the output file intact.

           Line  11  is  the  delimiter  separating  the  definitions
           section from  the rule section.  Line 13 says: when an end
           of line  is reached  ("\n" is  shorthand for newline), add
           two to  the character  count ("nchar")  and add one to the
           line count  ("nline").   The end  of line  in MS-DOS  text
           files is marked by two characters, a carriage return and a
           line feed.  The pattern in a rule is everything before the
           whitespace (blanks and tabs), in this case the "\" and "n"           __________                                                
           characters.   Everything from the whitespace to the end of
           the line  is the  action.   Each action  is a section of C                                            ______                   
           code executed  when  its  pattern  is  recognized  in  the
           scanner input.   Actions can be empty.  Rules normally are
           just one line long.  How to extend the action over several
           lines is explained in a later chapter.  Line 15 says: when
           a string of non-whitespace characters are found, increment
           the word count ("nword") and add the length of the matched
           text ("yyleng")  to the  character  count.    The  pattern
           matches one  or more  ("+" operator)  occurrences  of  the
           class of characters (square brackets, "[" and "]", enclose
           character classes)  that includes  everything  except  (an


                                     Page 14






           PCLEX Users'                                         Manual
           January 17, 1990

           initial "^"  complements  or  reverses  the  contents  the
           contents of  a character  class) a  space, a  tab ("\t" is
           shorthand for  tabs), and  ends of  lines.  Line 17 is the
           final rule in the rule section and says: for any character
           not otherwise  matched ("." matches any single character),
           increment the  character count.   The  blank lines between
           rules are for readability, they are not required.

           The second  "%%" delimiter  on line  19 separates the rule
           section from  the user subroutines section.  Everything in
           the user subroutine section is passed intact to the output
           file of  PCLEX.   In this example, the main function calls
           "yylex()", the scanner function generated by PCLEX, prints
           the character,  word, and  line counts,  and exits.    The
           following discussion  will  help  you  understand  how  to
           combine what  PCLEX produces  with  the  user  subroutines
           written by the programmer to make a complete C program.

           PCLEX generates C code for a function, "yylex()", and data
           tables that  together  read  the  input,  divide  it  into
           matches of  the patterns,  and execute  the  corresponding
           actions.   Technically, the "yylex()" function is a table-
           driven interpreter  that simulates  a Deterministic Finite
           State Machine  (DFSM).   DFSM are discussed in more detail
           in Chapter  8.   The rest  of the  program must  include a
           "main()" function,  do any  program setup and cleanup, and
           do any additional processing needed.


           2. Building the Executable File           2. Building the Executable File

           To invoke  PCLEX on  the scanner  description  file  WC.L,
           issue the following command:

                C>pclex wc.l                  __________

           The result  of this operation is a C program.  A file with
           the name  WC.C will  be created  in the current directory,
           which is a C program for the Word Count program.  To build
           the executable  version of  WC, invoke  the C  compiler as
           follows (the example assumes the Microsoft C compilers):

                C>cl wc.c                  _______


           3. Sample Session           3. Sample Session

           After the  executable version  of WC is built successfully
           (in  our   example,  we  have  a  WC.EXE  in  the  current
           directory), we  can use it to check the size of WC.L.  The
           following is a sample session of WC at work:



                                     Page 15






           PCLEX Users'                                         Manual
           January 17, 1990

                C>wc <wc.l                  ________
                398  64   26

           This example,  though simple,  contains almost  all of the
           parts of building a program with PCLEX.

















































                                     Page 16






           PCLEX Users'                                         Manual
           January 17, 1990

           

                          VI. BASIC CONCEPTS REVISITED                          VI. BASIC CONCEPTS REVISITED


           This chapter reviews and summarizes the important concepts
           related to  PCLEX  that  have  been  covered  so  far  and
           introduces some  new ones.   Basic technical terms will be
           listed to  prepare for  a more  formal discussion of these
           subjects in later chapters.


           1. General Concepts           1. General Concepts

           A programming  language is  an artificial language used to             _____________________                                   
           write  the   detailed  instructions   necessary  for   the
           performance of  any task by the computer.  Programs, which
           can be  of any  length, are  the basic form in which these
           instructions are  presented o  the computer for execution.
           There are  two broad classes of programming languages: low                                                                  ___
           level  languages   like  machine   language  and  assembly           ________________                                          
           language that  are machine  instruction oriented, and high                                                                 ____
           level languages like C, Basic, and Pascal that are largely           _______________                                           
           machine independent  and are  oriented towards  arithmetic
           and logical  operations.   Machine  language  is  directly
           executable  by  the  computer.    Assembly  language  maps
           directly into machine language and translation is fast and
           easy.   Programs written  in high level languages have two
           different modes  of execution:  interpreted execution  and                                           _____________________     
           compiled  execution.     In  interpreted  execution  mode,           ___________________                                       
           program statements are decoded and executed one at a time.
           Each step includes translation of a statement followed the
           appropriate machine  actions dictated  by  the  statement.
           Compiled execution  mode is  divided into  two  phases:  a
           compilation  phase   and  an   execution  phase.    During           __________________             ________________           
           compilation, a compiler translates the source program into                          ________                ______________     
           the object  program.   In the  execution phase, the object               _______________                                       
           program (in machine language) is executed.

           A programming language can be defined in a number of ways,
           some formal  and rigorous, others casual and illustrative.
           A very small language may have a finite number of programs
           and the  language could be defined by listing them all.  A
           more general  method is  to describe  the grammar  of  the                                                     _______         
           language, the  set of  rules that  outline what  the valid
           structures and  constructs are  and how they are combined.
           There exists  a body  of literature  on formal  languages,                                                   _________________ 
           languages defined with mathematical rigor.

           Define  grammar  terms  here.    Include:  terminal,  non-           Define  grammar  terms  here.    Include:  terminal,  non-
           terminal, rewriting rules, alphabet.           terminal, rewriting rules, alphabet.



                                     Page 17






           PCLEX Users'                                         Manual
           January 17, 1990

           2. Regular Expressions           2. Regular Expressions


           3. PCLEX Terminologies -- A Short Review           3. PCLEX Terminologies -- A Short Review

           PCLEX is  a scanner  generator, a  program that assists in                       __________________                            
           writing  lexical  scanners.    It  translates  the  target                                                               ______
           language's   lexical   syntax   description   in   regular           ________                                                  
           expressions into  a C  program that recognizes the symbols
           or tokens  of the target language.  The source language of              ______                                                 
           PCLEX is  the scanner  description language  (SDL).    The
           object language  of PCLEX  is the  programming language C.
           Source  programs   written  in   SDL  are  called  scanner                                                              _______
           description programs  (SDP's).   Files of  SDP are  called           ____________________                                      
           scanner description  files (SDF's).  The function of PCLEX           __________________________                                
           is to  translate a  GDF into  a C  file that  defines  the
           "yylex()" function.

           A SDP is made up of three section, a definition section, a
           rule section,  and a  user  subroutine  section,  in  that
           order.  Any or all of the three sections can be empty.  If
           the user  subroutine section  is empty,  the  second  "%%"
           delimiter can  be omitted.   The  first "%%" delimiter can
           not be omitted.






























                                     Page 18






           PCLEX Users'                                         Manual
           January 17, 1990

           

                         VII. DATES -- A SECOND EXAMPLE                         VII. DATES -- A SECOND EXAMPLE


           This chapter is a continuation of Chapter V.  It will help
           acquaint you  with the  procedure  and  style  of  program
           development  using   PCLEX  and   provide  you  with  some
           guidelines for project development.

           A general guideline for project development using PCLEX is
           a seven step process, as follows:  
           
              1)  define the problem
              2)  develop a language to express the problem and/or
                solution
              3)  separate the source language into lexical and
                syntactic parts
              4)  write the PCLEX scanner description
              5)  write the PCYACC parser description
              6)  write the auxiliary C code
              7)  build the executable program

           The DATES  program is a simple example of PCLEX and PCYACC
           working together.   The  advanced  error  processing  from
           PCYACC is  included in  this example.   The sources are in
           \DATES on the EXAMPLES disk.


           1. Problem Statement           1. Problem Statement

           The problem is recognizing dates and converting them to an
           internal form.   There  are a  variety of calendars in use
           throughout the  world.   To avoid complicating the problem
           too much,  only the  Gregorian calendar  will be  handled.
           The Gregorian  calendar (named  after  Pope  Gregory,  who
           oversaw its  development) is  currently in  use  in  North
           America, South  America, and  Europe.    To  allow  future
           extensions to  other calendars, the Julian day is used for
           the internal  form.   The Julian day is the number of days
           since Month  99,  9999  B.C.    (The  Julian  day  has  no
           connection with  the Julian calendar, which is named after
           Julius Ceasar).


           2. Developing the Source Language           2. Developing the Source Language

           While everyone  who uses  the Gregorian calendar agrees on
           the number of months and the number of days in each month,
           there is  not agreement  on how to write a date.  The U.S.
           writes dates  with the month first, then the day and year.
           Europe writes  the day  first, then  the month  and  year.


                                     Page 19






           PCLEX Users'                                         Manual
           January 17, 1990

           When the  month is  spelled out, the spelling differs from
           language to  language, though they are often recognizable.
           For this  program, only  English  months  are  recognized,
           though both orders are handled properly.

           In the  U.S., the  short form  is punctuated with slashes,
           for example:  12/31/90, the  last day  of 1990.   The long
           form is  the month,  the day,  a comma,  and the year, for
           example: December  31, 1990.    In  the  short  form,  the
           century is  almost always  left off  the year.   Two digit
           years will  be assumed  to  be  in  this  century.    This
           convention makes  short form clumsy for dates in the first
           century B.C.   The  year will  always  be  assumed  to  be
           complete in the long form.

           In Europe,  the short  form is  punctuated by periods, for
           example, 31.12.90  is the last day of 1990.  The same date
           in European long form is: 31 December 1990.

           In both  forms, the months can be abbreviated to the first
           three letters.   The  month is  always capitalized.   This
           restricted set  of date  conventions allows one program to
           handle dates  without explicitly specifying the form used.
           There is  sufficient difference  between the  forms that a
           computer program can tell which is used.


           3. Separate the Lexical and Syntactic Parts           3. Separate the Lexical and Syntactic Parts

           In isolation, the line between lexical and syntax analysis
           can be  drawn in a number of places.  For consistency with
           the usual  practice in  compilers, the scanner will handle
           whitespace, full  numbers (not  just digits), punctuation,
           and spelled-out  months.   The parser will handle form and
           correctness recognition.   Auxiliary  C code  will  handle
           date correctness  checking, month  lookup, ASCII to binary
           conversion, and output.


           4. Write the PCLEX Scanner Description           4. Write the PCLEX Scanner Description

           In the  first example,  the scanner  description contained
           the entire  program.   In this  example, the  SDF contains
           just part  of the program.  The parser and all auxiliary C
           code is in the grammar description file (GDF).                          ________________________       

                01: /* LEX.L - lexical analyzer for DATES program */
                02: %{
                03: #include <stdlib.h>
                04: #include "dates.h"
                05: #include "errorlib.h"
                06:


                                     Page 20






           PCLEX Users'                                         Manual
           January 17, 1990

                07: extern int yylval;
                08:
                09: #define MON(x)     { yylval = x;  return MONTH; }
                10: %}
                11:
                12:%%
                13:
                14: Jan("."|uary)?      MON(1); /* months */
                15: Feb("."|ruary)?     MON(2);
                16: Mar("."|ch)?        MON(3);
                17: Apr("."|il)?        MON(4);
                18: May                 MON(5);
                19: Jun("."|e)?         MON(6);
                20: Jul("."|y)?         MON(7);
                21: Aug("."|ust)?       MON(8);
                22: Sep("."|tember)?    MON(9);
                23: Oct("."|ober)?      MON(10);
                24: Nov("."|ember)?     MON(11);
                25: Dec("."|ember)?     MON(12);
                26:
                27: [0-9]+      {
                28:               yylval = atoi(yytext);
                29:               return NUMBER;
                30:             }
                31: [ \t]       ;   /* discard whitespace */
                32: \n          {
                33:               ++yylineno;
                34:               return '\n';
                35:             }
                36: .           return yytext[0];

           Lines 3  through 5  include the  necessary  header  files:
           "stdlib.h" for  the prototype  of "atoi()",  "dates.h" for
           the #defines  for the  token labels, "MONTH" and "NUMBER",
           and "errorlib.h"  for the declaration of "yylineno".  Line
           7 is  for "yylval", used to pass additional information to
           the parser.   The  #define on line 9 is used in the action
           for all  the months.   It saves typing (nice!) and ensures
           that all  months behave  the same  (important!).  The "%%"
           delimiter separates  the definition section from the rules
           section.   Lines 14 through 25 handle the months and their
           abbreviations, both with and without a period.  The period
           has a  special meaning in patterns and must be enclosed in
           double quotes  to match  itself.   The question mark after
           the right  parenthesis indicates  that  the  part  of  the
           pattern  inside   the  parentheses   is  optional.     The
           parentheses enclose  two  alternatives  separated  by  the
           vertical bar  ("|").    The  pattern  "Jan("."|uary)?"  is
           equivalent to  the three  patterns: "Jan",  "Jan"."",  and
           "January".




                                     Page 21






           PCLEX Users'                                         Manual
           January 17, 1990

           The pattern on line 27 matches integers.  The action spans
           lines 27  through 30.   Multi-line actions are enclosed in
           braces.   The matched  text is in the array "yytext".  The
           binary equivalent  is assigned  to "yylval" for use by the
           parser.

           Line 31  matches and  discards blanks  and  tabs.    Every
           action so  far ends with a "return" statement.   "yylex()"
           returns a  token with  each call by the parser.  In the WC
           example, all processing was controlled by the scanner.  In
           this example, the parser is the center of control.  If the
           action for  a pattern  does  not  return  to  the  parser,
           scanning continues  and the  next pattern  match is found.
           The action  for the  "[ \t]" pattern  does nothing and the
           parser does  not see  whitespace.   This idiom is a common
           one.   Whitespace, comments,  and ends of line are ignored
           in the grammar of most modern programming languages.

           Unlike modern  programming languages, this example program
           expects one date per line.  Ends of lines are not ignored:
           the line  count, "yylineno",  is updated  and the  scanner
           returns a token to the parser.

           Line 36  is a  catchall.   The pattern  matches any  other
           single character  and returns  it to  the parser.  This is
           also  a   common  idiom   to  pass  off  handling  invalid
           characters and single character operators and punctuation.
           The parser will handle all of these directly.


           5. Write the PCYACC Parser Description           5. Write the PCYACC Parser Description

           The parser  for the  DATES program  is built  with PCYACC.
           With minor changes, it should work with YACC or any of its
           clones and  work-alikes.   The PCYACC  specific parts  are
           noted in the explanation below.

                01: /* DATE.Y -- grammar for U.S. and European dates
                02: */
                03: %{
                04: #include <stdio.h>
                05: #include <stdlib.h>
                06: #include "errorlib.h"
                07:
                08: static void date(int month, int day, int year);
                09: %}
                10:
                11: %token MONTH NUMBER
                12:
                13: %start input
                14:
                15: %%


                                     Page 22






           PCLEX Users'                                         Manual
           January 17, 1990

                16:
                17: input       :       /* empty file is legal */
                18:             |  input date '\n'
                19:             |  input error '\n'     { yyerrok; }
                20:             ;
                21:
                22: date        : /* U.S. text form */
                23:               MONTH  day ',' year
                24:                     { date($1, $2, $4); }
                25:             | /* European text form */
                26:               day MONTH year                
                27:                     { date($2, $1, $3); }
                28:             | /* U.S. short form */
                29:               month '/' day '/' year
                30:                     { date($1, $3, $5); }
                31:             | /* European short form */
                32:               day '.' month '.' year
                33:                     { date($3, $1, $5); }
                34:             ;
                35:
                36: day         :  NUMBER
                37:             ;
                38:
                39: month       :  NUMBER
                40:             ;
                41:
                42: year        :  NUMBER
                43:             ;
                44:
                45: %%
                46:
                47: main()
                48: {
                49:   yylineno = 1;
                50:   exit(yyparse());
                51: }
                52:
                53:
                54: /* date - generic date action routine */
                55: static void date(int month, int day, int year)
                56: {
                57:   printf("%d/%d/%d\n", month, day, year);
                58: }

           The #includes  on lines  4 through  6 are  necessary  for:
           "stdio.h" -  the definition  of  the  FILE  type  used  in
           "errorlib.h", "stdlib.h" - the prototype for "exit()", and
           "errorlib.h" -  the  declaration  of  "yylineno"  that  is
           initialized in "main()".

           The "%token"  declaration on  line 11  introduces the  two
           tokens  (terminals)  used  in  the  parser  that  are  not


                                     Page 23






           PCLEX Users'                                         Manual
           January 17, 1990

           character literals.   PCYACC  will assign  values to these
           two  tokens  and  #define  them  in  the  C  header  file,
           "dates.h".   The C header file is #included by the SDF for
           these constants.

           The goal  symbol, "input",  for the grammar is declared on
           line 13.  The declarations on lines 11 and 13 are strictly
           speaking unnecessary.   Token declarations are required by
           PCYACC to  allow it  to check the grammar for consistency,
           similar to requiring a variable to be declared before use.
           The goal  symbol defaults  to the  first non-terminal that
           does not  appear on  the right  hand side of a production.
           It is explicitly declared for safety.

           Grammar Definition  Files (GDF),  like scanner  definition           _________________________                                 
           files, are divided into three sections by "%%" lines.  For
           GDF, the  sections are:  the declarations section (lines 1
           through 14),  the grammar  rule section  (lines 17 through
           43), and  the program  section (lines 47 through 58).  The
           declaration section  contains  comments,  in-line  C  code
           within "%{"  and "%}"  lines, token  declarations, and the
           goal symbol  declaration.   More complex grammars can have
           additional types of declarations.


           6. Write the Auxiliary C Code           6. Write the Auxiliary C Code


           7. Build the Program           7. Build the Program

























                                     Page 24






           PCLEX Users'                                         Manual
           January 17, 1990

           

                         VIII. PRINCIPLES BEHIND PCLEX                         VIII. PRINCIPLES BEHIND PCLEX



           1. Introduction to Formal Languages           1. Introduction to Formal Languages

           Noam Chomsky,  a linguist,  defined a  taxonomy of  formal
           languages that  is still  in use.   He  defined four broad
           classes of  languages in  terms of the grammars, which are
           4-tuples (V, T, P, S) where:                      ____________         
           
              V is an alphabet;              _                
              T in V is an alphabet of terminal symbols;              _    _                                    
              P is a finite set of rewriting rules; and              _                                        
              S, the distinguished symbol, is a member of V-T, the              _                                                   
                nonterminal symbols.

           The language  of the grammar is the set of terminal string
           that can  be generated from S.  The difference in the four                                       _                             
           types of  grammars is  the allowed  forms of the rewriting
           rules in P.  A grammar G is Chomsky type 0 if the rules in                    _             _                                  
           P have the form                _                   
           
              u ::= v          with u in V+ and v in V*.              _______               _    __     _    __ 

           That is  the left  part u is a sequence of symbols and the                                   _                                 
           right part  U can  be empty.   Chomsky type 0 grammars are                       _                                             
           also known  as phrase structure grammars.  Little work has                          _________________________                  
           been done on type 0 grammars.

           For the  type 1  grammars, the context sensitive grammars,                                          __________________________ 
           the rewriting rules are restricted to the form:   
           
              xUy ::= xuy      with U in V-T; x, y in V*, and u in              ___________           _    ___  _  _    __      _   
                V+.                __ 

           The context sensitive part in the name comes from the fact
           that U can be rewritten as u only in the context of x...y.                _                     _                        _____ 
           Context sensitive  grammars have  received quite  a bit of
           attention   from   the   theoreticians   in   linguistics,
           mathematics, and computer science.

           In the  type 2  or context  free grammars,  the  rewriting                              ______________________                 
           rules are further restricted to the form:    
           
              U ::= u     with U in V-T and u in V*.              _______          _    ___     _    __ 

           This class  of grammars  are called context free because U                                                                    _
           can be  rewritten as  u,  regardless  of  the  context  it                                 _                                   
           appears in.   The  context free  grammars  are  restricted


                                     Page 25






           PCLEX Users'                                         Manual
           January 17, 1990

           enough to be amenable to analysis and general enough to be
           useful.   Almost all  programming languages  have  context
           free grammars.

           The rewriting  rules for  the Chomsky  type 3  or  regular                                                              _______
           grammars are even more restrictive.  The form must be:            ________                                               
           
              U ::= N or U ::= WN, where N is in T and U and W are              _______    ________        _       _     _     _    
                in V-T.                   ___ 

           Regular grammars  have a  fundamental role  in both formal
           language theory  and automata  theory.  The set of strings
           generated by  a regular grammar is also the set "accepted"
           by a  simple program  (or machine)  called a  finite state
           automata (which  is more  precisely defined in Chapter 8),
           and vice  versa.   Thus we have a characterization of this
           set of  languages  in  terms  of  the  program  complexity
           required to parse them.

           Phrase structure grammars are the most general and include
           the languages  generated  by  the  other  three  types  of
           grammar.   Each of  the classes  is completely included in
           its predecessor  and  completely  includes  its  successor
           class.   That is  all regular  languages  have  a  regular
           grammar, a  context  free  grammar,  a  context  sensitive
           grammar, and a phrase structure grammar.  There are phrase
           structure languages  that  do  have  a  context  sensitive
           grammar.


           2. Regular Expressions           2. Regular Expressions


           3. Regular Languages           3. Regular Languages


           4. Nondeterministic Finite State Machines (NDFSM)           4. Nondeterministic Finite State Machines (NDFSM)


           5. Deterministic Finite State Machines (DFSM)           5. Deterministic Finite State Machines (DFSM)


           6. PCLEX -- From Regular Expressions to DFSM           6. PCLEX -- From Regular Expressions to DFSM











                                     Page 26






           PCLEX Users'                                         Manual
           January 17, 1990

           

                     IX. WRITING PCLEX SYNTAX DESCRIPTIONS                     IX. WRITING PCLEX SYNTAX DESCRIPTIONS


           A simple scanner program is:

                %%
                \t      output(' ');

           This program  converts all tabs to blanks.  The "%%" marks
           the beginning  of the  rules.  The rule contains a pattern
           to match  tabs  ("\t")  and  an  action  ("output(' ');").
           Everytime the  pattern is matched, the action is executed.
           The function  "output()" writes  a character to the output
           (usually "stdout", the standard output) and is included in
           every generated scanner.

           In general, the structure of PCLEX input files is:

                definitions
                %%
                rules
                %%
                user subroutines

           The definitions section contains pattern macro definitions
           (see  section   4),  start   condition  declarations  (see
           sections 5.1 and 5.2), and any preliminary in-line C code.
           The rules section is patterns to search for and actions to
           execute when  the pattern  is found.  The user subroutines
           are  C   support  routines  used  by  the  actions.    The
           definitions and  user subroutines  sections are  optional.
           The second  "%%" is optional, but the first is required to
           mark the beginning of the rules.

           Rules start  in the  first column and are a pattern and an
           optional  action.    Patterns  are  written  with  regular
           expressions (section  1).    Actions  (section  2)  are  C
           program fragments  to be  executed  when  the  pattern  is
           found.   Whitespace (blanks or tabs) separate patterns and
           actions.  Unmatched input is handled by the default action
           (see "-s" option in Chapter II).

           The rules  section can  be  empty.    The  default  action
           applies to  all unmatched  input.   If  the  "-s"  is  not
           specified, the  default action is to copy all input to the
           output.  The minimum PCLEX program is one line:

                %%

           It copies the input to the output.


                                     Page 27






           PCLEX Users'                                         Manual
           January 17, 1990

           C code  needed in  the scanner  can be  included in one of
           three ways.   Lines  that start  with a  "#" in  the first
           column are passed through intact. This allows preprocessor
           directives.  C comments and lines that start with a tab or
           a space  are also  passed through intact.  Arbitrary lines
           between a  "%{" line  and a  "%}"  line  are  also  passed
           through.   The bracketing  lines are  not copied  to the C
           scanner file.   The  brackets  must  start  in  the  first
           column.  For example:

                #include <stdio.h>
                #define MAX_WIDGET      100
                #define LONG_MACRO \
                        rest of the macro
                
                        /* C comments */
                %{
                int word_count = 0;
                static void do_nothing(void);
                %}

           C code  in the  definitions section  is copied to near the
           start of  the scanner.    Header  file  #includes,  global
           variables, C  macro definitions,  and redefinition  of the
           pre-defined macros  go here.   C code in the rules section
           (other than actions) is copied to the start of the scanner
           function, just  after the  scanner  function's  own  local
           variables.   Local  variables  used  by  the  actions  and
           initial code  to be  executed each  time  the  scanner  is
           called goes here.


           1. Regular Expressions           1. Regular Expressions

           A regular  expression specifies  a set  of strings  to  be
           matched.     It  contains  text  characters  (which  match
           themselves in  the  text  to  be  compared)  and  operator
           characters (which  specify repetitions, choices, and other
           features).  The letters of the alphabet and the digits are
           always text characters.


           1.1 Operators           1.1 Operators

           The operator characters are:

                " \ [] ^ - ? . * + | () $ / {} % <>

           and if  they are  to be used as text characters, they must
           be put in quotes or preceded by a backslash.  In addition,
           "#" and "/" are not text characters in the first column.



                                     Page 28






           PCLEX Users'                                         Manual
           January 17, 1990

           Whatever is  between a  pair of double quotes (") is to be
           taken as  text characters.  An operator character can also
           be turned  into a text character by preceding it by a "\",
           the escape  character.   The following  patterns  are  all
           equivalent:

                xyz\+\+
                xyz"++"
                "xyz++"

           Another use  of the  quoting mechanisms  is to get a blank
           into an expression.  Normally, blanks and tabs end a rule.
           Any blank  not within  a character class (see section 1.2)
           must be  quoted or  escaped.   PCLEX recognizes  the older
           Kernighan and  Ritchie (K&R) C escape sequences: "\n" is a
           newline, "\t"  is a  tab and "\040" is the blank character
           (the  syntax  of  ANSI  C  escape  sequences  is  slightly
           different).   The NUL  character ("\0")  is not allowed in
           patterns.


           1.2 Character Classes           1.2 Character Classes

           Two slightly  different patterns  (for example,  "sit" and
           "sat") can be combined into the single pattern ("s[ai]t").
           The "ai" enclosed in square brackets, "[" and "]", matches
           a single  character, either  a single "a" or a single "i".
           The  brackets   enclose  a  character  class,  a  list  of
           alternatives to  match.   Character  classes  can  include
           escape  sequences   (for  example,   "[ \t\n]"  matches  a
           whitespace character).   A  character class  is negated or
           complemented by  a caret  at the  beginning.  For example,
           "[^ \t\n]" is any character except a blank, tab, or end of
           line.   Note that  this is  not the  same as the printable
           characters, it includes the control characters.

           The other  operator in  character  classes  is  the  range
           operator.   The digits  form a continuous range and can be
           abbreviated to  "[0-9]" instead  of "[0123456789]".    The
           octal digits  are "[0-7]".    The  lower  and  upper  case
           letters  both  form  ranges  and  "[a-zA-Z]"  matches  any
           letter.   The order  of the  range limits  is unimportant,
           "[a-z]" and  "[z-a]" are  equivalent.    Ranges  of  other
           characters are allowed, but PCLEX gives a warning message.
           The actual  contents of  the character  class are machine-
           dependent.   To use  the hyphen  as itself  in a character
           class, put  it at  the end  or beginning  of the character
           class or  escape  it  with  a  backslash,  e.g.,  "[-a+]",
           "[+a-]", and  "[a\-+]" are  all equivalent.  The character
           class  "[\001-\0177]"   is  all   allowed  characters  and
           "[ -~]", "[^\01-\037\0177]", and "[\040-\0176]" are the 96
           ASCII printable characters.


                                     Page 29






           PCLEX Users'                                         Manual
           January 17, 1990

           1.3 Repetition           1.3 Repetition

           Repetitions of  elements are  indicated by the "*" and "+"
           operators.  The regular expression "A*" matches any number
           of A's,  including none,  while "A+"  matches one  or more
           A's.  The pattern for C identifiers is:

                [_a-zA-Z][_a-zA-Z0-9]*

           A specific number of repetitions is specified by a number
           inside braces, "{" and "}".  For example, "AA" and "A{2}"
           both match exactly two A's.  Two numbers separated by a
           comma inside the braces specify a range of repetitions.
           For example, "[a-z]{1,5}" matches one to five lower-case
           letters.



           1.4 Arbitrary Character           1.4 Arbitrary Character

           The "." operator matches any character except the end of a
           line.   For example,  "a.b" matches  "aab", "a0b",  "a\b",
           etc.  To avoid letting unmatched input fall through to the
           default action, the last rule in the section is typically:

                .       /* action for all other input */

           Do not  use the  patterns ".*"  or  ".+"  to  replace  the
           default action,  hoping to  get unmatched  input  text  in
           chunks, instead  of a  character at  a  time.    The  ".+"
           pattern matches  entire lines  and  overrides  almost  any
           other pattern.   Use  the single  character pattern in the
           example to  replace the  default action,  to  start  with.
           (When you  are proficient  with PCLEX, consider redefining
           the ECHO macro as described in Chapter V.)


           1.5 Alternation and Grouping           1.5 Alternation and Grouping

           The "|"  operator indicates  alternation (either  this  or
           that) and  the "()" operator pair indicates grouping.  The
           expression  "(ab|cd)"   matches  either   "ab"  or   "cd".
           Alternation is  the lowest  precedence  operator.    As  a
           complete pattern,  "ab|cd" also matches "ab" or "cd".  The
           patterns in  each column  below  are  equivalent  to  each
           other:

                ab|cd           [a-c]
                (ab|cd)         (a|b|c)
                (ab)|(cd)




                                     Page 30






           PCLEX Users'                                         Manual
           January 17, 1990

           Multi-character patterns can be repeated by enclosing them
           in parentheses  and following them with either "+" or "*".
           For example, "(abc)+" matches any number of repetitions of
           "abc", i.e.,  "abc",  "abcabc",  "abcabcabc",  etc.    The
           patterns "(a|e|i|o|u)+"  and "[aeiou]+" are equivalent and
           match any number of consecutive vowels.


           1.6 Optional Expressions           1.6 Optional Expressions

           The "?"  operator indicates  that the preceding element is
           optional.   For example,  "ab?c" matches  either  "ac"  or
           "abc".  Groups and character classes can also be optional,
           "a(b|c)?d" and  "a[b-c]?d" both  match  "ad",  "abd",  and
           "acd".


           1.7 Context Sensitivity           1.7 Context Sensitivity

           Sometimes it is desirable to match a pattern only within a
           specific  context.    Context  before  the  pattern  (left
           context) is handled with start conditions, exclusive start
           conditions, actions,  and the "^" operator.  Context after
           the pattern (trailing context) is handled with the "/" and
           "$" operators, and the "yyless()" action.

           The "^"  character is only an operator in the first column
           of a  pattern (or  as the  first character  in a character
           class).   Elsewhere, it  is a  text character.    The  "^"
           operator anchors  a pattern  to the  start of a line.  The
           pattern must  start at the beginning of the line to match.
           For example:

                ^[ \t]*#.*

           matches C  preprocessor directives.   Other  left  context
           methods are explained in section 5.

           The "$"  character is  an operator only when it's the last
           character  in   a  pattern.    Elsewhere,  it  is  a  text
           character.   The "$"  operator anchors  the pattern to the
           end of  a line.   It  does  not  match  the  end  of  line
           character(s), it  restricts  matches  of  the  pattern  to
           immediately before  the end  of a  line.  For example, the
           scanner program:

                ^[ \t]+$        ;

           matches and  discards trailing  whitespace on  lines.  The
           ends of lines are not matched and remain in the output.




                                     Page 31






           PCLEX Users'                                         Manual
           January 17, 1990

           The "/"  operator is  a more  general  way  of  indicating
           trailing context.   The  pattern precedes  the "/" and the
           trailing context  follows.    For  example,  the  patterns
           "abc$" and  "abc/\n" are  equivalent.   Both  match  three
           characters and  leave the  end of line for another pattern
           to match.

           Another  way  to  handle  trailing  context  is  with  the
           "yyless()" action.  It is described in the next section on
           actions.


           2. Actions           2. Actions

           When a  pattern  is  matched,  the  scanner  executes  the
           corresponding action.  PCLEX allows multiple statements in
           an action.  If they will fit after the pattern on the same
           line,  no  braces  are  necessary.    Longer  actions  are
           enclosed in  braces, "{"  and "}",  and can  span  several
           lines.   The braces  must  be  balanced.    PCLEX's  brace
           counting can  be thrown  off by  braces  in  comments  and
           quoted strings.   If  an action  has either  of these, use
           "%{" "%}"  brackets.   These brackets  cannot be nested or
           substituted for  braces.   Do not  put either bracket in a
           comment or  quoted literal.   If you need one in a string,
           use escape sequences to break it up.  For example, instead
           of "%{...%}", use "%\{...%\}" on older K&R C compilers and
           "%" "{...%" "}" on ANSI C compilers.

           In an  action, the  matched text is in the character array
           "yytext[]", and  its length  is in  the  integer  variable
           "yyleng".   The amount  of matched  text can be changed in
           the action.   The  built-in action  "yyless(n)"  indicates
           that only  the first  "n" characters  of the current match
           are to be retained and the rest are to be pushed back onto
           the input  for rescanning.  "yytext" should not be changed
           directly.   The "yyless()" function provides the same sort
           of lookahead offered by the "/" operator (see section 1.7)
           in  a  different  form.    The  following  two  rules  are
           equivalent:

                abcd/efg        ;
                abcdefg         yyless(4);


           3. Ambiguous Rules           3. Ambiguous Rules

           PCLEX generated  scanners compare the patterns against the
           input stream.   The  longest string that matches a pattern
           is read  into "yytext[]",  the pattern's  action executed,
           and scanning resumes on the remaining input.  If more than
           one pattern  matches this  input string,  the order of the


                                     Page 32






           PCLEX Users'                                         Manual
           January 17, 1990

           patterns in  the scanner description file determines which
           matches.   The first  pattern is  the first  choice.   For
           example, given the patterns:

                abc
                [abc]+

           The first matches the first three characters of "abcd" and
           the second  matches the "d" (two successive matches).  The
           second matches all of "abcba".

           A frequent  shortcut for  scanners used with parsers is to
           have no  explicit rules for single character operators and
           delimiters, and to add a final rule like:

                .       return yytext[0];

           This matches  any  character  not  otherwise  matched  and
           passes it  to the  parser.   Since the  parser has to deal
           with invalid  input anyway,  this leaves  the  problem  of
           reporting invalid  characters as well as invalid syntax up
           to  the   parser.    This  centralizes  both  lexical  and
           syntactic error reporting in one place.

           Sometimes the  above rules  are not  sufficient.    If  an
           action  determines  that  another  match  is  better,  the
           "REJECT;" action  forces the scanner to take the next best
           match.   The REJECT  allows PCLEX  use even  in situations
           where the  basic pattern  matching mechanism  is not quite
           general enough.

           Sometimes,  matches   should  not  be  laid  end  to  end.
           Instead, all  possible matches, even ones that overlap are
           wanted.   For  example,  consider  the  following  scanner
           program  to  count  the  frequency  of  pairs  of  letters
           (digraphs) in a file:

                %%
                [a-zA-Z][a-zA-Z]        ++digraph[yytext[0]][yytext[1
                ]];

           This scanner  counts consecutive  pairs.   For example, in
           the word  "pair" it  would count  two digraphs:  "pa"  and
           "ir".   To count  overlapping pairs, i.e., "pa", "ai", and
           "ir", the following changes are needed:

                %%
                [a-zA-Z][a-zA-Z]  {
                                                ++digraph[yytext[0]][
                yytext[1]];
                                                REJECT;
                                           }


                                     Page 33






           PCLEX Users'                                         Manual
           January 17, 1990

           Note that this can also be done another way:

                %%
                [a-zA-Z][a-zA-Z]  {
                                                ++digraph[yytext[0]][
                yytext[1]];
                                                yyless(1);
                                           }

           For clarity,  some details necessary for a working program
           have been  omitted.   The complete  programs  are  in  the
           \DIGRAPH directory.

           In general,  the REJECT  action is useful for matches that
           overlap and  for instances  where  semantics  and  lexical
           analysis interact.


           4. Definitions           4. Definitions

           Definitions (macros  for regular expressions) are declared
           in the  first section  of the  scanner description (before
           the first "%%").  They are of the form:

                name translation

           and must  start in  the first  column.  The translation is
           substituted in  the rules  section wherever "name" appears
           within braces.   The  following scanner  program matches C
           identifiers:

                alpha   [a-zA-Z]
                digit   [0-9]
                %%
                ({alpha}|_)({alpha}|{digit}|_)*

           In PCLEX,  the replaced  text is  enclosed in parentheses.
           For example, given the definition and regular expression:

                NAME    [A-Z][A-Z0-9]*
                %%
                foo{NAME}?
                %%

           PCLEX (and  FLEX) will match "foo" because they expand the
           rule to:

                foo([A-Z][A-Z0-9]*)?

           Both of the character classes are included in the optional
           part.   UNIX LEX  will not  match "foo" because it expands
           the rule to:


                                     Page 34






           PCLEX Users'                                         Manual
           January 17, 1990

                foo[A-Z][A-Z0-9]*?

           Here, the  "?" only applies to the second character class.
           The first character class is in the required part.


           5. Left Context           5. Left Context

           Not all  programs have  the  same  syntax  throughout  the
           entire input.   For  example, the three different sections
           in both  PCLEX and  PCYACC have  quite  different  syntax.
           This  section   describes  three   ways  to   handle  this
           situation: with  the actions  and user  subroutines,  with
           start conditions  (section 5.2),  and with exclusive start
           conditions (section 5.3).


           5.1 Actions and User Subroutines           5.1 Actions and User Subroutines

           Actions can explicitly set and test variables to change
           the output depending on some prior condition.  This method
           is suitable when the output is context dependent and the
           input syntax is constant regardless of context.



           5.2 Start Conditions           5.2 Start Conditions

           Start conditions  allow turning  some patterns  on in some
           contexts and  off in  others.  The scanner starts off with
           all start  conditions off,  the default  start  condition.
           Actions put the scanner in a start condition and return it
           to the default start condition.  Each start condition must
           first be  declared in  the definitions section with a line
           like:

                %Start name1 name2

           The start  conditions may  be named  in any  order.    The
           keyword "%Start"  can be shortened to either "%s" or "%S".
           The start  condition is  referenced at  the start  of  the
           applicable rule(s) in pointed brackets, "<" and ">":

                <name1>pattern          action;

           Such a  pattern is  only recognized when the scanner is in
           the start  condition "name1".   To  enter start  condition
           "name1", execute the action statement:

                BEGIN(name1);




                                     Page 35






           PCLEX Users'                                         Manual
           January 17, 1990

           To reset  the start  condition to the default, execute the
           action:

                BEGIN(0);

           The scanner  can be in only one start condition a at time.
           A rule  may be  active in  several start  conditions.  For
           example:

                <name1,name2,name3>pattern      ;

           Except  when   the  scanner   is  in  an  exclusive  start
           condition, any  rule not  beginning with  a "<>" prefix is
           always active.

           The current definition of the BEGIN macro is:

                #define BEGIN yy_start = 1 +

           This maintains  compatibility with  UNIX  LEX.    However,
           there  is   a  trap  for  the  unwary  here.    The  naive
           expectation   for    the   action    "BEGIN 2 << x;"    is
           "yy_start = 1 + (2 << x);",      the       reality      is
           "yy_start = (1 + 2) << x;" (in C, "+" is higher precedence
           than "<<").   It  is strongly  suggested that  you  always
           enclose the  "BEGIN" expression in parentheses.  This will
           give  the  expected  results,  even  if  the  BEGIN  macro
           definition changes in future releases.


           5.3 Exclusive Start Conditions           5.3 Exclusive Start Conditions

           A start  condition turns  on additional rules when active.
           An exclusive  start condition  turns off  all normal rules
           and turns  on only those rules prefixed with the exclusive
           start condition  name.   Exclusive  start  conditions  are
           declared in  the definitions  section with "%x" instead of
           "%s".

           Matches can  theoretically be  of any length (for example,
           "(.|\n)*" matches  the entire  input file).  The practical
           limit is  set by  the size  of an  internal buffer.   If a
           match can  span several  lines, it  should be  broken into
           several matches,  each not  exceeding a line in length.  A
           good way  to break  up the  matches is with start, middle,
           and end patterns.  The start patterns match the beginning,
           (e.g., the  "/*" in  a C  comment) and BEGIN the exclusive
           start condition.   The middle patterns are prefixed by the
           exclusive start  name in  "<>" and  match partial or whole
           lines in  the middle  (e.g., anything up to the end of the
           line or  a "*/").  The end patterns match the character(s)



                                     Page 36






           PCLEX Users'                                         Manual
           January 17, 1990

           that close  the whole  thing (e.g.,  "*/") and  reset  the
           start condition with "BEGIN(0);".

           C comments  can extend  over several  lines.  Whatever the
           scanner's buffer size, some program will exceed it.  The C
           comments portion  of the  ANSI C  scanner in  \ANSIC looks
           like this:

                %x      COMMENT
                %%
                "/*"                    BEGIN(COMMENT);
                <COMMENT>"*/"           BEGIN(0);
                <COMMENT>[^*\n]+        ;
                <COMMENT>\n             ++yylineno;
                <COMMENT>"*"            ;
                %%

           The COMMENT  exclusive start  condition is declared in the
           definitions section.   The first rule recognizes the start
           of a  C comment.   The second rule recognizes the end.  To
           avoid  overflowing  the  scanner's  internal  buffer,  the
           comment contents  are recognized  a line  at a  time.  The
           third and  forth rules do this.  The third and fifth rules
           fix a subtle problem.  If the third rule read "[^\n]+", it
           would match  every line  after  the  start  of  a  comment
           including the  asterisk of the closing "*/" (except in the
           case of  a "*/"  at the start of a line because the second
           and third  rules would both match the same length text and
           the earlier  rule takes precedence).  The "*" in the third
           rule prevents  it from  matching the comment's close.  The
           fifth rule matches a solitary "*" without a following "/".

           For extensive  examples of exclusive start conditions, see
           SCAN.L in \PCLEX on the PCLEX disk.




















                                     Page 37






           PCLEX Users'                                         Manual
           January 17, 1990

           

                     X. EXTENDING AND CUSTOMIZING SCANNERS                     X. EXTENDING AND CUSTOMIZING SCANNERS


           PCLEX has  a number  of macros  that can  be redefined  to
           customize or  extend the  generated scanner.    The  input
           stream functions  ("input()" and  "unput()") can be called
           by actions,  user subroutines,  and  other  parts  of  the
           program.


           1. Macros           1. Macros

           The following  macros are  those most likely to redefined.
           For portability,  they should  be undefined  before  being
           redefined.  "yywrap()" can be redefined as a macro or as a
           function.

           "yywrap()" - called when the scanner reaches the end
                of the file.  If it evaluates to non-zero, the
                scanner finishes up processing and returns a
                zero to the caller.  If "yywrap()" evaluates to
                zero, the scanner continues, expecting new
                input.  This is useful for doing file inclusion
                and other multiple input file scanning.  The
                predefined "yywrap()" evaluates to 1.

           "ECHO" - is the default action if the "-s" option is
                not given.  The predefined "ECHO" macro copies
                the matched input to the output stream.
                Redefine it to change the default action.

           "YY_DECL" - is a macro that declares the scanning
                function generated by PCLEX.  It can be
                redefined to change the function name, type, or
                argument list.  For example:
                
                #undef YY_DECL
                #define YY_DECL float lexscan(float a, float b)
                
                gives the scanner function the name "lexscan".
                It takes two floats as arguments and returns a
                float.










                                     Page 38






           PCLEX Users'                                         Manual
           January 17, 1990

           "YY_INPUT" - macro called by "input()" to read more
                input text into a buffer.  Its three arguments
                are: the buffer to read the input into, an
                integer variable that receives the number of
                characters actually read, and the size of the
                buffer.  The default value is:
                
                #define YY_INPUT(buf,result,max_size) \
                     if (fgets(buf, max_size, yyin) != NULL) \
                          result = strlen(buf); \
                     else if (!ferror(yyin)) \
                          result = YY_NULL; \
                     else \
                          YY_FATAL_ERROR("fgets() in flex
                scanned failed");
                
                A faster, though not as portable version is:
                
                #define YY_INPUT(buffer,result,max_size) \
                     if ((result =
                read(fileno(yyin),buf,max_size)) < 0) \
                          YY_FATAL_ERROR("fgets() in flex
                scanned failed");
                
                On some compilers, The "read()" function does
                not do end of line translation.
                
                Because of the buffering within "input()",
                "YY_INPUT" should not be called, except by
                "input()".  If your code needs to read the input
                stream directly, call "input()".

           "YY_BUF_SIZE" - is the size of the input buffer used
                "input()" and "unput()".  The longest allowed
                match is "YY_BUF_SIZE - 1".

           "YY_NULL" - is the value of the "YY_INPUT" "result"
                at an end of file (EOF) on the input stream.


           2. Variables           2. Variables

           "FILE *yyin" - input stream read by "input()",
                initialized to "stdin".

           "FILE *yyout" - output stream written to by "ECHO",
                initialized to "stdout".


           3. Functions           3. Functions

           "input()" - returns the next input character.


                                     Page 39






           PCLEX Users'                                         Manual
           January 17, 1990

           "unput(c)" - pushes the character "c" back onto the
                input stream to be later read by "input()".




















































                                     Page 40






           PCLEX Users'                                         Manual
           January 17, 1990

           


           4. Scanner Skeleton Format           4. Scanner Skeleton Format

           PCLEX combines  the user's  C code,  tables generated from
           the patterns,  and the  scanner code  that uses the tables
           (the scanner skeleton).  The default scanner skeleton code
           is built into PCLEX.  With the -P option, you can use your
           own skeleton code.  FLEX.SK in \PCLEX is equivalent to the
           built-in  skeleton.    A  skeleton  is  in  four  sections
           separated by  lines beginning  with "%%".  The skeleton is
           copied to  the scanner C file with the "%%" lines replaced
           by code copied from the scanner description file or tables
           generated by PCLEX.

           The  first   section  of   the  skeleton  is  header  file
           #includes, C  macro definitions,  and function prototypes.
           The first  "%%" line  is  replaced  by  C  code  from  the
           definitions section  and the  scanner tables  generated by
           PCLEX.   The second section is the "unput()" and "input()"
           functions that  buffer the  input stream  and  handle  the
           reading ahead  and backing  up done  for trailing context,
           "yyless()", and  other methods  of lookahead.  The scanner
           function  header   ("YY_DECL")  and   its  local  variable
           declarations finish  up the  second section.   The  second
           "%%" line  is replaced by C code from the rules section of
           the scanner  description file.   This code is declarations
           local to  the scanner  function used  by the  actions  and
           executable code  to be  run each time the scanner function
           is called.  The third section is the bulk of the code that
           interprets  the  generated  tables  and  does  the  actual
           pattern matching.   The third "%%" line is replaced by the
           actions' code.   This  code is  in a  "switch"  statement.
           Each action's  code is  preceded by  a  "case"  label  and
           followed by a "YY_BREAK" macro call.  The "YY_BREAK" macro
           normally is  a "break"  statement.   The fourth section is
           the rest  of the  scanner function.    The  entire  users'
           subroutine section  is copied  verbatim to  the scanner  C
           file, after the fourth section.

           Study the  FLEX.SK code  carefully  and  look  at  several
           generated scanner  C files before writing your own scanner
           skeleton.


           4.1 Scanning Algorithm           4.1 Scanning Algorithm


           4.2 Data Table Structure           4.2 Data Table Structure




                                     Page 41






           PCLEX Users'                                         Manual
           January 17, 1990

           

                        XI. INTEGRATING PCYACC AND PCLEX                        XI. INTEGRATING PCYACC AND PCLEX


           PCYACC generated  scanners call  "yylex()" for  each token
           they   parse.  The parser passes no arguments to "yylex()"
           and expects  an integer return value.  The return value is
           either a  character widened  to an  integer or  one of the
           %token values  #defined in  the C  header file.  Note that
           while  PCYACC  allows  periods  in  %token  names,  the  C
           compiler will not.  Periods are okay in non-terminal names
           since the C compiler will never see them.

           A typical scanner action ends with either

                return yytext[0]

           or

                return TOKEN;

           where "TOKEN"  is #defined  in the  C header  file.    The
           conventional way  to pass  additional information from the
           scanner actions  to the  parser  actions  is  through  the
           variable "yylval".  Its type is "YYSTYPE", the same as the
           semantic stack  maintained  by  the  parser  and  accessed
           through the "$$", "$1", "$2", etc. variables in the parser
           actions.   "YYSTYPE" is  set with  "%union" in  the  first
           section  of   the  parser  description  file.    "YYSTYPE"
           defaults to  "int" if there is no "%union".  The "typedef"
           for "YYSTYPE"  is also in the C header file.  For example,
           the parser description:

                %union {
                  int i;
                  float r;
                  char *s;
                }
                %token DDD
                %%

           results in the C header file:

                typedef union {
                  int i;
                  float r;
                  char *s;
                } YYSTYPE;
                extern YYSTYPE yylval;
                #define DDD 257



                                     Page 42






           PCLEX Users'                                         Manual
           January 17, 1990

           Additional variables  can be  declared YYSTYPE.    Further
           examples of  PCLEX/PCYACC interaction  are the  DATES  and
           ANSIC programs explained in the next section.


           1. C Header Files           1. C Header Files


           2. "yylval" and "YYSTYPE"           2. "yylval" and "YYSTYPE"


           3. Builds           3. Builds










































                                     Page 43






           PCLEX Users'                                         Manual
           January 17, 1990

           

                                 XII. EXAMPLES                                 XII. EXAMPLES


           Source for  PCLEX's  scanner  is  included  on  the  PCLEX
           distribution disk.   Other  examples are  on the  EXAMPLES
           disk.   The following sections discuss two of the examples
           in  detail:     DATES   (U.S.  and   European  style  date
           recognition) and ANSIC (an ANSI C syntax analyzer).


           2. ANSI C Syntax Analyzer           2. ANSI C Syntax Analyzer

           The  ANSI   C  scanner,  LEX.L,  is  a  "plug  compatible"
           replacement for  the hand coded scanner LEX.C in \ANSIC of
           the PCYACC  distribution.   The rest  of the  code is  the
           same.

           The definitions section #includes the needed header files,
           prototypes a  local function,  declares a  macro that  the
           function uses,  defines several regular expression macros,
           and declares an exclusive start condition.

           The precise  definition of  escape sequences  is different
           for PCLEX,  the older  Kernighan and  Ritchie  C  standard
           (K&R), and the ANSI C standard.  The PCLEX escape sequence
           definition is:

                \\(.|0[0-7]{1,3})

           Most of the older (K&R) C compilers use:

                \\(.|\n|0[0-7]{0,3})

           This definition  allows escaped  ends of  lines.  They are
           used for  strings that  span line  boundaries.   PCLEX and
           does not allow this.

           The ANSI  C escape  sequence  definition  is  a  backslash
           followed by  either 1)  one of  the letters  "abfnrtv",  a
           single quote,  a double quote, a question mark, or another
           backslash, or  2) one to three octal digits, or 3) a lower
           case "x"  followed by  one  or  more  hexadecimal  digits.
           PCLEX does  not allow  "\0".   The string  "\x007" is  two
           bytes long  for ANSI  C  (equivalent  to  "\a",  the  BELL
           character and  a terminating  NUL) and five bytes long for
           PCLEX and K&R C (equivalent to "x007").

           The  first   pattern  in   the   rules   section   matches
           preprocessor  directives.    They  are  discarded  by  the
           scanner.   The next  block of  patterns match the C multi-


                                     Page 44






           PCLEX Users'                                         Manual
           January 17, 1990

           character   operators.      The   pattern   after   those,
           "{letter}{alphanum}*"   matches   both   identifiers   and
           keywords.  The function "keyword()" determines which.

           The patterns  for quoted  strings and  character  literals
           follow.  The ANSI C standard makes a nod toward the multi-
           national nature  of  computer  use  with  locale  specific
           characters.   Preceding a character literal or string with
           a capital "L" allows locale specific characters.  Japanese
           and Chinese  both use  16-bit (2-byte)  characters.    The
           hexadecimal escape  sequences have  no limit on the number
           of digits and can be more than a byte long.  The semantics
           of multi-byte characters is not handled, but the syntax is
           checked.

           The obvious pattern for a quoted string is:

                \".*\"

           This is  short, elegant, clear, and unfortunately, doesn't
           work.   If there  is more  than one string on a line, this
           pattern matches  both of  the strings  and  everything  in
           between (remember,  the  longest  match  is  used).    The
           correct pattern is:

                \"([^"\\\n]|{esc})*\"

           This pattern  excludes quotes  and  line  boundaries  from
           strings and handles escape sequences properly.  The escape
           sequence macro  is overkill.  A simpler regular expression
           would allow  all valid strings without trying to bring out
           the semantics.  A simpler pattern that is adequate is:

                \"([^"\\\n]|\\\")*\"

           The next  three rules handles numeric constants.  Integers
           are simple.   Floating  point numbers  are fairly  simple.
           The need  to quote  or escape  all the non-text characters
           obscures the underlying simplicity.  Basically, a floating
           point number  is any number with a decimal point in it and
           a possible  exponent after  it.   Two rules  are needed to
           make sure  that a  decimal point  all by  itself is  not a
           number.

           The scanner  discards blanks  and tabs.  Ends of lines are
           added  to   the  line  number,  "yylineno"  and  otherwise
           ignored.   Comments are  also discarded.   Ends  of  lines
           within comments  are counted.   A  detailed explanation of
           the comment  rules is  in the  section on  exclusive start
           conditions (Chapter  IV,  section  5.2).    Any  otherwise
           unmatched character is passed directly to the parser.



                                     Page 45






           PCLEX Users'                                         Manual
           January 17, 1990

           The reserved  words in  the array "keyword_list[]" must be
           in alphabetical  order for the binary search in "keywords"
           to work.  Each keyword is paired with its token value that
           is passed  to the  parser.   Any identifier  that is not a
           keyword is an IDENTIFIER.

           The  LEX.L   scanner   illustrates   the   techniques   of
           recognizing the kinds of tokens you will encounter in most
           programming  languages:   quoted  and   numeric  literals,
           comments,   single    and    multi-character    operators,
           identifiers, and keywords.











































                                     Page 46






           PCLEX Users'                                         Manual
           January 17, 1990

           

                            APPENDIX I. INSTALLATION                            APPENDIX I. INSTALLATION


           Installation of PCLEX is simple and straight forward.  Its
           self-contained nature makes it much easier to install than
           comparable products.


           1. System Requirements           1. System Requirements

           PCLEX will  work on  most  PC-DOS  and  MS-DOS  computers.
           Specifically, all  IBM PCs,  XTs, ATs, and compatibles, as
           well as IBM PS2s, 286, and 386 based computers.

           The following configurations are sufficient to run PCLEX:

           Configuration #1:
                640KB memory
                5.25 or 3.5 inch floppy drive
                hard disk

           Configuration #2:
                640KB memory
                2 5.25 or 3.5 inch floppy drives

           The following programs are needed for software development
           using PCLEX:

           1) a  text editor  for programming  (like BRIEF,  EPSILON,
           EMACS, or  EDLIN).   Many word  processing programs  (like
           Wordstar) will  work in  non-document mode.   The  scanner
           description file  must  be  straight  ASCII  with  no  IBM
           extended   characters,   hidden   characters,   or   other
           characters with the high bit set.

           2) a C compiler (like Microsoft C).


           2. Making Working Copies           2. Making Working Copies

           It is  always a  good practice  to  make  copies  of  your
           original diskettes  to protect  against accidental damage.
           Installation should  be  done  from  the  copies  and  the
           original diskettes  stored safely  away from  the computer
           and other  source of  heat or  strong magnetic fields like
           music speakers, motors, and transformers.






                                     Page 47






           PCLEX Users'                                         Manual
           January 17, 1990

           3. Installing PCLEX           3. Installing PCLEX

           PCLEX eliminates the need for a separate library of source
           code, which  was required by earlier UNIX versions, and is
           still required by many other implementations.  This change
           makes it  transparent to  you as  user  that  there  is  a
           library routine  that supports  PCLEX's operation.    This
           change also simplifies the installation process.

           To perform  the standard  installation, follow these steps
           (these are many alternate ways of installing PCLEX):

           1). create a directory for PCLEX to reside (e.g., \PCLEX):

                C>cd \                  ____
                C>mkdir pclex                  ___________
                C>cd pclex                  ________

           2). insert the diskette containing PCLEX in drive A:

           3). copy files from the diskette to the hard disk:

                C>copy a:*.*                  __________

           4). modify "AUTOEXEC.BAT" file to add "\PCLEX" to the PATH
           environment variable and reboot.

           At this  point, the  installation process  is complete and
           PCLEX is  ready to  go.   (Files in  subdirectories of the
           distribution   diskette    contain   several   interesting
           examples, which  you may  also want to copy onto your hard
           disk at this time; or you may choose to copy them later as
           you need them.)

           NOTE: If you already have a directory (like "\BIN") set up
           for  executable  programs,  "PCLEX.EXE"  may  be  directly
           copied to  that directory.   No changes need to be made to
           the "AUTOEXEC.BAT"  file.  However, it is recommended that
           you create  a separate  directory for  PCLEX.   Creating a
           separate directory  makes it easier to organize your PCLEX
           related files and example PCLEX programs.













                                     Page 48






           PCLEX Users'                                         Manual
           January 17, 1990

           

                          APPENDIX II. ERROR MESSAGES                          APPENDIX II. ERROR MESSAGES



















































                                     Page 49






           PCLEX Users'                                         Manual
           January 17, 1990

           

                           APPENDIX III. BIBLIOGRAPHY                           APPENDIX III. BIBLIOGRAPHY


           Aho, A.V. and Ullman, J.D. "Principle of Compiler Design",
                Addison-Wesley, Reading, Massachusetts, 1977.

           Barrett, William A. "Compiler Construction", 2nd Edition,
                Science Research Associates, Chicago.

           Chomsky, Noam, "Three models for the description of                           ___________________________________
                languages," IEEE Transactions on Information Theory,                _________                                           
                Vol. 2 (1956), pg. 113-124.

           Farmer, Mick. "Compiler Physiology for Beginners",
                Chartwell-Brat.

           Fischer, Charles N. and LeBlanc, Richard J. "Crafting a
                Compiler", Addison-Wesley, 1988.

           Johnson, S.C. and Lesk, M.E. "Language Development Tools",
                The Bell System Technical Journal, Vol. 57, No. 6,
                Part 2 (July-August 1978).

           Lesk, M.E. and Schmidt, E. "Lex - A Lexical Analyzer",
                Unix Programmer's Manual, Bell Laboratories, 1978.

           Kernighan, B.W. and Ritchie, D.M. "The C Programming
                Language", Prentice-Hall, Englewood Cliffs, New
                Jersey, 1978.

           Pyster, A.B." Compiler Design and Construction", Van
                Nostrand Rheinhold, New York, New York, 1980.

           Schreiner, A.T. and Friedman, Jr. H.G. "Introduction to
                Compiler Construction with UNIX", Prentice-Hall,
                Englewood Cliffs, New Jersey, 1985.
















                                     Page 50






           PCLEX Users'                                         Manual
           January 17, 1990

           

                             APPENDIX IV. GLOSSARY                             APPENDIX IV. GLOSSARY

           
           Action: Fragment of C code executed when its           ______                                      
                corresponding pattern is matched.
           Algorithm: step by step instructions on how to do           _________                                        
                some task, that guarantees success.  For
                example: in cooking, recipes are algorithms.
           Backus-Naur Form (BNF): a notation used for           ________________                           
                describing context free grammars.  It was first
                used in the report on the ALGOL-60 programming
                language for describing the syntax.
           Backus-Normal Form (BNF): see Backus-Naur Form           __________________                            
           Declarations Section: the first section a GDP.           ____________________                          
           Default: the action or value used if no action or           _______                                          
                value is explicitly given.
           Default action:           ______________ 
           Definitions Section: The first part of a scanner           ___________________                             
                program, in which one defines names, declares
                global variables, C macros, and #includes needed
                header files.
           Equivalent: having identical effects.  Two patterns           __________                                         
                are equivalent if every input that one matches
                the other also matches.
           Grammar: the structures of a language and the rules           _______                                            
                for combining them.
           Grammar Description File (GDF): input file to PCYACC           ________________________                            
                describing the syntax of the target language.
           Grammar Description Language (GDL): the language used           ____________________________                         
                to describe the syntax and parsing of the target
                language, a combination of BNF and C.
           Grammar Description Program (GDP): programs written           ___________________________                        
                in GDL for parsing programs in the target
                language.
           Grammar Rules Section:           _____________________ 
           Keyword: word or identifier reserved by the language           _______                                             
                for special use.  Examples in C are: "if",
                "else", "void".
           Lexical Scanner: Program that reads the input and           _______________                                  
                recognizes a the tokens of the target language.
           Macro:           _____ 
           Options: command line arguments to change the action           _______                                             
                of a program.  Also known as switches and flags.
           Parser: A program that analyzes the syntax of program           ______                                               
                input.
           Parser Generator: A program that is capable of           ________________                              
                automatically generating parsers from a language
                description.




                                     Page 51






           PCLEX Users'                                         Manual
           January 17, 1990

           Port: (verb) short for transport.  Means to move a           ____                                              
                program to another hardware or software
                environment and make any necessary changes
           PCYACC: Abraxas Software's implementation of YACC           ______                                           
                (see), a parser generator.                 ___                      
           Program Section: third and last section of a GDP,           _______________                                  
                where needed C functions can be included.
           Regular Expression:           __________________ 
           Reserved Word: see Keyword.           _____________      _______ 
           Rules Section:           _____________ 
           Scanner: see Lexical Scanner.           _______      _______________ 
           Scanner Definition File (SDF): input file to PCLEX           _______________________                           
                that defines the tokens of the input language
                and any auxiliary processing.
           Scanner Definition Language (SDL): the language used           ___________________________                         
                to write scanner description programs; a
                combination of regular expressions and C.
           Scanner Definition Program (SDP): programs written in           __________________________                           
                SDL that describe the lexical analysis of a
                target language.
           Target Language:           ________________
           Token: Smallest syntactic unit, usually recognized by           _____                                                
                scanners or lexical analysis.  Examples are:
                identifiers, keywords, operators, terminators,
                and delimiters.
           User Subroutines Section:           ________________________ 
           YACC: Yet Another Compiler-Compiler, a widely           ____                                         
                available parser generator.


























                                     Page 52






           PCLEX Users'                                         Manual
           January 17, 1990

           

                 APPENDIX V. DIFFERENCES BETWEEN LEX AND PCLEX                 APPENDIX V. DIFFERENCES BETWEEN LEX AND PCLEX

           
              o The FLEX engine is used.
              o Command line format has a PCYACC flavor (see
                section 2).
              o Exclusive start conditions ("%x") have been added
                (see 3.5.2).
              o Ratfor scanners ("%r") are not supported.
              o Translation tables ("%t") are not supported.
              o Internal array sizes are dynamically resized.  The
                "%p", "%n", "%e", "%a", "%k", and "%o" lines are
                ignored.
              o There is no run-time library to link to.
              o Definitions are enclosed in parentheses when
                expanded (see 3.4).
              o Only one input file is supported.  LEX
                concatenates all the files in the command line
                (see section 2).
              o multiple actions per line are allowed (see 3.2).
              o the undocumented LEX variable "yylineno" is not
                supported (see the examples in section 8 for how
                to explicitly support "yylineno".
              o the "yymore()" and "output()" functions are not
                supported.



























                                     Page 53






           PCLEX Users'                                         Manual
           January 17, 1990

           

                APPENDIX VI. DIFFERENCES BETWEEN FLEX AND PCLEX                APPENDIX VI. DIFFERENCES BETWEEN FLEX AND PCLEX

           
              o Command line format has a PCYACC flavor (see
                section 2).
              o no fast (FLEX "-f" option) or full (FLEX "-F"
                option) tables.
              o no equivalence classes (FLEX "-ce" option) or
                meta-equivalence classes (FLEX "-cm" option).
              o default scanner skeleton is stored internally.
              o the REJECT action is always supported.
              o interactive scanners (FLEX "-I" option) are always
                generated.
              o the FLEX header files ("fastsdef.h", "flexsdef.h",
                and "flexscom.h") are stored internal to PCLEX and
                output at scanner generation time.




































                                     Page 54










       

                                       INDEX                                       INDEX

       
       
       #line directives  7, 9
       assembler  11
       assembly languages  11
       case-insensitive  7, 9
       Chomsky, Noam  23
       computer language  11
       default action  8, 10
       formal languages  16
       grammars  16
         context free  23
         context sensitive  23
         phrase structure  23
         regular  24
       help screen  7, 8
       installation  42
       instruction set  11
       machine language  11
       options  7
       output file  7
       output file name  8
       programs  11
       skeleton, scanner  8, 9
       yylex.c  7

       



































                               TABLE OF CONTENTS                               TABLE OF CONTENTS

      
      
      Preface                                                    1
      I. Overview                                                2
          1. Typographic Conventions                             2
          2. Manual Organization                                 3
      II. Overview of PCLEX                                      5
          1. History                                             5
          2. What PCLEX Does                                     5
      III. Command Line and Options                              7
          1. Command Line Format                                 7
          2. Command Line Options                                8
      IV. Basics of Programming Languages                       11
          1. What is a Programming Language                     11
          2. What are Compilers                                 11
      V. Getting Started -- A Small Example                     13
          1. Scanner Description File for Word Count Program    13
          2. Building the Executable File                       15
          3. Sample Session                                     15
      VI. Basic Concepts Revisited                              16
          1. General Concepts                                   16
          2. Regular Expressions                                17
          3. PCLEX Terminologies -- A Short Review              17
      VII. Dates -- A Second Example                            18
          1. Problem Statement                                  18
          2. Developing the Source Language                     18
          3. Separate the Lexical and Syntactic Parts           19
          4. Write the PCLEX Scanner Description                19
          5. Write the PCYACC Parser Description                21
          6. Write the Auxiliary C Code                         22
          7. Build the Program                                  22
      VIII. Principles Behind PCLEX                             23
          1. Introduction to Formal Languages                   23
          2. Regular Expressions                                24
          3. Regular Languages                                  24
          4. Nondeterministic Finite State Machines (NDFSM)     24
          5. Deterministic Finite State Machines (DFSM)         24
          6. PCLEX -- From Regular Expressions to DFSM          24
      IX. Writing PCLEX Syntax Descriptions                     25
          1. Regular Expressions                                26
          2. Actions                                            29
          3. Ambiguous Rules                                    30
          4. Definitions                                        31
          5. Left Context                                       32
      X. Extending and Customizing Scanners                     35
          1. Macros                                             35
          2. Variables                                          36
          3. Functions                                          36
          4. Scanner Skeleton Format                            37
      XI. Integrating PCYACC and PCLEX                          38
          1. C Header Files                                     39












          2. "yylval" and "YYSTYPE"                             39
          3. Builds                                             39
      XII. Examples                                             40
          2. ANSI C Syntax Analyzer                             40
      Appendix I. Installation                                  42
          1. System Requirements                                42
          2. Making Working Copies                              42
          3. Installing PCLEX                                   42
      Appendix II. Error Messages                               44
      Appendix III. Bibliography                                45
      Appendix IV. Glossary                                     46
      Appendix V. Differences between LEX and PCLEX             48
      Appendix VI. Differences between FLEX and PCLEX           49






















































                                       
                                       
                                       
                                       
                                       
                                       
              Lexical Scanner Construction on Personal Computers              Lexical Scanner Construction on Personal Computers
                                 (with PCLEX)                                 (with PCLEX)

                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
             PCLEX (r) is a software product of ABRAXAS SOFTWARE, Inc.
                LSCPC (c) Copyright 1989-1990, ALL RIGHTS RESERVED

                        For more information, contact:

                            ABRAXAS SOFTWARE, INC.
                           7033 S.W. Macadam Avenue
                            Portland, Oregon 97219
                                      USA

